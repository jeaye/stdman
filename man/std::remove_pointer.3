.TH std::remove_pointer 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::remove_pointer \- std::remove_pointer

.SH Synopsis
   Defined in header <type_traits>
   template< class T >              \fI(since C++11)\fP
   struct remove_pointer;

   Provides the member typedef type which is the type pointed to by T, or, if T is not
   a pointer, then type is the same as T.

.SH Member types

   Name Definition
   type the type pointed to by T or T if it's not a pointer

.SH Helper types

   template< class T >                                         \fI(since C++14)\fP
   using remove_pointer_t = typename remove_pointer<T>::type;

.SH Possible implementation

   template< class T > struct remove_pointer                    {typedef T type;};
   template< class T > struct remove_pointer<T*>                {typedef T type;};
   template< class T > struct remove_pointer<T* const>          {typedef T type;};
   template< class T > struct remove_pointer<T* volatile>       {typedef T type;};
   template< class T > struct remove_pointer<T* const volatile> {typedef T type;};

.SH Example

   
// Run this code

 #include <iostream>
 #include <type_traits>
  
 template<class T1, class T2>
 void print_is_same()
 {
     std::cout << std::is_same<T1, T2>() << '\\n';
 }
  
 void print_separator()
 {
     std::cout << "-----\\n";
 }
  
 int main()
 {
     std::cout << std::boolalpha;
  
     print_is_same<int, int>();   // true
     print_is_same<int, int*>();  // false
     print_is_same<int, int**>(); // false
  
     print_separator();
  
     print_is_same<int, std::remove_pointer<int>::type>();   // true
     print_is_same<int, std::remove_pointer<int*>::type>();  // true
     print_is_same<int, std::remove_pointer<int**>::type>(); // false
  
     print_separator();
  
     print_is_same<int, std::remove_pointer<int* const>::type>();          // true
     print_is_same<int, std::remove_pointer<int* volatile>::type>();       // true
     print_is_same<int, std::remove_pointer<int* const volatile>::type>(); // true
 }

.SH Output:

 true
 false
 false
 -----
 true
 true
 false
 -----
 true
 true
 true

.SH See also

   is_pointer  checks if a type is a pointer type
   \fI(C++11)\fP     \fI(class template)\fP 
   add_pointer adds pointer to the given type
   \fI(C++11)\fP     \fI(class template)\fP 
