.TH std::fmod 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::fmod \- std::fmod

.SH Synopsis
   Defined in header <cmath>
   float       fmod( float x, float y );             \fB(1)\fP
   double      fmod( double x, double y );           \fB(2)\fP
   long double fmod( long double x, long double y ); \fB(3)\fP
   Promoted    fmod( Arithmetic1 x, Arithmetic2 y ); \fB(4)\fP \fI(since C++11)\fP

   1-3) Computes the floating-point remainder of the division operation x/y.
   4) A set of overloads or a function template for all combinations of arguments of
   arithmetic type not covered by 1-3. If any argument has integral type, it is cast to
   double. If any other argument is long double, then the return type is long double,
   otherwise it is double.

   The floating-point remainder of the division operation x/y calculated by this
   function is exactly the value x - n*y, where n is x/y with its fractional part
   truncated.

   The returned value has the same sign as x and is less than y in magnitude.

.SH Parameters

   x, y - floating point values

.SH Return value

   If successful, returns the floating-point remainder of the division x/y as defined
   above.

   If a domain error occurs, an implementation-defined value is returned (NaN where
   supported)

   If a range error occurs due to underflow, the correct result (after rounding) is
   returned.

.SH Error handling

   Errors are reported as specified in math_errhandling

   Domain error may occur if y is zero.

   If the implementation supports IEEE floating-point arithmetic (IEC 60559),

     * If x is ±0 and y is not zero, ±0 is returned
     * If x is ±∞ and y is not NaN, NaN is returned and FE_INVALID is raised
     * If y is ±0 and x is not NaN, NaN is returned and FE_INVALID is raised
     * If y is ±∞ and x is finite, x is returned.
     * If either argument is NaN, NaN is returned

.SH Notes

   POSIX requires that a domain error occurs if x is infinite or y is zero.

   std::fmod, but not std::remainder is useful for doing silent wrapping of
   floating-point types to unsigned integer types: (0.0 <= (y = std::fmod(
   std::rint(x), 65536.0 )) ? y : 65536.0 + y) is in the range [-0.0 .. 65535.0], which
   corresponds to unsigned short, but std::remainder(std::rint(x), 65536.0 is in the
   range [-32767.0, +32768.0], which is outside of the range of signed short.

   The double version of fmod behaves as if implemented as follows

 double fmod(double x, double y)
 {
 #pragma STDC FENV_ACCESS ON
     double result = std::remainder(std::fabs(x), (y = std::fabs(y)));
     if (std::signbit(result)) result += y;
     return std::copysign(result, x);
 }

   The expression x - trunc(x/y)*y may not equal fmod(x,y) when the rounding of x/y to
   initialize the argument of trunc loses too much precision (example: x =
   30.508474576271183309, y = 6.1016949152542370172)

.SH Example

   
// Run this code

 #include <iostream>
 #include <cmath>
 #include <cfenv>
  
 #pragma STDC FENV_ACCESS ON
 int main()
 {
     std::cout << "fmod(+5.1, +3.0) = " << std::fmod(5.1,3) << '\\n'
               << "fmod(-5.1, +3.0) = " << std::fmod(-5.1,3) << '\\n'
               << "fmod(+5.1, -3.0) = " << std::fmod(5.1,-3) << '\\n'
               << "fmod(-5.1, -3.0) = " << std::fmod(-5.1,-3) << '\\n';
  
     // special values
     std::cout << "fmod(+0.0, 1.0) = " << std::fmod(0, 1) << '\\n'
               << "fmod(-0.0, 1.0) = " << std::fmod(-0.0, 1) << '\\n'
               << "fmod(5.1, Inf) = " << std::fmod(5.1, INFINITY) << '\\n';
  
     // error handling
     std::feclearexcept(FE_ALL_EXCEPT);
     std::cout << "fmod(+5.1, 0) = " << std::fmod(5.1, 0) << '\\n';
     if(std::fetestexcept(FE_INVALID))
         std::cout << "    FE_INVALID raised\\n";
 }

.SH Possible output:

 fmod(+5.1, +3.0) = 2.1
 fmod(-5.1, +3.0) = -2.1
 fmod(+5.1, -3.0) = 2.1
 fmod(-5.1, -3.0) = -2.1
 fmod(+0.0, 1.0) = 0
 fmod(-0.0, 1.0) = -0
 fmod(5.1, Inf) = 5.1
 fmod(+5.1, 0) = -nan
     FE_INVALID raised

.SH See also

   div(int)
   ldiv      computes quotient and remainder of integer division
   lldiv     \fI(function)\fP 
   \fI(C++11)\fP
   remainder signed remainder of the division operation
   \fI(C++11)\fP   \fI(function)\fP 
   remquo    signed remainder as well as the three last bits of the division operation
   \fI(C++11)\fP   \fI(function)\fP 
   C documentation for
   fmod
