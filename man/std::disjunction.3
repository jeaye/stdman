.TH std::disjunction 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::disjunction \- std::disjunction

.SH Synopsis
   Defined in header <type_traits>
   template<class... B>            \fB(1)\fP \fI(since C++17)\fP
   struct disjunction;

   Forms the logical disjunction of the type traits B..., effectively performing a
   logical OR on the sequence of traits.

   The specialization std::disjunction<B1, ..., BN> has a public and unambiguous base
   that is

     * if sizeof...(B) == 0, std::false_type; otherwise
     * the first type Bi in B1, ..., BN for which bool(Bi::value) == true, or BN if
       there is no such type.

   The member names of the base class, other than disjunction and operator=, are not
   hidden and are unambiguously available in disjunction.

   Disjunction is short-circuiting: if there is a template type argument Bi with
   bool(Bi::value) != false, then instantiating disjunction<B1, ..., BN>::value does
   not require the instantiation of Bj::value for j > i

.SH Template parameters

   B... - every template argument Bi for which Bi::value is instantiated must be usable
          as a base class and define member value that is convertible to bool

   Helper variable template

   template<class... B>                                             \fI(since C++17)\fP
   inline constexpr bool disjunction_v = disjunction<B...>::value;

.SH Possible implementation

   template<class...> struct disjunction : std::false_type { };
   template<class B1> struct disjunction<B1> : B1 { };
   template<class B1, class... Bn>
   struct disjunction<B1, Bn...>
       : std::conditional_t<bool(B1::value), B1, disjunction<Bn...>>  { };

.SH Notes

   A specialization of disjunction does not necessarily inherit from of either
   std::true_type or std::false_type: it simply inherits from the first B whose
   ::value, explicitly converted to bool, is true, or from the very last B when all of
   them convert to false. For example, std::disjunction<std::integral_constant<int, 2>,
   std::integral_constant<int, 4>>::value is 2.

   The short-circuit instantiation differentiates disjunction from fold expressions: a
   fold expression like (... || Bs::value) instantiates every B in Bs, while
   std::disjunction_v<Bs...> stops instantiation once the value can be determined. This
   is particularly useful if the later type is expensive to instantiate or can cause a
   hard error when instantiated with the wrong type.

.SH Example

   
// Run this code

 #include <type_traits>
 #include <string>
  
 // checking if Foo is constructible from double will cause a hard error
 struct Foo {
     template<class T>
     struct sfinae_unfriendly_check { static_assert(!std::is_same_v<T, double>); };
  
     template<class T>
     Foo(T, sfinae_unfriendly_check<T> = {} );
 };
  
 template<class... Ts>
 struct first_constructible {
     template<class T, class...Args>
     struct is_constructible_x : std::is_constructible<T, Args...> {
         using type = T;
     };
     struct fallback {
         static constexpr bool value = true;
         using type = void; // type to return if nothing is found
     };
  
     template<class... Args>
     using with = typename std::disjunction<is_constructible_x<Ts, Args...>...,
                                            fallback>::type;
 };
  
 // OK, is_constructible<Foo, double> not instantiated
 static_assert(std::is_same_v<first_constructible<std::string, int, Foo>::with<double>,
                              int>);
  
 static_assert(std::is_same_v<first_constructible<std::string, int>::with<>, std::string>);
 static_assert(std::is_same_v<first_constructible<std::string, int>::with<const char*>,
                              std::string>);
 static_assert(std::is_same_v<first_constructible<std::string, int>::with<void*>, void>);
  
 int main() { }

.SH See also

   negation    logical NOT metafunction
   \fI(C++17)\fP     \fI(class template)\fP 
   conjunction variadic logical AND metafunction
   \fI(C++17)\fP     \fI(class template)\fP 
