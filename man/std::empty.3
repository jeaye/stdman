.TH std::empty 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::empty \- std::empty

.SH Synopsis
   Defined in header <iterator>
   template <class C>                                           (since
   constexpr auto empty(const C& c) ->                          C++17)
   decltype(c.empty());                                         (until
                                                                C++20)
   template <class C>                                           (since
   [[nodiscard]] constexpr auto empty(const C& c) ->            C++20)
   decltype(c.empty());
                                                                        (since
   template <class T, std::size_t N>                                    C++17)
   constexpr bool empty(const T (&array)[N]) noexcept;                  (until
                                                        \fB(1)\fP             C++20)
   template <class T, std::size_t N>                                    (since
   [[nodiscard]] constexpr bool empty(const T                           C++20)
   (&array)[N]) noexcept;                                   \fB(2)\fP
   template <class E>                                                           (since
   constexpr bool empty(std::initializer_list<E> il)                            C++17)
   noexcept;                                                                    (until
                                                                \fB(3)\fP             C++20)
   template <class E>                                                           (since
   [[nodiscard]] constexpr bool                                                 C++20)
   empty(std::initializer_list<E> il) noexcept;

   Returns whether the given container is empty.

   1) returns c.empty()
   2) returns false
   3) returns il.size() == 0

.SH Parameters

   c     - a container with an empty method
   array - an array of arbitrary type
   il    - an initializer list

.SH Return value

   true if the container doesn't have any element.

.SH Notes

   In addition to being included in <iterator>, std::empty is guaranteed to become
   available if any of the following headers are included: <array>, <deque>,
   <forward_list>, <list>, <map>, <regex>, <set>, <string>, <unordered_map>,
   <unordered_set>, and <vector>.

.SH Possible implementation

.SH First version
   template <class C>
   constexpr auto empty(const C& c) -> decltype(c.empty())
   {
       return c.empty();
   }
.SH Second version
   template <class T, std::size_t N>
   constexpr bool empty(const T (&array)[N]) noexcept
   {
       return false;
   }
                         Third version
   template <class E>
   constexpr bool empty(std::initializer_list<E> il) noexcept
   {
       return il.size() == 0;
   }

.SH Example

   
// Run this code

 #include <iostream>
 #include <vector>
  
 template <class T>
 void print(const T& container)
 {
     if ( !std::empty(container) )
     {
          std::cout << "Elements:\\n";
          for ( const auto& element : container )
              std::cout << element << '\\n';
     }
     else
     {
         std::cout << "Empty\\n";
     }
 }
  
 int main()
 {
     std::vector<int> c = { 1, 2, 3 };
     print(c);
     c.clear();
     print(c);
  
     int array[] = { 4, 5, 6 };
     print(array);
  
     auto il = { 7, 8, 9 };
     print(il);
 }

.SH Output:

 Elements:
 1
 2
 3
 Empty
 Elements:
 4
 5
 6
 Elements:
 7
 8
 9
