.TH std::complex::complex 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::complex::complex \- std::complex::complex

.SH Synopsis
   primary template complex<T>
   complex( const T& re = T(), const T& im = T() );                 \fB(1)\fP \fI(until C++14)\fP
   constexpr complex( const T& re = T(), const T& im = T() );       \fB(1)\fP \fI(since C++14)\fP
   complex( const complex& other );                                 \fB(2)\fP \fI(until C++14)\fP
   constexpr complex( const complex& other );                       \fB(2)\fP \fI(since C++14)\fP
   template< class X >                                              \fB(3)\fP \fI(until C++14)\fP
   complex( const complex<X>& other);
   template< class X >                                              \fB(3)\fP \fI(since C++14)\fP
   constexpr complex( const complex<X>&  other);
   specialization complex<float>
   complex(float re = 0.0f, float im = 0.0f);                       \fB(1)\fP \fI(until C++11)\fP
   constexpr complex(float re = 0.0f, float im = 0.0f);             \fB(1)\fP \fI(since C++11)\fP
   explicit complex(const complex<double>& other);                  \fB(3)\fP \fI(until C++11)\fP
   explicit complex(const complex<long double>& other);
   explicit constexpr complex(const complex<double>& other);        \fB(3)\fP \fI(since C++11)\fP
   explicit constexpr complex(const complex<long double>& other);
   specialization complex<double>
   complex(double re = 0.0, double im = 0.0);                       \fB(1)\fP \fI(until C++11)\fP
   constexpr complex(double re = 0.0, double im = 0.0);             \fB(1)\fP \fI(since C++11)\fP
   complex(const complex<float>& other);                            \fB(3)\fP \fI(until C++11)\fP
   explicit complex(const complex<long double>& other);
   constexpr complex(const complex<float>& other);                  \fB(3)\fP \fI(since C++11)\fP
   explicit constexpr complex(const complex<long double>& other);
   specialization complex<long double>
   complex(long double re = 0.0L, long double im = 0.0L);           \fB(1)\fP \fI(until C++11)\fP
   constexpr complex(long double re = 0.0L, long double im = 0.0L); \fB(1)\fP \fI(since C++11)\fP
   complex(const complex<float>& other);                            \fB(3)\fP \fI(until C++11)\fP
   complex(const complex<double>& other);
   constexpr complex(const complex<float>& other);                  \fB(3)\fP \fI(since C++11)\fP
   constexpr complex(const complex<double>& other);

   Constructs the std::complex object.

   1) Constructs the complex number from real and imaginary parts.
   2) Copy constructor. Constructs the object with the copy of the contents of other.
   The copy constructor is implicit in the standard specializations.
   3) Converting constructor. Constructs the object from a complex number of a
   different type.

.SH Parameters

   re    - the real part
   im    - the imaginary part
   other - another complex to use as source

.SH See also

   operator=    assigns the contents
                \fI(public member function)\fP 
   operator""if
   operator""i  A std::complex literal representing pure imaginary number
   operator""il \fI(function)\fP 
   \fI(C++14)\fP
   C documentation for
   CMPLX
