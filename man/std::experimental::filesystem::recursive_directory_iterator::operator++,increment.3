.TH std::experimental::filesystem::recursive_directory_iterator::operator++,increment 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::experimental::filesystem::recursive_directory_iterator::operator++,increment \- std::experimental::filesystem::recursive_directory_iterator::operator++,increment

.SH Synopsis
   recursive_directory_iterator& operator++();                 (filesystem TS)
   recursive_directory_iterator& increment( error_code& ec );  (filesystem TS)

   Advances the iterator to the next entry.

   If there are no more entries left in the currently iterated directory, the iteration
   is resumed over the parent directory. The process is repeated if the parent
   directory has no sibling entries that can to be iterated on. If the parent of the
   directory hierarchy that has been recursively iterated on is reached (there are no
   candidate entries at depth() == 0), *this is set to an end iterator.

   Otherwise, if *this refers to a directory, it is iterated into if the following
   conditions are met:

     * disable_recursion_pending() has not been called before this increment, i.e.
       recursion_pending() == true.
     * The directory is not a symlink or following symlinks is enabled, i.e.

           !is_symlink(this->symlink_status()) ||

   (options() & directory_options::follow_directory_symlink) != 0).

.SH Parameters

   ec - error code to store the error status to

.SH Return value

   *this

.SH Exceptions

   1) filesystem_error if an error occurs. The error code is set to an appropriate
   error code for the error that caused the failure.
   2)
   noexcept specification:  
   noexcept
     
.SH Category:

     * unconditionally noexcept

   Hidden categories:

     * Pages with unreviewed unconditional noexcept template
     * Pages with unreviewed noexcept template
