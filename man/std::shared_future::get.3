.TH std::shared_future::get 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::shared_future::get \- std::shared_future::get

.SH Synopsis
   const T& get() const; \fB(1)\fP (member only of generic shared_future template)
                             \fI(since C++11)\fP
   T& get() const;       \fB(2)\fP (member only of shared_future<T&> template specialization)
                             \fI(since C++11)\fP
                             (member only of shared_future<void> template
   void get() const;     \fB(3)\fP specialization)
                             \fI(since C++11)\fP

   The get method waits until the shared_future has a valid result and (depending on
   which template is used) retrieves it. It effectively calls wait() in order to wait
   for the result.

   The generic template and two template specializations each contain a single version
   of get. The three versions of get differ only in the return type.

   The behavior is undefined if valid() is false before the call to this function.

.SH Parameters

   \fI(none)\fP

.SH Return value

   1) Const reference to the value stored in the shared state. Accessing the value
   through this reference is undefined after the shared state has been destroyed.
   2) The reference stored as value in the shared state.
   3) Nothing.

.SH Exceptions

   If an exception was stored in the shared state referenced by the future (e.g. via a
   call to std::promise::set_exception()) then that exception will be thrown.

.SH Notes

   The implementations are encouraged to detect the case when valid() is false before
   the call and throw a std::future_error with an error condition of
   std::future_errc::no_state.

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

   valid checks if the future has a shared state
         \fI(public member function)\fP 

.SH Category:

     * Todo no example
