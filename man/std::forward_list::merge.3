.TH std::forward_list::merge 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::forward_list::merge \- std::forward_list::merge

.SH Synopsis
   void merge( forward_list& other );                \fB(1)\fP \fI(since C++11)\fP
   void merge( forward_list&& other );               \fB(1)\fP \fI(since C++11)\fP
   template <class Compare>                          \fB(2)\fP \fI(since C++11)\fP
   void merge( forward_list& other, Compare comp );
   template <class Compare>                          \fB(2)\fP \fI(since C++11)\fP
   void merge( forward_list&& other, Compare comp );

   Merges two sorted lists into one. The lists should be sorted into ascending order.

   No elements are copied. The container other becomes empty after the operation. The
   function does nothing if this == &other. If get_allocator() !=
   other.get_allocator(), the behavior is undefined. No iterators or references become
   invalidated, except that the iterators of moved elements now refer into *this, not
   into other. The first version uses operator< to compare the elements, the second
   version uses the given comparison function comp.

   This operation is stable: for equivalent elements in the two lists, the elements
   from *this shall always precede the elements from other, and the order of equivalent
   elements of *this and other does not change.

.SH Parameters

   other - another container to merge
           comparison function object (i.e. an object that satisfies the requirements
           of Compare) which returns true if the first argument is less than (i.e. is
           ordered before) the second.

           The signature of the comparison function should be equivalent to the
           following:
   comp  -
            bool cmp(const Type1 &a, const Type2 &b);

           The signature does not need to have const &, but the function object must
           not modify the objects passed to it.
           The types Type1 and Type2 must be such that an object of type
           forward_list<T,Allocator>::const_iterator can be dereferenced and then
           implicitly converted to both of them. 

.SH Return value

   \fI(none)\fP

.SH Exceptions

   If an exception is thrown, this function has no effect \fI(strong exception guarantee)\fP,
   except if the exception comes from the comparison function.

.SH Complexity

   at most std::distance(begin(), end()) + std::distance(other.begin(), other.end()) -
   1 comparisons.

.SH Example

   
// Run this code

 #include <iostream>
 #include <forward_list>
  
 std::ostream& operator<<(std::ostream& ostr, const std::forward_list<int>& list)
 {
     for (auto &i : list) {
         ostr << " " << i;
     }
     return ostr;
 }
  
 int main()
 {
     std::forward_list<int> list1 = { 5,9,0,1,3 };
     std::forward_list<int> list2 = { 8,7,2,6,4 };
  
     list1.sort();
     list2.sort();
     std::cout << "list1:  " << list1 << "\\n";
     std::cout << "list2:  " << list2 << "\\n";
     list1.merge(list2);
     std::cout << "merged: " << list1 << "\\n";
 }

.SH Output:

 list1:   0 1 3 5 9
 list2:   2 4 6 7 8
 merged:  0 1 2 3 4 5 6 7 8 9

.SH See also

   splice_after moves elements from another forward_list
                \fI(public member function)\fP 
