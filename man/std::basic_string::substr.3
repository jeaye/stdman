.TH std::basic_string::substr 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::basic_string::substr \- std::basic_string::substr

.SH Synopsis
   basic_string substr( size_type pos = 0,
                        size_type count = npos ) const;

   Returns a substring [pos, pos+count). If the requested substring extends past the
   end of the string, or if count == npos, the returned substring is [pos, size()).

.SH Parameters

   pos   - position of the first character to include
   count - length of the substring

.SH Return value

   String containing the substring [pos, pos+count).

.SH Exceptions

   std::out_of_range if pos > size()

.SH Complexity

   Linear in count

.SH Notes

   The returned string is constructed as if by basic_string(data()+pos, count), which
   implies that the returned string's allocator will be default-constructed â€” the new
   allocator will not be a copy of this->get_allocator().

.SH Example

   
// Run this code

 #include <string>
 #include <iostream>
  
 int main()
 {
     std::string a = "0123456789abcdefghij";
  
     // count is npos, returns [pos, size())
     std::string sub1 = a.substr(10);
     std::cout << sub1 << '\\n';
  
     // both pos and pos+count are within bounds, returns [pos, pos+count)
     std::string sub2 = a.substr(5, 3);
     std::cout << sub2 << '\\n';
  
     // pos is within bounds, pos+count is not, returns [pos, size())
     std::string sub4 = a.substr(a.size()-3, 50);
     std::cout << sub4 << '\\n';
  
     try {
         // pos is out of bounds, throws
         std::string sub5 = a.substr(a.size()+3, 50);
         std::cout << sub5 << '\\n';
     } catch(const std::out_of_range& e) {
         std::cout << "pos exceeds string size\\n";
     }
 }

.SH Output:

 abcdefghij
 567
 hij
 pos exceeds string size

.SH See also

   copy   copies characters
          \fI(public member function)\fP 
   size   returns the number of characters
   length \fI(public member function)\fP 
   find   find characters in the string
          \fI(public member function)\fP 
