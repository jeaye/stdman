.TH std::strstream::str 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::strstream::str \- std::strstream::str

.SH Synopsis
   char* str();

   Returns the pointer to the beginning of the buffer, after freezing it. Effectively
   calls rdbuf()->str()

.SH Notes

   Before a call to str() that uses the result as a C string, the stream buffer must be
   null-terminated. Regular output such as with stream << 1.2 does not store a null
   terminator, it must be appended explicitly, typically with the manipulator
   std::ends.

   After a call to str(), dynamic streams become frozen. A call to freeze(false) is
   required before exiting the scope in which this strstream object was created.
   otherwise the destructor will leak memory. Also, additional output to a frozen
   stream may be truncated once it reaches the end of the allocated buffer, which may
   leave the buffer not null-terminated.

.SH Parameters

   \fI(none)\fP

.SH Return value

   Pointer to the beginning of the buffer in the associated std::strsteambuf or NULL if
   no buffer is available.

.SH Example

   
// Run this code

 #include <strstream>
 #include <iostream>
  
 int main()
 {
     std::strstream dyn; // dynamically-allocated output buffer
     dyn << "Test: " << 1.23; // not adding std::ends to demonstrate append behavior
     std::cout << "The output stream holds \\"";
     std::cout.write(dyn.str(), dyn.pcount()) << "\\"\\n";
     // the stream is now frozen due to str()
     dyn << " More text" << std::ends;
     std::cout << "The output stream holds \\"";
     std::cout.write(dyn.str(), dyn.pcount()) << "\\"\\n";
     dyn.freeze(false);
 }

.SH Possible output:

 The stream holds "Test: 1.23"
 The stream holds "Test: 1.23 More "

.SH See also

   str marks the buffer frozen and returns the beginning pointer of the input sequence
       \fI(public member function of std::strstreambuf)\fP 
