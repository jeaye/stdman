.TH std::hash<std::unique_ptr> 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::hash<std::unique_ptr> \- std::hash<std::unique_ptr>

.SH Synopsis
   template<class T, class Deleter> struct hash<unique_ptr<T, Deleter>>;  \fI(since C++11)\fP

   The template specialization of std::hash for std::unique_ptr<T, Deleter> allows
   users to obtain hashes of objects of type std::unique_ptr<T, Deleter>.

   The specialization std::hash<std::unique_ptr<T,D>> is enabled (see
   std::hash) if std::hash<typename std::unique_ptr<T,D>::pointer> is     \fI(since C++17)\fP
   enabled, and is disabled otherwise.

   When enabled,
   \fI(since C++17)\fP for a given std::unique_ptr<T, D> p, this specialization ensures that
   std::hash<std::unique_ptr<T, D>>()(p) == std::hash<typename std::unique_ptr<T,
   D>::pointer>()(p.get()).

   The member functions of this specialization are not guaranteed to be noexcept
   because the pointer may be a fancy pointer and its hash might throw.

.SH Example

   
// Run this code

 #include <iostream>
 #include <memory>
 #include <functional>
  
 struct Foo {
     Foo() { std::cout << "Foo...\\n"; }
     ~Foo() { std::cout << "~Foo...\\n\\n"; }
 };
  
 int main()
 {
     Foo* foo = new Foo();
     std::unique_ptr<Foo> up(foo);
  
     std::cout << "hash(up):  " << std::hash<std::unique_ptr<Foo>>()(up) << '\\n';
     std::cout << "hash(foo): " << std::hash<Foo*>()(foo) << '\\n';
 }

.SH Output:

 Foo...
 hash(up):  3686401041
 hash(foo): 3686401041
 ~Foo...

.SH See also

   hash    hash function object
   \fI(C++11)\fP \fI(class template)\fP 
