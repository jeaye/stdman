.TH std::minmax_element 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::minmax_element \- std::minmax_element

.SH Synopsis
   Defined in header <algorithm>
   template< class ForwardIt >

   std::pair<ForwardIt,ForwardIt>                           \fI(since C++11)\fP
                                                            \fI(until C++17)\fP
       minmax_element( ForwardIt first, ForwardIt
   last );
   template< class ForwardIt >

   constexpr std::pair<ForwardIt,ForwardIt>                 \fI(since C++17)\fP

       minmax_element( ForwardIt first, ForwardIt
   last );
   template< class ExecutionPolicy, class ForwardIt
   >

   std::pair<ForwardIt,ForwardIt>                       \fB(2)\fP \fI(since C++17)\fP

       minmax_element( ExecutionPolicy&& policy,
   ForwardIt first, ForwardIt last );               \fB(1)\fP
   template< class ForwardIt, class Compare >

   std::pair<ForwardIt,ForwardIt>                                         \fI(since C++11)\fP
                                                                          \fI(until C++17)\fP
       minmax_element( ForwardIt first, ForwardIt
   last, Compare comp );
   template< class ForwardIt, class Compare >

   constexpr std::pair<ForwardIt,ForwardIt>                               \fI(since C++17)\fP
                                                        \fB(3)\fP
       minmax_element( ForwardIt first, ForwardIt
   last, Compare comp );
   template< class ExecutionPolicy, class
   ForwardIt, class Compare >

   std::pair<ForwardIt,ForwardIt>                           \fB(4)\fP           \fI(since C++17)\fP

       minmax_element( ExecutionPolicy&& policy,
   ForwardIt first, ForwardIt last, Compare comp );

   Finds the smallest and greatest element in the range [first, last).

   1) Elements are compared using operator<.
   3) Elements are compared using the given binary comparison function comp.
   2,4) Same as (1,3), but executed according to policy. These overloads do not
   participate in overload resolution unless
   std::is_execution_policy_v<std::decay_t<ExecutionPolicy>> is true

.SH Parameters

   first, last - forward iterators defining the range to examine
   policy      - the execution policy to use. See execution policy for details.
                 comparison function object (i.e. an object that satisfies the
                 requirements of Compare) which returns true if if *a is less than *b.

                 The signature of the comparison function should be equivalent to the
                 following:

   cmp         -  bool cmp(const Type1 &a, const Type2 &b);

                 The signature does not need to have const &, but the function object
                 must not modify the objects passed to it.
                 The types Type1 and Type2 must be such that an object of type
                 ForwardIt can be dereferenced and then implicitly converted to both of
                 them. 
.SH Type requirements
   -
   ForwardIt must meet the requirements of ForwardIterator.

.SH Return value

   a pair consisting of an iterator to the smallest element as the first element and an
   iterator to the greatest element as the second. Returns std::make_pair(first, first)
   if the range is empty. If several elements are equivalent to the smallest element,
   the iterator to the first such element is returned. If several elements are
   equivalent to the largest element, the iterator to the last such element is
   returned.

.SH Complexity

   At most max(floor(3/2(Nâˆ’1)), 0) applications of the predicate, where N =
   std::distance(first, last).

.SH Exceptions

   The overloads with a template parameter named ExecutionPolicy report errors as
   follows:

     * If execution of a function invoked as part of the algorithm throws an exception
       and ExecutionPolicy is one of the three standard policies, std::terminate is
       called. For any other ExecutionPolicy, the behavior is implementation-defined.
     * If the algorithm fails to allocate memory, std::bad_alloc is thrown.

.SH Notes

   This algorithm is different from std::make_pair(std::min_element(),
   std::max_element()), not only in efficiency, but also in that this algorithm finds
   the last biggest element while std::max_element finds the first biggest element.

.SH Possible implementation

.SH First version
   template<class ForwardIt>
   std::pair<ForwardIt, ForwardIt>
       minmax_element(ForwardIt first, ForwardIt last)
   {
       return std::minmax_element(first, last, std::less<>());
   }
.SH Second version
   template<class ForwardIt, class Compare>
   std::pair<ForwardIt, ForwardIt>
       minmax_element(ForwardIt first, ForwardIt last, Compare comp)
   {
       std::pair<ForwardIt, ForwardIt> result(first, first);
    
       if (first == last) return result;
       if (++first == last) return result;
    
       if (comp(*first, *result.first)) {
           result.first = first;
       } else {
           result.second = first;
       }
       while (++first != last) {
           ForwardIt i = first;
           if (++first == last) {
               if (comp(*i, *result.first)) result.first = i;
               else if (!(comp(*i, *result.second))) result.second = i;
               break;
           } else {
               if (comp(*first, *i)) {
                   if (comp(*first, *result.first)) result.first = first;
                   if (!(comp(*i, *result.second))) result.second = i;
               } else {
                   if (comp(*i, *result.first)) result.first = i;
                   if (!(comp(*first, *result.second))) result.second = first;
               }
           }
       }
       return result;
   }

.SH Example

   
// Run this code

 #include <algorithm>
 #include <iostream>
 #include <vector>
  
 int main()
 {
     std::vector<int> v = { 3, 9, 1, 4, 2, 5, 9 };
  
     auto result = std::minmax_element(v.begin(), v.end());
     std::cout << "min element at: " << (result.first - v.begin()) << '\\n';
     std::cout << "max element at: " << (result.second - v.begin()) << '\\n';
 }

.SH Output:

 min element at: 2
 max element at: 6

.SH See also

   min_element returns the smallest element in a range
               \fI(function template)\fP 
   max_element returns the largest element in a range
               \fI(function template)\fP 
