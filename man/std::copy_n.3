.TH std::copy_n 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::copy_n \- std::copy_n

.SH Synopsis
   Defined in header <algorithm>
   template< class InputIt, class Size, class OutputIt >                  \fI(since C++11)\fP
   OutputIt copy_n( InputIt first, Size count, OutputIt result );         (until C++20)
   template< class InputIt, class Size, class OutputIt >
   constexpr OutputIt copy_n( InputIt first, Size count, OutputIt         (since C++20)
   result );                                                      \fB(1)\fP
   template< class ExecutionPolicy, class ForwardIt1, class Size,
   class ForwardIt2 >                                                 \fB(2)\fP \fI(since C++17)\fP
   ForwardIt2 copy_n( ExecutionPolicy&& policy, ForwardIt1 first,
   Size count, ForwardIt2 result );

   1) Copies exactly count values from the range beginning at first to the range
   beginning at result, if count>0. Does nothing otherwise.
   2) Same as \fB(1)\fP, but executed according to policy. This overload only participates in
   overload resolution if std::is_execution_policy_v<std::decay_t<ExecutionPolicy>> is
   true

.SH Parameters

   first  - the beginning of the range of elements to copy from
   count  - number of the elements to copy
   result - the beginning of the destination range
   policy - the execution policy to use. See execution policy for details.
.SH Type requirements
   -
   InputIt must meet the requirements of InputIterator.
   -
   OutputIt must meet the requirements of OutputIterator.
   -
   ForwardIt1, ForwardIt2 must meet the requirements of ForwardIterator.

.SH Return value

   Iterator in the destination range, pointing past the last element copied if count>0
   or result otherwise.

.SH Complexity

   Exactly count assignments, if count>0.

.SH Exceptions

   The overload with a template parameter named ExecutionPolicy reports errors as
   follows:

     * If execution of a function invoked as part of the algorithm throws an exception
       and ExecutionPolicy is one of the three standard policies, std::terminate is
       called. For any other ExecutionPolicy, the behavior is implementation-defined.
     * If the algorithm fails to allocate memory, std::bad_alloc is thrown.

.SH Possible implementation

   template< class InputIt, class Size, class OutputIt>
   OutputIt copy_n(InputIt first, Size count, OutputIt result)
   {
       if (count > 0) {
           *result++ = *first;
           for (Size i = 1; i < count; ++i) {
               *result++ = *++first;
           }
       }
       return result;
   }

.SH Example

   
// Run this code

 #include <iostream>
 #include <string>
 #include <algorithm>
 #include <iterator>
  
 int main()
 {
     std::string in = "1234567890";
     std::string out;
  
     std::copy_n(in.begin(), 4, std::back_inserter(out));
     std::cout << out << '\\n';
 }

.SH Output:

 1234

.SH See also

   copy    copies a range of elements to a new location
   copy_if \fI(function template)\fP 
   \fI(C++11)\fP
