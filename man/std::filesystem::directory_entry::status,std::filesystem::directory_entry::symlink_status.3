.TH std::filesystem::directory_entry::status,std::filesystem::directory_entry::symlink_status 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::filesystem::directory_entry::status,std::filesystem::directory_entry::symlink_status \- std::filesystem::directory_entry::status,std::filesystem::directory_entry::symlink_status

.SH Synopsis
   std::filesystem::file_status status() const;
   std::filesystem::file_status status( std::error_code& ec ) const   \fB(1)\fP \fI(since C++17)\fP
   noexcept;
   std::filesystem::file_status symlink_status() const;
   std::filesystem::file_status symlink_status( std::error_code& ec ) \fB(2)\fP \fI(since C++17)\fP
   const noexcept;

   1) Returns status of the entry, as if determined by a status call (symlinks are
   followed to their targets)
   2) Returns status of the entry, as if determined by a symlink_status call (symlinks
   are not followed)

.SH Parameters

   ec - out-parameter for error reporting in the non-throwing overload

.SH Return value

   The status of the file referred to by the entry.

.SH Exceptions

   The overload that does not take a std::error_code& parameter throws filesystem_error
   on underlying OS API errors, constructed with p as the first argument and the OS
   error code as the error code argument. The overload taking a std::error_code&
   parameter sets it to the OS API error code if an OS API call fails, and executes
   ec.clear() if no errors occur. Any overload not marked noexcept may throw
   std::bad_alloc if memory allocation fails.

.SH Notes

   Many low-level OS APIs for directory traversal retrieve file attributes along with
   the next directory entry. The constructors and the non-const member functions of
   directory_iterator store these attributes, if any, in the pointed-to directory_entry
   without calling directory_entry::refresh, which makes it possible to examine the
   attributes of the directory entries as they are being iterated over, without making
   additional system calls.

.SH Example

   
// Run this code

 #include <iostream>
 #include <fstream>
 #include <cstdio>
 #include <cstring>
 #include <filesystem>
 #include <unistd.h>
 #include <sys/socket.h>
 #include <sys/un.h>
 #include <sys/stat.h>
  
 namespace fs = std::filesystem;
  
 void demo_status(const fs::path& p, fs::file_status s)
 {
     std::cout << p;
     // alternative: switch(s.type()) { case fs::file_type::regular: ...}
     if(fs::is_regular_file(s)) std::cout << " is a regular file\\n";
     if(fs::is_directory(s)) std::cout << " is a directory\\n";
     if(fs::is_block_file(s)) std::cout << " is a block device\\n";
     if(fs::is_character_file(s)) std::cout << " is a character device\\n";
     if(fs::is_fifo(s)) std::cout << " is a named IPC pipe\\n";
     if(fs::is_socket(s)) std::cout << " is a named IPC socket\\n";
     if(fs::is_symlink(s)) std::cout << " is a symlink\\n";
     if(!fs::exists(s)) std::cout << " does not exist\\n";
 }
 int main()
 {
     // create files of different kinds
     fs::create_directory("sandbox");
     std::ofstream("sandbox/file"); // create regular file
     fs::create_directory("sandbox/dir");
     mkfifo("sandbox/pipe", 0644);
     struct sockaddr_un addr;
     addr.sun_family = AF_UNIX;
     std::strcpy(addr.sun_path, "sandbox/sock");
     int fd = socket(PF_UNIX, SOCK_STREAM, 0);
     bind(fd, (struct sockaddr*)&addr, sizeof addr);
     fs::create_symlink("file", "sandbox/symlink");
  
     // demo different status accessors
     for(auto it = fs::directory_iterator("sandbox"); it != fs::directory_iterator(); ++it)
         demo_status(*it, it->symlink_status()); // use cached status from directory entry
     demo_status("dev/null", fs::status("/dev/null")); // direct calls to status
     demo_status("dev/sda", fs::status("/dev/sda"));
     demo_status("sandbox/no", fs::status("/sandbox/no"));
  
     // cleanup
     close(fd);
     fs::remove_all("sandbox");
 }

.SH Possible output:

 "sandbox/file" is a regular file
 "sandbox/dir" is a directory
 "sandbox/pipe" is a named IPC pipe
 "sandbox/sock" is a named IPC socket
 "sandbox/symlink" is a symlink
 "dev/null" is a character device
 "dev/sda" is a block device
 "sandbox/no" does not exist

.SH See also

   refresh           updates the cached file attributes
                     \fI(public member function)\fP 
                     checks whether directory entry refers to existing file system
   exists            object
                     \fI(public member function)\fP 
   is_block_file     checks whether the directory entry refers to block device
                     \fI(public member function)\fP 
   is_character_file checks whether the directory entry refers to a character device
                     \fI(public member function)\fP 
   is_directory      checks whether the directory entry refers to a directory
                     \fI(public member function)\fP 
   is_fifo           checks whether the directory entry refers to a named pipe
                     \fI(public member function)\fP 
   is_other          checks whether the directory entry refers to an other file
                     \fI(public member function)\fP 
   is_regular_file   checks whether the directory entry refers to a regular file
                     \fI(public member function)\fP 
   is_socket         checks whether the directory entry refers to a named IPC socket
                     \fI(public member function)\fP 
   is_symlink        checks whether the directory entry refers to a symbolic link
                     \fI(public member function)\fP 
   file_size         returns the size of the file to which the directory entry refers
                     \fI(public member function)\fP 
                     returns the number of hard links referring to the file to which
   hard_link_count   the directory entry refers
                     \fI(public member function)\fP 
                     gets or sets the time of the last data modification of the file to
   last_write_time   which the directory entry refers
                     \fI(public member function)\fP 
