.TH std::valarray::operator[] 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::valarray::operator[] \- std::valarray::operator[]

.SH Synopsis
   T                      operator[]( std::size_t pos ) const;            \fI(until C++11)\fP
   const T&               operator[]( std::size_t pos ) const;            \fI(since C++11)\fP
   T&                     operator[]( std::size_t pos );             \fB(2)\fP
   std::valarray<T>       operator[]( std::slice slicearr )          \fB(3)\fP
   const;
   std::slice_array<T>    operator[]( std::slice slicearr );         \fB(4)\fP
   std::valarray<T>       operator[]( const std::gslice&             \fB(5)\fP
   gslicearr ) const;
   std::gslice_array<T>   operator[]( const std::gslice&         \fB(1)\fP \fB(6)\fP
   gslicearr );
   std::valarray<T>       operator[]( const valarray<bool>&          \fB(7)\fP
   boolarr ) const;
   std::mask_array<T>     operator[]( const valarray<bool>&          \fB(8)\fP
   boolarr );
   std::valarray<T>       operator[]( const                          \fB(9)\fP
   valarray<std::size_t>& indarr ) const;
   std::indirect_array<T> operator[]( const                          \fB(10)\fP
   valarray<std::size_t>& indarr );

   Retrieve single elements or portions of the array.

   The const overloads that return element sequences create a new std::valarray object.
   The non-const overloads return classes holding references to the array elements.

.SH Parameters

    This section is incomplete
    Reason: Explain the parameters

.SH Return value

   1,2) A reference to the corresponding element
   3,5,7,9) A std::valarray object containing copies of the selected items
   4,6,8,10) The corresponding data structure containing references to the selected
   items

.SH Exceptions

   \fI(none)\fP

.SH Precondition

   The selected elements must exist.

.SH Notes

     * For proper values of i and j, the following properties are true:

   1) (a[i] = q, a[i]) == q

           For a non-const a.

   2) &a[i+j] == &a[i] + j

           This means that valarray elements are adjacent in memory.

   3) &a[i] != &b[j]

           This holds for every objects a and b that are not aliases of one another.
           This means that there are no aliases in the elements and this property can
           be used to perform some kinds of optimization.

     * References become invalid on resize or when the array is destructed.

   For overloads (3,5,7,9), The function can be implemented with the return type
   different from std::valarray. In this case, the replacement type has the following
   properties:

              * All const member functions of std::valarray are provided.
              * std::valarray, std::slice_array, std::gslice_array, std::mask_array and
                std::indirect_array can be constructed from the replacement type.
              * All functions accepting an argument of type const std::valarray&
                except begin() and end()
                \fI(since C++11)\fP should also accept the replacement type.
              * All functions accepting two arguments of type const std::valarray&
                should accept every combination of const std::valarray& and the
                replacement type.
              * The return type does not add more than two levels of template nesting
                over the most deeply-nested argument type.

.SH Notes

   Slice/mask/indirect index accesses do not chain: v[v==n][std::slice(0,5,2] = x; is
   an error because std::mask_array (the type of v[v==n]) does not have operator[].

.SH Example

   
// Run this code

 #include <iostream>
 #include <valarray>
  
 int main()
 {
     std::valarray<int> data = {0,1,2,3,4,5,6,7,8,9};
  
     std::cout << "Initial valarray: ";
     for(int n: data) std::cout << n << ' ';
     std::cout << '\\n';
  
     data[data > 5] = -1; // valarray<bool> overload of operator[]
     // the type of data>5 is std::valarray<bool>
     // the type of data[data>5] is std::mask_array<int>
  
     std::cout << "After v[v>5]=-1:  ";
     for(std::size_t n = 0; n < data.size(); ++n)
       std::cout << data[n] << ' ';  // regular operator[]
     std::cout << '\\n';
 }

.SH Output:

 Initial valarray: 0 1 2 3 4 5 6 7 8 9
 After v[v>5]=-1:  0 1 2 3 4 5 -1 -1 -1 -1

.SH Category:

     * Todo with reason

   Hidden category:

     * Pages with unreviewed LWG DR marker
