.TH std::auto_ptr::auto_ptr 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::auto_ptr::auto_ptr \- std::auto_ptr::auto_ptr

.SH Synopsis
   explicit auto_ptr( X* p = 0 ); \fB(1)\fP \fB(deprecated)\fP
   auto_ptr( auto_ptr& r );       \fB(2)\fP \fB(deprecated)\fP
   template< class Y >            \fB(3)\fP \fB(deprecated)\fP
   auto_ptr( auto_ptr<Y>& r );
   template< class Y >            \fB(4)\fP \fB(deprecated)\fP
   auto_ptr( auto_ptr_ref<Y> m );

   Constructs the auto_ptr from a pointer that refers to the object to manage.

   1) Constructs the auto_ptr with pointer p.
   2) Constructs the auto_ptr with the pointer held in r. r.release() is called to
   acquire the ownership of the object.
   3) Same as \fB(2)\fP. Y* must be implicitly convertible to T*.
   4) Constructs the auto_ptr with the pointer held in the auto_ptr instance referred
   to by m. p.release() is called for the auto_ptr p that m holds to acquire the
   ownership of the object.
   auto_ptr_ref is an implementation-defined type that holds a reference to auto_ptr.
   std::auto_ptr is implicitly convertible to and assignable from this type. The
   implementation is allowed to provide the template with a different name or implement
   equivalent functionality in other ways.

.SH Parameters

   p - a pointer to an object to manage
   r - another auto_ptr to transfer the ownership of the object from
   m - an implementation-defined type that holds a reference to auto_ptr

.SH Exceptions

   \fI(none)\fP

.SH Notes

   The constructor and the copy assignment operator from auto_ptr_ref is provided to
   allow copy-constructing and assigning std::auto_ptr from nameless temporaries. Since
   its copy constructor and copy assignment operator take the argument as non-const
   reference, they cannot bind rvalue arguments directly. However, a user-defined
   conversion can be executed (which releases the original auto_ptr), followed by a
   call to the constructor or copy-assignment operator that take auto_ptr_ref by value.
   This is an early implementation of move semantics.
