.TH std::basic_string::replace 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::basic_string::replace \- std::basic_string::replace

.SH Synopsis
   basic_string& replace( size_type pos, size_type count,        \fB(1)\fP
                          const basic_string& str );
   basic_string& replace( const_iterator first, const_iterator
   last,                                                         \fB(1)\fP
                          const basic_string& str );
   basic_string& replace( size_type pos, size_type count,

                          const basic_string& str,                        \fI(until C++14)\fP

                          size_type pos2, size_type count2 );
   basic_string& replace( size_type pos, size_type count,

                          const basic_string& str,                        \fI(since C++14)\fP

                          size_type pos2, size_type count2 =
   npos );
   template< class InputIt >

   basic_string& replace( const_iterator first, const_iterator       \fB(3)\fP
   last,

                          InputIt first2, InputIt last2 );
   basic_string& replace( size_type pos, size_type count,            \fB(4)\fP
                          const CharT* cstr, size_type count2 );
   basic_string& replace( const_iterator first, const_iterator
   last,                                                             \fB(4)\fP
                          const CharT* cstr, size_type count2 );
   basic_string& replace( size_type pos, size_type count,            \fB(5)\fP
                          const CharT* cstr );
   basic_string& replace( const_iterator first, const_iterator   \fB(2)\fP
   last,                                                             \fB(5)\fP
                          const CharT* cstr );
   basic_string& replace( size_type pos, size_type count,            \fB(6)\fP
                          size_type count2, CharT ch );
   basic_string& replace( const_iterator first, const_iterator
   last,                                                             \fB(6)\fP
                          size_type count2, CharT ch );
   basic_string& replace( const_iterator first, const_iterator
   last,                                                             \fB(7)\fP  \fI(since C++11)\fP
                          std::initializer_list<CharT> ilist );
   basic_string& replace( size_type pos, size_type count,
                          std::basic_string_view<CharT, Traits>      \fB(8)\fP  \fI(since C++17)\fP
   sv );
   basic_string& replace( const_iterator first, const_iterator
   last,                                                             \fB(9)\fP  \fI(since C++17)\fP
                          std::basic_string_view<CharT, Traits>
   sv );
   template < class T >

   basic_string& replace( size_type pos, size_type count, const
   T& t,                                                             \fB(10)\fP \fI(since C++17)\fP

                          size_type pos2, size_type count2 =
   npos );

   Replaces the part of the string indicated by either [pos, pos + count) or [first,
   last) with a new string.

   The new string can be one of:

   1) string str;
   2) substring [pos2, pos2 + count2) of str, except if count2==npos or if would extend
   past str.size(), [pos2, str.size()) is used.
   3) characters in the range [first2, last2). This overload has the same effect as
   overload \fB(6)\fP if InputIt is an integral type.
   4) first count2 characters of the character string pointed to by cstr;
   5) null-terminated character string pointed to by cstr;
   6) count2 copies of character ch;
   7) characters in the initializer list ilist;
   8) characters in the string view sv (equivalent to replace(pos, count, sv.data(),
   sv.size()))
   9) characters in the string view sv (equivalent to replace(first - begin(), last -
   first, sv))
   10) subview [pos2, pos2 + count2) of a string view sv, converted from t as if by
   std::basic_string_view<CharT, Traits> sv = t;, except if count2==npos or if it would
   extend past sv.size(), [pos2, sv.size()) is used. This overload only participates in
   overload resolution if std::is_convertible_v<const T&, std::basic_string_view<CharT,
   Traits>> is true and std::is_convertible_v<const T&, const CharT*> is false.

.SH Parameters

   pos           - start of the substring that is going to be replaced
   count         - length of the substring that is going to be replaced
   first, last   - range of characters that is going to be replaced
   str           - string to use for replacement
   pos2          - start of the substring to replace with
   count2        - number of characters to replace with
   cstr          - pointer to the character string to use for replacement
   ch            - character value to use for replacement
   first2, last2 - range of characters to use for replacement
   ilist         - initializer list with the characters to use for replacement
   sv            - std::basic_string_view with the characters to use for replacement
   t             - object (convertible to std::basic_string_view) with the characters
                   to use for replacement

.SH Return value

   *this

.SH Exceptions

   std::out_of_range if pos > length() or pos2 > str.length()

   std::length_error if the resulting string will exceed maximum possible string length
   (std::string::npos - 1)

   In any case, if an exception is thrown for any reason, this function has no effect
   \fI(strong exception guarantee)\fP.
   \fI(since C++11)\fP

.SH Example

   
// Run this code

 #include <iostream>
 #include <string>
  
 int main()
 {
     std::string str("The quick brown fox jumps over the lazy dog.");
  
     str.replace(10, 5, "red"); // (5)
  
     str.replace(str.begin(), str.begin() + 3, 1, 'A'); // (6)
  
     std::cout << str << '\\n';
 }

.SH Output:

 A quick red fox jumps over the lazy dog.
