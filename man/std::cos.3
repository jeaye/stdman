.TH std::cos 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::cos \- std::cos

.SH Synopsis
   Defined in header <cmath>
   float       cos( float arg );       \fB(1)\fP
   double      cos( double arg );      \fB(2)\fP
   long double cos( long double arg ); \fB(3)\fP
   double      cos( Integral arg );    \fB(4)\fP \fI(since C++11)\fP

   Computes the cosine of arg (measured in radians).

   4) A set of overloads or a function template accepting an argument of any integral
   type. Equivalent to 2) (the argument is cast to double).

.SH Parameters

   arg - value representing angle in radians, of a floating-point or Integral type

.SH Return value

   If no errors occur, the cosine of arg (cos(arg)) in the range [-1 ; +1], is
   returned.

   The result may have little or no significance if the magnitude of arg  \fI(until C++11)\fP
   is large

   If a domain error occurs, an implementation-defined value is returned (NaN where
   supported)

   If a range error occurs due to underflow, the correct result (after rounding) is
   returned.

.SH Error handling

   Errors are reported as specified in math_errhandling

   If the implementation supports IEEE floating-point arithmetic (IEC 60559),

     * if the argument is ±0, the result is 1.0
     * if the argument is ±∞, NaN is returned and FE_INVALID is raised
     * if the argument is NaN, NaN is returned

.SH Notes

   The case where the argument is infinite is not specified to be a domain error in C,
   but it is defined as a domain error in POSIX

.SH Example

   
// Run this code

 #include <iostream>
 #include <cmath>
 #include <cerrno>
 #include <cfenv>
  
 #pragma STDC FENV_ACCESS ON
 const double pi = std::acos(-1);
 int main()
 {
     // typical usage
     std::cout << "cos(pi/3) = " << std::cos(pi/3) << '\\n'
               << "cos(pi/2) = " << std::cos(pi/2) << '\\n'
               << "cos(-3*pi/4) = " << std::cos(-3*pi/4) << '\\n';
     // special values
     std::cout << "cos(+0) = " << std::cos(0.0) << '\\n'
               << "cos(-0) = " << std::cos(-0.0) << '\\n';
     // error handling
     std::feclearexcept(FE_ALL_EXCEPT);
     std::cout << "cos(INFINITY) = " << std::cos(INFINITY) << '\\n';
     if(std::fetestexcept(FE_INVALID)) std::cout << "    FE_INVALID raised\\n";
 }

.SH Possible output:

 cos(pi/3) = 0.5
 cos(pi/2) = 6.12323e-17
 cos(-3*pi/4) = -0.707107
 cos(+0) = 1
 cos(-0) = 1
 cos(INFINITY) = -nan
     FE_INVALID raised

.SH See also

   sin                computes sine (sin(x))
                      \fI(function)\fP 
   tan                computes tangent (tan(x))
                      \fI(function)\fP 
   acos               computes arc cosine (arccos(x))
                      \fI(function)\fP 
   cos(std::complex)  computes cosine of a complex number (cos(z))
                      \fI(function template)\fP 
   cos(std::valarray) applies the function std::cos to each element of valarray
                      \fI(function template)\fP 
   C documentation for
   cos
