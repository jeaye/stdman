.TH std::tuple_element<std::pair> 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::tuple_element<std::pair> \- std::tuple_element<std::pair>

.SH Synopsis
   Defined in header <utility>
   template< class T1, class T2 >              \fB(1)\fP \fI(since C++11)\fP
   struct tuple_element<0, std::pair<T1,T2> >;
   template< class T1, class T2 >              \fB(2)\fP \fI(since C++11)\fP
   struct tuple_element<1, std::pair<T1,T2> >;

   The partial specializations of std::tuple_element for pairs provide compile-time
   access to the types of the pair's elements, using tuple-like syntax.

.SH Member types

.SH First version
   Member type Definition
   type        T1
.SH Second version
   Member type Definition
   type        T2

.SH Possible implementation

   template<std::size_t I, typename T>
     struct tuple_element;
    
   template<typename T1, typename T2>
     struct tuple_element<0, std::pair<T1,T2> >
     {
        using type = T1;
     };
    
   template<typename T1, typename T2>
     struct tuple_element<1, std::pair<T1,T2> >
     {
        using type = T2;
     };

.SH Example

   
// Run this code

 #include <tuple>
 #include <iostream>
 #include <string>
  
 template <int N, typename T, typename U>
 static auto constexpr get(std::pair<T, U> const& pair)
     -> typename std::tuple_element<N, decltype(pair)>::type
 {
     return N == 0 ? pair.first : pair.second;
 }
  
 int main()
 {
     auto var = std::make_pair(1, std::string{"one"});
  
     std::cout << get<0>(var) << " = " << get<1>(var);
 }

.SH Output:

 1 = one

.SH See also

   tuple_element                  obtains the type of the specified element
                                  \fI(class template specialization)\fP 
   std::tuple_element<std::array> obtains the type of the elements of array
                                  \fI(class template specialization)\fP 
   std::tuple_size<std::pair>     obtains the size of a pair
   \fI(C++11)\fP                        \fI(class template specialization)\fP 
