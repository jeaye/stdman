.TH std::error_condition 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::error_condition \- std::error_condition

.SH Synopsis
   Defined in header <system_error>
   class error_condition;            \fI(since C++11)\fP

   std::error_condition is a platform-independent error code. Like std::error_code, it
   is uniquely identified by an integer value and a std::error_category, but unlike
   std::error_code, the value is not platform-dependent.

   A typical implementation holds one integer data member (the value) and a pointer to
   an std::error_category.

.SH Member functions

   constructor   constructs an error_condition
                 \fI(public member function)\fP 
   operator=     replaces the contents
                 \fI(public member function)\fP 
   assign        replaces the contents
                 \fI(public member function)\fP 
   clear         sets the error_condition to value 0 in generic_category
                 \fI(public member function)\fP 
   value         obtains the value of the error_condition
                 \fI(public member function)\fP 
   category      obtains the error_category for this error_condition
                 \fI(public member function)\fP 
   message       obtains the explanatory string
                 \fI(public member function)\fP 
   operator bool checks if the value is non-zero
                 \fI(public member function)\fP 

.SH Non-member functions

   operator== compares error_conditions and error_codes
   operator!= \fI(function)\fP 
   operator<

.SH Helper classes

   is_error_condition_enum         identifies an enumeration as an std::error_condition
   \fI(C++11)\fP                         \fI(class template)\fP 
   std::hash<std::error_condition> hash support for std::error_condition
   \fI(C++17)\fP                         \fI(class template specialization)\fP 

.SH See also

   error_code     holds a platform-dependent error code
   \fI(C++11)\fP        \fI(class)\fP 
   error_category base class for error categories
   \fI(C++11)\fP        \fI(class)\fP 
