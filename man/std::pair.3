.TH std::pair 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::pair \- std::pair

.SH Synopsis
   Defined in header <utility>
   template<

       class T1,
       class T2

   > struct pair;

   std::pair is a struct template that provides a way to store two heterogeneous
   objects as a single unit. A pair is a specific case of a std::tuple with two
   elements.

   If std::is_trivially_destructible_v<T1> &&
   std::is_trivially_destructible_v<T2> is true, the destructor of pair   \fI(since C++17)\fP
   is trivial.

.SH Template parameters

   T1, T2 - the types of the elements that the pair stores.

.SH Member types

   Member type Definition
   first_type  T1
   second_type T2

.SH Member objects

   Member name Type
   first       T1
   second      T2

.SH Member functions

   constructor   constructs new pair
                 \fI(public member function)\fP
   operator=     assigns the contents
                 \fI(public member function)\fP
   swap          swaps the contents
   \fI(C++11)\fP       \fI(public member function)\fP

.SH Non-member functions

   make_pair            creates a pair object of type, defined by the argument types
                        \fI(function template)\fP 
   operator==
   operator!=
   operator<            lexicographically compares the values in the pair
   operator<=           \fI(function template)\fP 
   operator>
   operator>=
   std::swap(std::pair) specializes the std::swap algorithm
   \fI(C++11)\fP              \fI(function template)\fP 
   std::get(std::pair)  accesses an element of a pair
   \fI(C++11)\fP              \fI(function template)\fP 

.SH Helper classes

   std::tuple_size<std::pair>    obtains the size of a pair
   \fI(C++11)\fP                       \fI(class template specialization)\fP 
   std::tuple_element<std::pair> obtains the type of the elements of pair
   \fI(C++11)\fP                       \fI(class template specialization)\fP 

   Deduction guides\fI(since C++17)\fP

.SH See also

   tuple   implements fixed size container, which holds elements of possibly different
   \fI(C++11)\fP types
           \fI(class template)\fP 
           creates a tuple of lvalue references or unpacks a tuple into individual
   tie     objects
           \fI(function template)\fP 
