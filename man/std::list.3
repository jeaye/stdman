.TH std::list 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::list \- std::list

.SH Synopsis
   Defined in header <list>
   template<

       class T,                                                       \fB(1)\fP
       class Allocator = std::allocator<T>

   > class list;
   namespace pmr {

       template <class T>                                             \fB(2)\fP \fI(since C++17)\fP
       using list = std::list<T, std::pmr::polymorphic_allocator<T>>;

   }

   std::list is a container that supports constant time insertion and removal of
   elements from anywhere in the container. Fast random access is not supported. It is
   usually implemented as a doubly-linked list. Compared to std::forward_list this
   container provides bidirectional iteration capability while being less space
   efficient.

   Addition, removal and moving the elements within the list or across several lists
   does not invalidate the iterators or references. An iterator is invalidated only
   when the corresponding element is deleted.

   std::list meets the requirements of Container, AllocatorAwareContainer,
   SequenceContainer and ReversibleContainer.

.SH Template parameters

               The type of the elements.

               T must meet the requirements of CopyAssignable and         \fI(until C++11)\fP
               CopyConstructible.
               The requirements that are imposed on the elements depend
               on the actual operations performed on the container.       \fI(since C++11)\fP
               Generally, it is required that element type is a complete  \fI(until C++17)\fP
               type and meets the requirements of Erasable, but many
               member functions impose stricter requirements.
   T         - The requirements that are imposed on the elements depend
               on the actual operations performed on the container.
               Generally, it is required that element type meets the
               requirements of Erasable, but many member functions impose \fI(since C++17)\fP
               stricter requirements. This container (but not its
               members) can be instantiated with an incomplete element
               type if the allocator satisfies the allocator completeness
               requirements.

               
               An allocator that is used to acquire/release memory and to
   Allocator - construct/destroy the elements in that memory. The type must meet the
               requirements of Allocator. The behavior is undefined if
               Allocator::value_type is not the same as T. 

.SH Member types

   Member type            Definition
   value_type             T 
   allocator_type         Allocator 
   size_type              Unsigned integer type (usually std::size_t) 
   difference_type        Signed integer type (usually std::ptrdiff_t) 
                          Allocator::reference \fI(until C++11)\fP
   reference              value_type&          \fI(since C++11)\fP

                          
                          Allocator::const_reference \fI(until C++11)\fP
   const_reference        const value_type&          \fI(since C++11)\fP

                          
                          Allocator::pointer                        \fI(until C++11)\fP
   pointer                std::allocator_traits<Allocator>::pointer \fI(since C++11)\fP

                          
                          Allocator::const_pointer                        \fI(until C++11)\fP
   const_pointer          std::allocator_traits<Allocator>::const_pointer \fI(since C++11)\fP

                          
   iterator               BidirectionalIterator 
   const_iterator         Constant BidirectionalIterator 
   reverse_iterator       std::reverse_iterator<iterator> 
   const_reverse_iterator std::reverse_iterator<const_iterator> 

.SH Member functions

   constructor   constructs the list
                 \fI(public member function)\fP 
   destructor    destructs the list
                 \fI(public member function)\fP 
   operator=     assigns values to the container
                 \fI(public member function)\fP 
   assign        assigns values to the container
                 \fI(public member function)\fP 
   get_allocator returns the associated allocator
                 \fI(public member function)\fP 
.SH Element access
   front         access the first element
                 \fI(public member function)\fP 
   back          access the last element
                 \fI(public member function)\fP 
.SH Iterators
   begin         returns an iterator to the beginning
   cbegin        \fI(public member function)\fP 
   end           returns an iterator to the end
   cend          \fI(public member function)\fP 
   rbegin        returns a reverse iterator to the beginning
   crbegin       \fI(public member function)\fP 
   rend          returns a reverse iterator to the end
   crend         \fI(public member function)\fP 
.SH Capacity
   empty         checks whether the container is empty
                 \fI(public member function)\fP 
   size          returns the number of elements
                 \fI(public member function)\fP 
   max_size      returns the maximum possible number of elements
                 \fI(public member function)\fP 
.SH Modifiers
   clear         clears the contents
                 \fI(public member function)\fP 
   insert        inserts elements
                 \fI(public member function)\fP 
   emplace       constructs element in-place
   \fI(C++11)\fP       \fI(public member function)\fP 
   erase         erases elements
                 \fI(public member function)\fP 
   push_back     adds an element to the end
                 \fI(public member function)\fP 
   emplace_back  constructs an element in-place at the end
   \fI(C++11)\fP       \fI(public member function)\fP 
   pop_back      removes the last element
                 \fI(public member function)\fP 
   push_front    inserts an element to the beginning
                 \fI(public member function)\fP 
   emplace_front constructs an element in-place at the beginning
   \fI(C++11)\fP       \fI(public member function)\fP 
   pop_front     removes the first element
                 \fI(public member function)\fP 
   resize        changes the number of elements stored
                 \fI(public member function)\fP 
   swap          swaps the contents
                 \fI(public member function)\fP 
.SH Operations
   merge         merges two sorted lists
                 \fI(public member function)\fP 
   splice        moves elements from another list
                 \fI(public member function)\fP 
   remove        removes elements satisfying specific criteria
   remove_if     \fI(public member function)\fP 
   reverse       reverses the order of the elements
                 \fI(public member function)\fP 
   unique        removes consecutive duplicate elements
                 \fI(public member function)\fP 
   sort          sorts the elements
                 \fI(public member function)\fP 

.SH Non-member functions

   operator==
   operator!=
   operator<            lexicographically compares the values in the list
   operator<=           \fI(function template)\fP 
   operator>
   operator>=
   std::swap(std::list) specializes the std::swap algorithm
                        \fI(function template)\fP 

   Deduction guides\fI(since C++17)\fP

.SH Example

   
// Run this code

 #include <algorithm>
 #include <iostream>
 #include <list>
  
 int main()
 {
     // Create a list containing integers
     std::list<int> l = { 7, 5, 16, 8 };
  
     // Add an integer to the front of the list
     l.push_front(25);
     // Add an integer to the back of the list
     l.push_back(13);
  
     // Insert an integer before 16 by searching
     auto it = std::find(l.begin(), l.end(), 16);
     if (it != l.end()) {
         l.insert(it, 42);
     }
  
     // Iterate and print values of the list
     for (int n : l) {
         std::cout << n << '\\n';
     }
 }

.SH Output:

 25
 7
 5
 42
 16
 8
 13
