.TH std::ratio_divide 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::ratio_divide \- std::ratio_divide

.SH Synopsis
   Defined in header <ratio>
   template< class R1, class R2 >
   using ratio_divide = /* see below */;

   The alias template std::ratio_divide denotes the result of dividing two exact
   rational fractions represented by the std::ratio specializations R1 and R2.

   The result is a std::ratio specialization std::ratio<U, V>, such that given Num ==
   R1::num * R2::den and Denom == R1::den * R2::num (computed without arithmetic
   overflow), U is std::ratio<Num, Denom>::num and V is std::ratio<Num, Denom>::den.

.SH Notes

   If U or V is not representable in std::intmax_t, the program is ill-formed. If Num
   or Denom is not representable in std::intmax_t, the program is ill-formed unless the
   implementation yields correct values for U and V.

   The above definition requires that the result of std::ratio_divide<R1, R2> be
   already reduced to lowest terms; for example, std::ratio_divide<std::ratio<1, 12>,
   std::ratio<1, 6>> is the same type as std::ratio<1, 2>.

.SH Example

   
// Run this code

 #include <iostream>
 #include <ratio>
  
 int main()
 {
     typedef std::ratio<2, 3> two_third;
     typedef std::ratio<1, 6> one_sixth;
     typedef std::ratio_divide<two_third, one_sixth> r;
     std::cout << "2/3 / 1/6 = " << r::num << '/' << r::den << '\\n';
 }

.SH Output:

 2/3 / 1/6 = 4/1
