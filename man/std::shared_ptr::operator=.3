.TH std::shared_ptr::operator= 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::shared_ptr::operator= \- std::shared_ptr::operator=

.SH Synopsis
   shared_ptr& operator=( const shared_ptr& r ) noexcept;    \fB(1)\fP
   template< class Y >                                       \fB(1)\fP
   shared_ptr& operator=( const shared_ptr<Y>& r ) noexcept;
   shared_ptr& operator=( shared_ptr&& r ) noexcept;         \fB(2)\fP
   template< class Y >                                       \fB(2)\fP
   shared_ptr& operator=( shared_ptr<Y>&& r ) noexcept;
   template< class Y >                                       \fB(3)\fP (deprecated in C++11)
   shared_ptr& operator=( std::auto_ptr<Y>&& r );                (removed in C++17)
   template< class Y, class Deleter >                        \fB(4)\fP
   shared_ptr& operator=( std::unique_ptr<Y,Deleter>&& r );

   Replaces the managed object with the one managed by r.

   If *this already owns an object and it is the last shared_ptr owning it, and r is
   not the same as *this, the object is destroyed through the owned deleter.

   1) Shares ownership of the object managed by r. If r manages no object, *this
   manages no object too. Equivalent to shared_ptr<T>(r).swap(*this).

   2) Move-assigns a shared_ptr from r. After the assignment, *this contains a copy of
   the previous state of r, r is empty. Equivalent to
   shared_ptr<T>(std::move(r)).swap(*this).

   3) Transfers the ownership of the object managed by r to *this. If r manages no
   object, *this manages no object too. After the assignment, *this contains the
   pointer previously held by r, and use_count()==1; also r is empty. Equivalent to
   shared_ptr<T>(r).swap(*this).

   4) Transfers the ownership of the object managed by r to *this. The deleter
   associated to r is stored for future deletion of the managed object. r manages no
   object after the call. Equivalent to shared_ptr<T>(std::move(r)).swap(*this).

.SH Parameters

   r - another smart pointer to share the ownership to or acquire the ownership from

.SH Return value

   *this

.SH Notes

   The implementation may meet the requirements without creating a temporary shared_ptr
   object.

.SH Exceptions

   3) \fI(none)\fP

   4) may throw exception

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

   reset replaces the managed object
         \fI(public member function)\fP 

.SH Category:

     * Todo no example
