.TH std::remove_cv,std::remove_const,std::remove_volatile 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::remove_cv,std::remove_const,std::remove_volatile \- std::remove_cv,std::remove_const,std::remove_volatile

.SH Synopsis
   Defined in header <type_traits>
   template< class T >             \fB(1)\fP \fI(since C++11)\fP
   struct remove_cv;
   template< class T >             \fB(2)\fP \fI(since C++11)\fP
   struct remove_const;
   template< class T >             \fB(3)\fP \fI(since C++11)\fP
   struct remove_volatile;

   Provides the member typedef type which is the same as T, except that its topmost
   cv-qualifiers are removed.

   1) removes the topmost const, the topmost volatile, or both, if present.

   2) removes the topmost const

   3) removes the topmost volatile

.SH Member types

   Name Definition
   type the type T without cv-qualifier

.SH Helper types

   template< class T >                                           \fI(since C++14)\fP
   using remove_cv_t       = typename remove_cv<T>::type;
   template< class T >                                           \fI(since C++14)\fP
   using remove_const_t    = typename remove_const<T>::type;
   template< class T >                                           \fI(since C++14)\fP
   using remove_volatile_t = typename remove_volatile<T>::type;

.SH Possible implementation

template< class T >
struct remove_cv {
    typedef typename std::remove_volatile<typename std::remove_const<T>::type>::type type;
};
 
template< class T > struct remove_const          { typedef T type; };
template< class T > struct remove_const<const T> { typedef T type; };
 
template< class T > struct remove_volatile             { typedef T type; };
template< class T > struct remove_volatile<volatile T> { typedef T type; };

.SH Example

   Removing const/volatile from const volatile int * does not modify the type, because
   the pointer itself is neither const nor volatile.

   
// Run this code

 #include <iostream>
 #include <type_traits>
  
 int main() {
     typedef std::remove_cv<const int>::type type1;
     typedef std::remove_cv<volatile int>::type type2;
     typedef std::remove_cv<const volatile int>::type type3;
     typedef std::remove_cv<const volatile int*>::type type4;
     typedef std::remove_cv<int * const volatile>::type type5;
  
     std::cout << "test1 " << (std::is_same<int, type1>::value
         ? "passed" : "failed") << '\\n';
     std::cout << "test2 " << (std::is_same<int, type2>::value
         ? "passed" : "failed") << '\\n';
     std::cout << "test3 " << (std::is_same<int, type3>::value
         ? "passed" : "failed") << '\\n';
     std::cout << "test4 " << (std::is_same<const volatile int*, type4>::value
         ? "passed" : "failed") << '\\n';
     std::cout << "test5 " << (std::is_same<int*, type5>::value
         ? "passed" : "failed") << '\\n';
 }

.SH Output:

 test1 passed
 test2 passed
 test3 passed
 test4 passed
 test5 passed

.SH See also

   is_const     checks if a type is const-qualified
   \fI(C++11)\fP      \fI(class template)\fP 
   is_volatile  checks if a type is volatile-qualified
   \fI(C++11)\fP      \fI(class template)\fP 
   add_cv
   add_const
   add_volatile adds const or/and volatile specifiers to the given type
   \fI(C++11)\fP      \fI(class template)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   remove_cvref combines std::remove_cv and std::remove_reference
   (C++20)      \fI(class template)\fP 
