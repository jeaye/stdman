.TH std::tuple_element<std::array> 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::tuple_element<std::array> \- std::tuple_element<std::array>

.SH Synopsis
   Defined in header <array>
   template< std::size_t I, class T, std::size_t N >  \fI(since C++11)\fP
   struct tuple_element<I, array<T, N> >;

   Provides compile-time indexed access to the type of the elements of the array using
   tuple-like interface

.SH Member types

   Member type Definition
   type        the type of elements of the array

.SH Possible implementation

   template<std::size_t I, class T>
     struct tuple_element;
    
   template<std::size_t I, class T, std::size_t N>
     struct tuple_element<I, std::array<T,N> >
     {
        using type = T;
     };

.SH Example

   
// Run this code

 #include <array>
 #include <iostream>
 #include <tuple>
 #include <type_traits>
  
 int main()
 {
    // define compile time constant array and get the type of the element at position 0
    std::array<int, 10> data {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
    using T = std::tuple_element<0, decltype(data)>::type; // int
  
    std::cout << std::boolalpha;
    std::cout << std::is_same<T, int>::value << '\\n';
  
    const auto const_data = data;
    using CT = std::tuple_element<0, decltype(const_data)>::type; // const int
  
    // the result of tuple_element depends on the cv-qualification of the tuple-like type
    std::cout << std::is_same<T, CT>::value << '\\n';
    std::cout << std::is_same<CT, const int>::value << '\\n';
 }

.SH Output:

 true
 false
 true

.SH See also

   tuple_element                 obtains the type of the specified element
                                 \fI(class template specialization)\fP 
   std::tuple_element<std::pair> obtains the type of the elements of pair
   \fI(C++11)\fP                       \fI(class template specialization)\fP 
