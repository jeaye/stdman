.TH std::unordered_multimap::equal_range 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::unordered_multimap::equal_range \- std::unordered_multimap::equal_range

.SH Synopsis
   std::pair<iterator,iterator> equal_range( const Key& key );            \fI(since C++11)\fP
   std::pair<const_iterator,const_iterator> equal_range( const Key& key   \fI(since C++11)\fP
   ) const;

   Returns a range containing all elements with key key in the container. The range is
   defined by two iterators, the first pointing to the first element of the wanted
   range and the second pointing past the last element of the range.

.SH Parameters

   key - key value to compare the elements to

.SH Return value

   std::pair containing a pair of iterators defining the wanted range. If there are no
   such elements, past-the-end (see end()) iterators are returned as both elements of
   the pair.

.SH Complexity

   Average case linear in the number of elements with the key key, worst case linear in
   the size of the container.

.SH Example

   
// Run this code

 #include <iostream>
 #include <unordered_map>
  
 int main()
 {
     std::unordered_multimap<int,char> map = {{1,'a'},{1,'b'},{1,'d'},{2,'b'}};
     auto range = map.equal_range(1);
     for (auto it = range.first; it != range.second; ++it) {
         std::cout << it->first << ' ' << it->second << '\\n';
     }
 }

.SH Output:

 1 a
 1 b
 1 d

.SH See also

   find finds element with specific key
        \fI(public member function)\fP 
