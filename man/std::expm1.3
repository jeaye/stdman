.TH std::expm1 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::expm1 \- std::expm1

.SH Synopsis
   Defined in header <cmath>
   float       expm1( float arg );       \fB(1)\fP \fI(since C++11)\fP
   double      expm1( double arg );      \fB(2)\fP \fI(since C++11)\fP
   long double expm1( long double arg ); \fB(3)\fP \fI(since C++11)\fP
   double      expm1( Integral arg );    \fB(4)\fP \fI(since C++11)\fP

   1-3) Computes the e (Euler's number, 2.7182818) raised to the given power arg, minus
   1.0. This function is more accurate than the expression std::exp(arg)-1.0 if arg is
   close to zero.
   4) A set of overloads or a function template accepting an argument of any integral
   type. Equivalent to 2) (the argument is cast to double).

.SH Parameters

   arg - value of floating-point or Integral type

.SH Return value

   If no errors occur earg
   -1 is returned.

   If a range error due to overflow occurs, +HUGE_VAL, +HUGE_VALF, or +HUGE_VALL is
   returned.

   If a range error occurs due to underflow, the correct result (after rounding) is
   returned.

.SH Error handling

   Errors are reported as specified in math_errhandling

   If the implementation supports IEEE floating-point arithmetic (IEC 60559),

     * If the argument is ±0, it is returned, unmodified
     * If the argument is -∞, -1 is returned
     * If the argument is +∞, +∞ is returned
     * If the argument is NaN, NaN is returned

.SH Notes

   The functions std::expm1 and std::log1p are useful for financial calculations, for
   example, when calculating small daily interest rates: (1+x)n
   -1 can be expressed as std::expm1(n * std::log1p(x)). These functions also simplify
   writing accurate inverse hyperbolic functions.

   For IEEE-compatible type double, overflow is guaranteed if 709.8 < arg

.SH Example

   
// Run this code

 #include <iostream>
 #include <cmath>
 #include <cerrno>
 #include <cstring>
 #include <cfenv>
 #pragma STDC FENV_ACCESS ON
 int main()
 {
     std::cout << "expm1(1) = " << std::expm1(1) << '\\n'
               << "Interest earned in 2 days on on $100, compounded daily at 1%\\n"
               << " on a 30/360 calendar = "
               << 100*std::expm1(2*std::log1p(0.01/360)) << '\\n'
               << "exp(1e-16)-1 = " << std::exp(1e-16)-1
               << ", but expm1(1e-16) = " << std::expm1(1e-16) << '\\n';
     // special values
     std::cout << "expm1(-0) = " << std::expm1(-0.0) << '\\n'
               << "expm1(-Inf) = " << std::expm1(-INFINITY) << '\\n';
     // error handling
     errno=0; std::feclearexcept(FE_ALL_EXCEPT);
     std::cout << "expm1(710) = " << std::expm1(710) << '\\n';
     if(errno == ERANGE)
         std::cout << "    errno == ERANGE: " << std::strerror(errno) << '\\n';
     if(std::fetestexcept(FE_OVERFLOW))
         std::cout << "    FE_OVERFLOW raised\\n";
 }

.SH Possible output:

 expm1\fB(1)\fP = 1.71828
 Interest earned in 2 days on on $100, compounded daily at 1%
  on a 30/360 calendar = 0.00555563
 exp(1e-16)-1 = 0 expm1(1e-16) = 1e-16
 expm1(-0) = -0
 expm1(-Inf) = -1
 expm1(710) = inf
     errno == ERANGE: Result too large
     FE_OVERFLOW raised

.SH See also

   exp     returns e raised to the given power (e^x)
           \fI(function)\fP 
   exp2    returns 2 raised to the given power (2^x)
   \fI(C++11)\fP \fI(function)\fP 
   log1p   natural logarithm (to base e) of 1 plus the given number (ln(1+x))
   \fI(C++11)\fP \fI(function)\fP 
   C documentation for
   expm1
