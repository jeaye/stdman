.TH std::multiset::find 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::multiset::find \- std::multiset::find

.SH Synopsis
   iterator find( const Key& key );                             \fB(1)\fP
   const_iterator find( const Key& key ) const;                 \fB(2)\fP
   template< class K > iterator find( const K& x );             \fB(3)\fP \fI(since C++14)\fP
   template< class K > const_iterator find( const K& x ) const; \fB(4)\fP \fI(since C++14)\fP

   1,2) Finds an element with key equivalent to key.
   3,4) Finds an element with key that compares equivalent to the value x. This
   overload only participates in overload resolution if the qualified-id
   Compare::is_transparent is valid and denotes a type. It allows calling this function
   without constructing an instance of Key

.SH Parameters

   key - key value of the element to search for
   x   - a value of any type that can be transparently compared with a key

.SH Return value

   Iterator to an element with key equivalent to key. If no such element is found,
   past-the-end (see end()) iterator is returned.

.SH Complexity

   Logarithmic in the size of the container.

.SH Example

   
// Run this code

 #include <iostream>
 #include <set>
  
 int main()
 {
     std::multiset<int> example = {1, 2, 3, 4};
  
     auto search = example.find(2);
     if(search != example.end()) {
         std::cout << "Found " << (*search) << '\\n';
     }
     else {
         std::cout << "Not found\\n";
     }
 }

.SH Output:

 Found 2

.SH See also

   count       returns the number of elements matching specific key
               \fI(public member function)\fP 
   equal_range returns range of elements matching a specific key
               \fI(public member function)\fP 
