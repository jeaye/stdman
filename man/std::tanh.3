.TH std::tanh 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::tanh \- std::tanh

.SH Synopsis
   Defined in header <cmath>
   float       tanh( float arg );       \fB(1)\fP
   double      tanh( double arg );      \fB(2)\fP
   long double tanh( long double arg ); \fB(3)\fP
   double      tanh( Integral arg );    \fB(4)\fP \fI(since C++11)\fP

   Computes the hyperbolic tangent of arg

   4) A set of overloads or a function template accepting an argument of any integral
   type. Equivalent to 2) (the argument is cast to double).

.SH Parameters

   arg - value of a floating-point or Integral type

.SH Return value

   If no errors occur, the hyperbolic tangent of arg (tanh(arg), or

   earg
   -e-arg
   earg
   +e-arg

   ) is returned.

   If a range error occurs due to underflow, the correct result (after rounding) is
   returned.

.SH Error handling

   Errors are reported as specified in math_errhandling

   If the implementation supports IEEE floating-point arithmetic (IEC 60559),

     * if the argument is ±0, ±0 is returned
     * If the argument is ±∞, ±1 is returned
     * if the argument is NaN, NaN is returned

.SH Notes

   POSIX specifies that in case of underflow, arg is returned unmodified, and if that
   is not supported, and implementation-defined value no greater than DBL_MIN, FLT_MIN,
   and LDBL_MIN is returned.

.SH Examples

   
// Run this code

 #include <iostream>
 #include <cmath>
  
 int main()
 {
     std::cout << "tanh(1) = " << std::tanh(1) << '\\n'
               << "tanh(-1) = " << std::tanh(-1) << '\\n'
               << "tanh(0.1)*sinh(0.2)-cosh(0.2) = "
               << std::tanh(0.1) * std::sinh(0.2) - std::cosh(0.2) << '\\n';
     // special values
     std::cout << "tanh(+0) = " << std::tanh(+0.0) << '\\n'
               << "tanh(-0) = " <<  std::tanh(-0.0) << '\\n';
 }

.SH Output:

 tanh\fB(1)\fP = 0.761594
 tanh(-1) = -0.761594
 tanh(0.1)*sinh(0.2)-cosh(0.2) = -1
 tanh(+0) = 0
 tanh(-0) = -0

.SH See also

   sinh                computes hyperbolic sine (sh(x))
                       \fI(function)\fP 
   cosh                computes hyperbolic cosine (ch(x))
                       \fI(function)\fP 
   atanh               computes the inverse hyperbolic tangent (artanh(x))
   \fI(C++11)\fP             \fI(function)\fP 
   tanh(std::complex)  computes hyperbolic tangent of a complex number
                       \fI(function template)\fP 
   tanh(std::valarray) applies the function std::tanh to each element of valarray
                       \fI(function template)\fP 
   C documentation for
   tanh
