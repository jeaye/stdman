.TH std::prev_permutation 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::prev_permutation \- std::prev_permutation

.SH Synopsis
   Defined in header <algorithm>
   template< class BidirIt >                                          \fB(1)\fP
   bool prev_permutation( BidirIt first, BidirIt last);
   template< class BidirIt, class Compare >                           \fB(2)\fP
   bool prev_permutation( BidirIt first, BidirIt last, Compare comp);

   Transforms the range [first, last) into the previous permutation from the set of all
   permutations that are lexicographically ordered with respect to operator< or comp.
   Returns true if such permutation exists, otherwise transforms the range into the
   last permutation (as if by std::sort(first, last); std::reverse(first, last);) and
   returns false.

.SH Parameters

   first, last - the range of elements to permute
                 comparison function object (i.e. an object that satisfies the
                 requirements of Compare) which returns true if the first argument is
                 less than the second.

                 The signature of the comparison function should be equivalent to the
                 following:
   comp        -
                  bool cmp(const Type1 &a, const Type2 &b);

                 The signature does not need to have const &, but the function object
                 must not modify the objects passed to it.
                 The types Type1 and Type2 must be such that an object of type BidirIt
                 can be dereferenced and then implicitly converted to both of them. 
.SH Type requirements
   -
   BidirIt must meet the requirements of ValueSwappable and BidirectionalIterator.

.SH Return value

   true if the new permutation precedes the old in lexicographical order. false if the
   first permutation was reached and the range was reset to the last permutation.

.SH Exceptions

   Any exceptions thrown from iterator operations or the element swap.

.SH Complexity

   At most (last-first)/2 swaps. Averaged over the entire sequence of permutations,
   typical implementations use about 3 comparisons and 1.5 swaps per call.

.SH Possible implementation

   template<class BidirIt>
   bool prev_permutation(BidirIt first, BidirIt last)
   {
       if (first == last) return false;
       BidirIt i = last;
       if (first == --i) return false;
    
       while \fB(1)\fP {
           BidirIt i1, i2;
    
           i1 = i;
           if (*i1 < *--i) {
               i2 = last;
               while (!(*--i2 < *i))
                   ;
               std::iter_swap(i, i2);
               std::reverse(i1, last);
               return true;
           }
           if (i == first) {
               std::reverse(first, last);
               return false;
           }
       }
   }

.SH Example

   The following code prints all six permutations of the string "abc" in reverse order

   
// Run this code

 #include <algorithm>
 #include <string>
 #include <iostream>
 #include <functional>
 int main()
 {
     std::string s="abc";
     std::sort(s.begin(), s.end(), std::greater<char>());
     do {
         std::cout << s << ' ';
     } while(std::prev_permutation(s.begin(), s.end()));
     std::cout << '\\n';
 }

.SH Output:

 cba cab bca bac acb abc

.SH See also

   is_permutation   determines if a sequence is a permutation of another sequence
   \fI(C++11)\fP          \fI(function template)\fP 
                    generates the next greater lexicographic permutation of a range of
   next_permutation elements
                    \fI(function template)\fP 
