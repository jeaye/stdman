.TH std::pair::swap 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::pair::swap \- std::pair::swap

.SH Synopsis
   void swap(pair& other) noexcept(/* see below */);  \fI(since C++11)\fP

   Swaps first with other.first and second with other.second.

.SH Parameters

   other - pair of values to swap

.SH Return value

   \fI(none)\fP

.SH Exceptions

   noexcept specification:  
   noexcept(

        noexcept(swap(first, other.first)) &&
        noexcept(swap(second, other.second))                              \fI(until C++17)\fP

   )

   In the expression above, the identifier swap is looked up in the same
   manner as the one used by the C++17 std::is_nothrow_swappable trait.
   noexcept specification:  
   noexcept(

        std::is_nothrow_swappable<first_type>::value &&                   \fI(since C++17)\fP
        std::is_nothrow_swappable<second_type>::value

   )

.SH Example

   
// Run this code

 #include <iostream>
 #include <utility>
 #include <string>
 int main()
 {
     std::pair<int, std::string> p1, p2;
     p1 = std::make_pair(10, "test");
     p2.swap(p1);
     std::cout << "(" << p2.first << ", " << p2.second << ")\\n";
 }

.SH Output:

 (10, test)

   Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

      DR    Applied to          Behavior as published           Correct behavior
   LWG 2456 C++11      the noexcept specification is ill-formed made to work

.SH See also

   swap swaps the values of two objects
        \fI(function template)\fP 

.SH Category:

     * conditionally noexcept
