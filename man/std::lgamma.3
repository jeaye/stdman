.TH std::lgamma 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::lgamma \- std::lgamma

.SH Synopsis
   Defined in header <cmath>
   float       lgamma( float arg );       \fB(1)\fP \fI(since C++11)\fP
   double      lgamma( double arg );      \fB(2)\fP \fI(since C++11)\fP
   long double lgamma( long double arg ); \fB(3)\fP \fI(since C++11)\fP
   double      lgamma( Integral arg );    \fB(4)\fP \fI(since C++11)\fP

   1-3) Computes the natural logarithm of the absolute value of the gamma function of
   arg.
   4) A set of overloads or a function template accepting an argument of any integral
   type. Equivalent to 2) (the argument is cast to double).

.SH Parameters

   arg - value of a floating-point or Integral type

.SH Return value

   If no errors occur, the value of the logarithm of the gamma function of arg, that is
   log
   e|∫∞
   0targ-1
   e^-t dt|, is returned.

   If a pole error occurs, +HUGE_VAL, +HUGE_VALF, or +HUGE_VALL is returned.

   If a range error due to overflow occurs, ±HUGE_VAL, ±HUGE_VALF, or ±HUGE_VALL is
   returned.

.SH Error handling

   Errors are reported as specified in math_errhandling

   If arg is zero or is an integer less than zero, a pole error may occur.

   If the implementation supports IEEE floating-point arithmetic (IEC 60559),

     * If the argument is 1, +0 is returned
     * If the argument is 2, +0 is returned
     * If the argument is ±0, +∞ is returned and FE_DIVBYZERO is raised
     * If the argument is a negative integer, +∞ is returned and FE_DIVBYZERO is raised
     * If the argument is ±∞, +∞ is returned.
     * If the argument is NaN, NaN is returned

.SH Notes

   If arg is a natural number, std::lgamma(arg) is the logarithm of the factorial of
   arg-1.

   The POSIX version of lgamma is not thread-safe: each execution of the function
   stores the sign of the gamma function of arg in the static external variable
   signgam. Some implementations provide lgamma_r, which takes a pointer to
   user-provided storage for singgam as the second parameter, and is thread-safe.

   There is a non-standard function named gamma in various implementations, but its
   definition is inconsistent. For example, glibc and 4.2BSD version of gamma executes
   lgamma, but 4.4BSD version of gamma executes tgamma.

.SH Example

   
// Run this code

 #include <iostream>
 #include <cmath>
 #include <cerrno>
 #include <cstring>
 #include <cfenv>
 #pragma STDC FENV_ACCESS ON
 const double pi = std::acos(-1);
 int main()
 {
     std::cout << "lgamma(10) = " << std::lgamma(10)
               << ",  log(9!) = " << std::log(2*3*4*5*6*7*8*9) << '\\n'
               << "lgamma(0.5) = " << std::lgamma(0.5)
               << " , log(sqrt(pi)) = " << std::log(std::sqrt(pi)) << '\\n';
     // special values
     std::cout << "lgamma(1) = " << std::lgamma(1) << '\\n'
               << "lgamma(+Inf) = " << std::lgamma(INFINITY) << '\\n';
     // error handling
     errno=0; std::feclearexcept(FE_ALL_EXCEPT);
     std::cout << "lgamma(0) = " << std::lgamma(0) << '\\n';
     if(errno == ERANGE)
         std::cout << "    errno == ERANGE: " << std::strerror(errno) << '\\n';
     if(std::fetestexcept(FE_DIVBYZERO))
         std::cout << "    FE_DIVBYZERO raised\\n";
 }

.SH Output:

 lgamma\fB(10)\fP = 12.8018,  log(9!) = 12.8018
 lgamma(0.5) = 0.572365 , log(sqrt(pi)) = 0.572365
 lgamma\fB(1)\fP = 0
 lgamma(+Inf) = inf
 lgamma\fB(0)\fP = inf
     errno == ERANGE: Numerical result out of range
     FE_DIVBYZERO raised

.SH See also

   tgamma  gamma function
   \fI(C++11)\fP \fI(function)\fP 
   C documentation for
   lgamma

.SH External links

   Weisstein, Eric W. "Log Gamma Function." From MathWorld--A Wolfram Web Resource.
