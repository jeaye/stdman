.TH std::unordered_multimap::insert 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::unordered_multimap::insert \- std::unordered_multimap::insert

.SH Synopsis
   iterator insert( const value_type& value );                      \fB(1)\fP \fI(since C++11)\fP
   template< class P >                                              \fB(2)\fP \fI(since C++11)\fP
   iterator insert( P&& value );
   iterator insert( value_type&& value );                           \fB(2)\fP \fI(since C++17)\fP
   iterator insert( const_iterator hint, const value_type& value ); \fB(3)\fP \fI(since C++11)\fP
   template< class P >                                              \fB(4)\fP \fI(since C++11)\fP
   iterator insert( const_iterator hint, P&& value );
   iterator insert( const_iterator hint, value_type&& value );      \fB(4)\fP \fI(since C++17)\fP
   template< class InputIt >                                        \fB(5)\fP \fI(since C++11)\fP
   void insert( InputIt first, InputIt last );
   void insert( std::initializer_list<value_type> ilist );          \fB(6)\fP \fI(since C++11)\fP
   iterator insert(node_type&& nh);                                 \fB(7)\fP \fI(since C++17)\fP
   iterator insert(const_iterator hint, node_type&& nh);            \fB(8)\fP \fI(since C++17)\fP

   Inserts element(s) into the container.

   1-2) inserts value. The overload \fB(2)\fP is equivalent to
   emplace(std::forward<P>(value)) and only participates in overload resolution if
   std::is_constructible<value_type, P&&>::value == true.
   3-4) inserts value, using hint as a non-binding suggestion to where the search
   should start. The overload \fB(4)\fP is equivalent to emplace_hint(hint,
   std::forward<P>(value)) and only participates in overload resolution if
   std::is_constructible<value_type, P&&>::value == true.
   5) inserts elements from range [first, last).
   6) inserts elements from initializer list ilist.
   7) If nh is an empty node handle, does nothing. Otherwise, inserts the element owned
   by nh into the container and returns an iterator pointing at the inserted element..
   The behavior is undefined if nh is not empty and get_allocator() !=
   nh.get_allocator().
   8) If nh is an empty node handle, does nothing and returns the end iterator.
   Otherwise, inserts the element owned by nh into the container, and returns the
   iterator pointing to the element with key equivalent to nh.key() The element is
   inserted as close as possible to hint. The behavior is undefined if nh is not empty
   and get_allocator() != nh.get_allocator().

   If rehashing occurs due to the insertion, all iterators are invalidated. Otherwise
   iterators are not affected. References are not invalidated. Rehashing occurs only if
   the new number of elements is greater than max_load_factor()*bucket_count().
   If the insertion is successful, pointers and references to the element obtained
   while it is held in the node handle are invalidated, and pointers and references
   obtained to that element before it was extracted become valid.
   \fI(since C++17)\fP

.SH Parameters

   hint        - iterator, used as a suggestion as to where to insert the content
   value       - element value to insert
   first, last - range of elements to insert
   ilist       - initializer list to insert the values from
   nh          - a compatible node handle
.SH Type requirements
   -
   InputIt must meet the requirements of InputIterator.

.SH Return value

   1-4) Returns an iterator to the inserted element.
   5-6) \fI(none)\fP
   7,8) End iterator if nh was empty, iterator pointing to the inserted element
   otherwise.

.SH Exceptions

   1-4) If an exception is thrown by any operation, the insertion has no effect.

    This section is incomplete
    Reason: cases 5-6

.SH Complexity

   1-4) Average case: O(1), worst case O(size())
   5-6) Average case: O(N), where N is the number of elements to insert. Worse case:
   O(N*size()+N)
   7-8) Average case: O(1), worst case O(size())

.SH See also

   emplace      constructs element in-place
                \fI(public member function)\fP 
   emplace_hint constructs elements in-place using a hint
                \fI(public member function)\fP 

.SH Category:

     * Todo with reason
