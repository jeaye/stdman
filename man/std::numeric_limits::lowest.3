.TH std::numeric_limits::lowest 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::numeric_limits::lowest \- std::numeric_limits::lowest

.SH Synopsis
   static constexpr T lowest()  \fI(since C++11)\fP

   Returns the lowest finite value representable by the numeric type T, that is, a
   finite value x such that there is no other finite value y where y < x. This is
   different from std::numeric_limits<T>::min() for floating-point types. Only
   meaningful for bounded types.

.SH Return value

   T                     std::numeric_limits<T>::lowest()
   /* non-specialized */ T();
   bool                  false
   char                  CHAR_MIN
   signed char           SCHAR_MIN
   unsigned char         0
   wchar_t               WCHAR_MIN
   char16_t              0
   char32_t              0
   short                 SHRT_MIN
   unsigned short        0
   int                   INT_MIN
   unsigned int          0
   long                  LONG_MIN
   unsigned long         0
   long long             LLONG_MIN
   unsigned long long    0
   float                 -FLT_MAX
   double                -DBL_MAX
   long double           -LDBL_MAX

.SH Notes

   While it's not true for fundamental C++ floating-poing types, a third-party
   floating-point type T may exist such that std::numeric_limits<T>::lowest() !=
   -std::numeric_limits<T>::max().

.SH Exceptions

   \fI(none)\fP                    \fI(until C++11)\fP
   noexcept specification:  
   noexcept                  \fI(since C++11)\fP
     

.SH Example

   Demonstrates min, max, and lowest for floating-point types

   
// Run this code

 #include <limits>
 #include <iostream>
 int main()
 {
  
     std::cout << "std::numeric_limits<T>::min():\\n"
               << "\\tfloat: " << std::numeric_limits<float>::min()
               << " or " << std::hexfloat << std::numeric_limits<float>::min() << '\\n'
               << "\\tdouble: " << std::defaultfloat << std::numeric_limits<double>::min()
               << " or " << std::hexfloat << std::numeric_limits<double>::min() << '\\n';
     std::cout << "std::numeric_limits<T>::lowest():\\n"
               << "\\tfloat: " << std::defaultfloat << std::numeric_limits<float>::lowest()
               << " or " << std::hexfloat << std::numeric_limits<float>::lowest() << '\\n'
               << "\\tdouble: " << std::defaultfloat << std::numeric_limits<double>::lowest()
               << " or " << std::hexfloat << std::numeric_limits<double>::lowest() << '\\n';
     std::cout << "std::numeric_limits<T>::max():\\n"
               << "\\tfloat: " << std::defaultfloat << std::numeric_limits<float>::max()
               << " or " << std::hexfloat << std::numeric_limits<float>::max() << '\\n'
               << "\\tdouble: " << std::defaultfloat << std::numeric_limits<double>::max()
               << " or " << std::hexfloat << std::numeric_limits<double>::max() << '\\n';
 }

.SH Output:

 std::numeric_limits<T>::min():
         float: 1.17549e-38 or 0x1p-126
         double: 2.22507e-308 or 0x1p-1022
 std::numeric_limits<T>::lowest():
         float: -3.40282e+38 or -0x1.fffffep+127
         double: -1.79769e+308 or -0x1.fffffffffffffp+1023
 std::numeric_limits<T>::max():
         float: 3.40282e+38 or 0x1.fffffep+127
         double: 1.79769e+308 or 0x1.fffffffffffffp+1023

.SH See also

   min        returns the smallest finite value of the given type
   \fB[static]\fP   \fI(public static member function)\fP 
   denorm_min returns the smallest positive subnormal value of the given floating-point
   \fB[static]\fP   type
              \fI(public static member function)\fP 
   max        returns the largest finite value of the given type
   \fB[static]\fP   \fI(public static member function)\fP 

.SH Category:

     * unconditionally noexcept

   Hidden categories:

     * Pages with unreviewed unconditional noexcept template
     * Pages with unreviewed noexcept template
