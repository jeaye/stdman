.TH std::promise::set_value_at_thread_exit 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::promise::set_value_at_thread_exit \- std::promise::set_value_at_thread_exit

.SH Synopsis
   void set_value_at_thread_exit( const R&         (member only of generic promise
   value );                                    \fB(1)\fP template)
                                                   \fI(since C++11)\fP
                                                   (member only of generic promise
   void set_value_at_thread_exit( R&& value ); \fB(2)\fP template)
                                                   \fI(since C++11)\fP
                                                   (member only of promise<R&> template
   void set_value_at_thread_exit( R& value );  \fB(3)\fP specialization)
                                                   \fI(since C++11)\fP
                                                   (member only of promise<void>
   void set_value_at_thread_exit()             \fB(4)\fP template specialization)
                                                   \fI(since C++11)\fP

   Stores the value into the shared state without making the state ready immediately.
   The state is made ready when the current thread exits, after all variables with
   thread-local storage duration have been destroyed.

   The operation behaves as though set_value, set_exception, set_value_at_thread_exit,
   and set_exception_at_thread_exit acquire a single mutex associated with the promise
   object while updating the promise object.

   An exception is thrown if there is no shared state or the shared state already
   stores a value or exception.

.SH Parameters

   value - value to store in the shared state

.SH Return value

   \fI(none)\fP

.SH Exceptions

   std::future_error on the following conditions:

     * *this has no shared state. The error category is set to no_state.

     * The shared state already stores a value or exception. The error category is set
       to promise_already_satisfied.

   Additionally:

   1-2) Any exception thrown by the copy constructor of value
   3) Any exception thrown by the move constructor of value

.SH Example

   
// Run this code

 #include <iostream>
 #include <future>
 #include <thread>
  
 int main()
 {
     using namespace std::chrono_literals;
     std::promise<int> p;
     std::future<int> f = p.get_future();
     std::thread([&p] {
           std::this_thread::sleep_for(1s);
           p.set_value_at_thread_exit(9);
     }).detach();
  
     std::cout << "Waiting..." << std::flush;
     f.wait();
     std::cout << "Done!\\nResult is: " << f.get() << '\\n';
 }

.SH Output:

 Waiting...Done!
 Result is: 9

.SH See also

   set_value sets the result to specific value
             \fI(public member function)\fP 
