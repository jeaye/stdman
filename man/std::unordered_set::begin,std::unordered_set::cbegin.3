.TH std::unordered_set::begin,std::unordered_set::cbegin 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::unordered_set::begin,std::unordered_set::cbegin \- std::unordered_set::begin,std::unordered_set::cbegin

.SH Synopsis
   iterator begin() noexcept;               \fI(since C++11)\fP
   const_iterator begin() const noexcept;   \fI(since C++11)\fP
   const_iterator cbegin() const noexcept;  \fI(since C++11)\fP

   Returns an iterator to the first element of the container.

   If the container is empty, the returned iterator will be equal to end().

   range-begin-end.svg

.SH Parameters

   \fI(none)\fP

.SH Return value

   Iterator to the first element

.SH Complexity

   Constant

.SH Example

   
// Run this code

 #include <iostream>
 #include <unordered_set>
  
 struct Point { double x, y; };
  
 int main() {
     Point pts[3] = { {1, 0}, {2, 0}, {3, 0} };
  
     //points is a set containing the addresses of points
     std::unordered_set<Point *> points = { pts, pts + 1, pts + 2 };
  
     //Change each y-coordinate of (i, 0) from 0 into i^2 and print the point
     for(auto iter = points.begin(); iter != points.end(); ++iter){
         (*iter)->y = ((*iter)->x) * ((*iter)->x); //iter is a pointer-to-Point*
         std::cout << "(" << (*iter)->x << ", " << (*iter)->y << ") ";
     }
     std::cout << '\\n';
  
     //Now using the range-based for loop, we increase each y-coordinate by 10
     for(Point * i : points) {
         i->y += 10;
         std::cout << "(" << i->x << ", " << i->y << ") ";
     }
 }

.SH Possible output:

 (3, 9) (1, 1) (2, 4)
 (3, 19) (1, 11) (2, 14)

.SH See also

   end  returns an iterator to the end
   cend \fI(public member function)\fP 
