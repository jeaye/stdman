.TH std::experimental::ranges::Destructible 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::experimental::ranges::Destructible \- std::experimental::ranges::Destructible

.SH Synopsis
   Defined in header <experimental/ranges/concepts>
   template < class T >                                                 (ranges TS)
   concept bool Destructible = std::is_nothrow_destructible<T>::value;

   The concept Destructible specifies the concept of all types whose instances can
   safely be destroyed at the end of their lifetime (including reference types).

   There need not be any subsumption relationship between Destructible<T> and
   std::is_nothrow_destructible<T>::value.

.SH Notes

   Unlike the Destructible library concept in the main C++ standard,
   ranges::Destructible requires the destructor to be noexcept(true), not merely
   non-throwing when invoked.

.SH See also

   is_destructible
   is_trivially_destructible
   is_nothrow_destructible   checks if a type has a non-deleted destructor
   \fI(C++11)\fP                   \fI(class template)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
