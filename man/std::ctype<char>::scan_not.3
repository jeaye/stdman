.TH std::ctype<char>::scan_not 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::ctype<char>::scan_not \- std::ctype<char>::scan_not

.SH Synopsis
   Defined in header <locale>
   const char* scan_not (mask m, const char* beg, const char* end) const; \fB(1)\fP

   Locates the first character in the character array [beg, end) that does not satisfy
   the classification mask m, that is, the first character c such that
   table()[(unsigned char)c] & m would return false.

   If (unsigned char)c >= std::ctype<char>::table_size, then an implementation-defined
   value is substituted instead of table()[(unsigned char)c], possibly different for
   different values of c.

.SH Parameters

   m   - mask to search for
   beg - pointer to the first character in an array of characters to search
   end - one past the end pointer for the array of characters to search

.SH Return value

   Pointer to the first character in [beg, end) that does not satisfy the mask, or end
   if no such character was found.

.SH Notes

   Unlike the primary template std::ctype, this specialization does not perform a
   virtual function call when classifying characters. To customize the behavior, a
   derived class may provide a non-default classification table to the base class
   constructor.

.SH Example

   
// Run this code

 #include <locale>
 #include <iostream>
 #include <iterator>
  
 int main()
 {
     auto& f = std::use_facet<std::ctype<char>>(std::locale());
  
     // skip leading whitespace
     char s1[] = "      \\t\\t\\n  Test";
     const char* p1 = f.scan_not(std::ctype_base::space, std::begin(s1), std::end(s1));
     std::cout << "'" << p1 << "'\\n";
  
     // skip leading digits
     char s2[] = "123456789abcd";
     const char* p2 = f.scan_not(std::ctype_base::digit, std::begin(s2), std::end(s2));
     std::cout << "'" << p2 << "'\\n";
 }

.SH Output:

 'Test'
 'abcd'

.SH See also

   do_scan_not locates the first character in a sequence that fails given
   \fB[virtual]\fP   classification
               \fI(virtual protected member function of std::ctype)\fP 
               locates the first character in a sequence that conforms to given
   scan_is     classification, using the classification table
               \fI(public member function)\fP 
