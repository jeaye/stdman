.TH std::swap(std::thread) 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::swap(std::thread) \- std::swap(std::thread)

.SH Synopsis
   void swap( thread &lhs, thread &rhs ) noexcept;  \fI(since C++11)\fP

   Overloads the std::swap algorithm for std::thread. Exchanges the state of lhs with
   that of rhs. Effectively calls lhs.swap(rhs).

.SH Parameters

   lhs, rhs - threads whose states to swap

.SH Return value

   \fI(none)\fP

.SH Example

   
// Run this code

 #include <iostream>
 #include <thread>
 #include <chrono>
  
 void foo()
 {
     std::this_thread::sleep_for(std::chrono::seconds(1));
 }
  
 void bar()
 {
     std::this_thread::sleep_for(std::chrono::seconds(1));
 }
  
 int main()
 {
     std::thread t1(foo);
     std::thread t2(bar);
  
     std::cout << "thread 1 id: " << t1.get_id() << std::endl;
     std::cout << "thread 2 id: " << t2.get_id() << std::endl;
  
     std::swap(t1, t2);
  
     std::cout << "after std::swap(t1, t2):" << std::endl;
     std::cout << "thread 1 id: " << t1.get_id() << std::endl;
     std::cout << "thread 2 id: " << t2.get_id() << std::endl;
  
     t1.swap(t2);
  
     std::cout << "after t1.swap(t2):" << std::endl;
     std::cout << "thread 1 id: " << t1.get_id() << std::endl;
     std::cout << "thread 2 id: " << t2.get_id() << std::endl;
  
     t1.join();
     t2.join();
 }

.SH Output:

 thread 1 id: 1892
 thread 2 id: 2584
 after std::swap(t1, t2):
 thread 1 id: 2584
 thread 2 id: 1892
 after t1.swap(t2):
 thread 1 id: 1892
 thread 2 id: 2584

.SH See also

   swap swaps two thread objects
        \fI(public member function)\fP 
