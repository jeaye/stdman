.TH std::basic_string::operator+= 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::basic_string::operator+= \- std::basic_string::operator+=

.SH Synopsis
   basic_string& operator+=( const basic_string& str );               \fB(1)\fP
   basic_string& operator+=( CharT ch );                              \fB(2)\fP
   basic_string& operator+=( const CharT* s );                        \fB(3)\fP
   basic_string& operator+=( std::initializer_list<CharT> ilist );    \fB(4)\fP \fI(since C++11)\fP
   basic_string& operator+=( std::basic_string_view<CharT, Traits>    \fB(5)\fP \fI(since C++17)\fP
   sv);

   Appends additional characters to the string.

   1) Appends string str
   2) Appends character ch
   3) Appends the null-terminated character string pointed to by s.
   4) Appends characters in the initializer list ilist.
   5) Appends characters in the string view sv as if by append(sv)

.SH Parameters

   str   - string to append
   ch    - character value to append
   s     - pointer to a null-terminated character string to append
   ilist - std::initializer_list with the characters to append
   sv    - std::basic_string_view with the characters to append

.SH Return value

   *this

.SH Complexity

   1) linear in size of str
   2) constant
   3) linear in size of s
   4) linear in size of ilist

.SH Exceptions

   If an exception is thrown for any reason, this function has no effect (strong
   exception guarantee).
   \fI(since C++11)\fP

   If the operation would result in size() > max_size(), throws std::length_error.

.SH Notes

   Overload \fB(2)\fP can accept any types that are implicitly convertible to CharT. For
   std::string, where CharT is char, the set of acceptable types includes all
   arithmetic types. This may have unintended effects.

.SH Example

   
// Run this code

 #include <iostream>
 #include <iomanip>
 #include <string>
  
 int main()
 {
    std::string str;
    str.reserve(50); //reserves sufficient storage space to avoid memory reallocation
    std::cout << std::quoted(str) << '\\n'; //empty string
  
    str += "This";
    std::cout << std::quoted(str) << '\\n';
  
    str += std::string(" is ");
    std::cout << std::quoted(str) << '\\n';
  
    str += 'a';
    std::cout << std::quoted(str) << '\\n';
  
    str += {' ','s','t','r','i','n','g','.'};
    std::cout << std::quoted(str) << '\\n';
  
    str += 76.85; // equivalent to str += static_cast<char>(76.85), might not be the intent
    std::cout << std::quoted(str) << '\\n';
 }

.SH Output:

 ""
 "This"
 "This is "
 "This is a"
 "This is a string."
 "This is a string.L"

.SH See also

   assign assign characters to a string
          \fI(public member function)\fP 
