.TH std::set_terminate 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::set_terminate \- std::set_terminate

.SH Synopsis
   Defined in header <exception>
   std::terminate_handler set_terminate( std::terminate_handler f );

   Makes f the new global terminate handler function and returns the previously
   installed std::terminate_handler.

   This function is thread-safe. Every call to std::set_terminate
   synchronizes-with (see std::memory_order) the subsequent               \fI(since C++11)\fP
   std::set_terminate and std::get_terminate

.SH Parameters

   f - pointer to function of type std::terminate_handler, or null pointer

.SH Return value

   The previously-installed terminate handler, or a null pointer value if none was
   installed.

.SH Exceptions

   \fI(none)\fP                    \fI(until C++11)\fP
   noexcept specification:  
   noexcept                  \fI(since C++11)\fP
     

.SH Example

   
// Run this code

 #include <iostream>
 #include <cstdlib>
 #include <exception>
  
 int main()
 {
     std::set_terminate([](){ std::cout << "Unhandled exception\\n"; std::abort();});
     throw 1;
 }

.SH Possible output:

 Unhandled exception
 bash: line 7:  7743 Aborted                 (core dumped) ./a.out

.SH See also

   terminate         function called when exception handling fails
                     \fI(function)\fP 
   get_terminate     obtains the current terminate_handler
   \fI(C++11)\fP           \fI(function)\fP 
   terminate_handler the type of the function called by std::terminate
                     \fI(typedef)\fP 

.SH Category:

     * unconditionally noexcept

   Hidden categories:

     * Pages with unreviewed unconditional noexcept template
     * Pages with unreviewed noexcept template
