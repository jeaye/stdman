.TH std::is_fundamental 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_fundamental \- std::is_fundamental

.SH Synopsis
   Defined in header <type_traits>
   template< class T >              \fI(since C++11)\fP
   struct is_fundamental;

   If T is a fundamental type (that is, arithmetic type, void, or nullptr_t), provides
   the member constant value equal true. For any other type, value is false.

.SH Template parameters

   T - a type to check

   Helper variable template

   template< class T >                                                 \fI(since C++17)\fP
   inline constexpr bool is_fundamental_v = is_fundamental<T>::value;

   

Inherited from std::integral_constant

.SH Member constants

   value    true if T is a fundamental type , false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP
   operator()    returns value
   \fI(C++14)\fP       \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Possible implementation

   template< class T >
   struct is_fundamental
     : std::integral_constant<
           bool,
           std::is_arithmetic<T>::value ||
           std::is_void<T>::value  ||
           std::is_same<std::nullptr_t, typename std::remove_cv<T>::type>::value
           // you can also use 'std::is_null_pointer<T>::value' instead in C++14
   > {};

.SH Example

   
// Run this code

 #include <iostream>
 #include <type_traits>
  
 class A {};
  
 int main()
 {
     std::cout << std::boolalpha;
     std::cout << "A\\t"      << std::is_fundamental<A>::value << '\\n';
     std::cout << "int\\t"    << std::is_fundamental<int>::value << '\\n';
     std::cout << "int&\\t"   << std::is_fundamental<int&>::value << '\\n';
     std::cout << "int*\\t"   << std::is_fundamental<int*>::value << '\\n';
     std::cout << "float\\t"  << std::is_fundamental<float>::value << '\\n';
     std::cout << "float&\\t" << std::is_fundamental<float&>::value << '\\n';
     std::cout << "float*\\t" << std::is_fundamental<float*>::value << '\\n';
 }

.SH Output:

 A       false
 int     true
 int&        false
 int*    false
 float   true
 float&      false
 float*  false

.SH See also

   is_compound     checks if a type is compound type
   \fI(C++11)\fP         \fI(class template)\fP 
   is_arithmetic   checks if a type is arithmetic type
   \fI(C++11)\fP         \fI(class template)\fP 
   is_void         checks if a type is void
   \fI(C++11)\fP         \fI(class template)\fP 
   is_null_pointer checks if a type is std::nullptr_t
   \fI(C++14)\fP         \fI(class template)\fP 
