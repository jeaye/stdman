.TH std::partition 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::partition \- std::partition

.SH Synopsis
   Defined in header <algorithm>
   template< class BidirIt, class UnaryPredicate >
   BidirIt partition( BidirIt first, BidirIt last, UnaryPredicate         \fI(until C++11)\fP
   p );
   template< class ForwardIt, class UnaryPredicate >
   ForwardIt partition( ForwardIt first, ForwardIt last,          \fB(1)\fP     \fI(since C++11)\fP
   UnaryPredicate p );
   template< class ExecutionPolicy, class ForwardIt, class
   UnaryPredicate >                                                   \fB(2)\fP \fI(since C++17)\fP
   ForwardIt partition( ExecutionPolicy&& policy, ForwardIt
   first, ForwardIt last, UnaryPredicate p );

   1) Reorders the elements in the range [first, last) in such a way that all elements
   for which the predicate p returns true precede the elements for which predicate p
   returns false. Relative order of the elements is not preserved.
   2) Same as \fB(1)\fP, but executed according to policy. This overload does not participate
   in overload resolution unless
   std::is_execution_policy_v<std::decay_t<ExecutionPolicy>> is true

.SH Parameters

   first, last           -          the range of elements to reorder
   policy                -          the execution policy to use. See execution policy
                                    for details.
                                    unary predicate which returns true if the element
                                    should be ordered before other elements.

                                    The signature of the predicate function should be
                                    equivalent to the following:

   p                     -           bool pred(const Type &a);

                                    The signature does not need to have const &, but
                                    the function must not modify the objects passed to
                                    it.
                                    The type Type must be such that an object of type
                                    ForwardIt can be dereferenced and then implicitly
                                    converted to Type. 
.SH Type requirements
   -
   BidirIt must meet the requirements of BidirectionalIterator.
   -
   ForwardIt must meet the requirements of ValueSwappable and ForwardIterator. However,
   the operation is more efficient if ForwardIt also satisfies the requirements of
   BidirectionalIterator
   -
   UnaryPredicate must meet the requirements of Predicate.

.SH Return value

   Iterator to the first element of the second group.

.SH Complexity

   Given N = std::distance(first,last),

   1) Exactly N applications of the predicate. At most N/2 swaps if ForwardIt meets the
   requirements of BidirectionalIterator, and at most N swaps otherwise.
   2) O(N log N) swaps and O(N) applications of the predicate.

.SH Exceptions

   The overload with a template parameter named ExecutionPolicy reports errors as
   follows:

     * If execution of a function invoked as part of the algorithm throws an exception
       and ExecutionPolicy is one of the three standard policies, std::terminate is
       called. For any other ExecutionPolicy, the behavior is implementation-defined.
     * If the algorithm fails to allocate memory, std::bad_alloc is thrown.

.SH Possible implementation

   template<class ForwardIt, class UnaryPredicate>
   ForwardIt partition(ForwardIt first, ForwardIt last, UnaryPredicate p)
   {
       first = std::find_if_not(first, last, p);
       if (first == last) return first;
    
       for(ForwardIt i = std::next(first); i != last; ++i){
           if(p(*i)){
               std::iter_swap(i, first);
               ++first;
           }
       }
       return first;
   }

.SH Example

   
// Run this code

 #include <algorithm>
 #include <iostream>
 #include <iterator>
 #include <vector>
 #include <forward_list>
  
 template <class ForwardIt>
  void quicksort(ForwardIt first, ForwardIt last)
  {
     if(first == last) return;
     auto pivot = *std::next(first, std::distance(first,last)/2);
     ForwardIt middle1 = std::partition(first, last,
                          [pivot](const auto& em){ return em < pivot; });
     ForwardIt middle2 = std::partition(middle1, last,
                          [pivot](const auto& em){ return !(pivot < em); });
     quicksort(first, middle1);
     quicksort(middle2, last);
  }
  
 int main()
 {
     std::vector<int> v = {0,1,2,3,4,5,6,7,8,9};
     std::cout << "Original vector:\\n    ";
     for (int elem : v) std::cout << elem << ' ';
  
     auto it = std::partition(v.begin(), v.end(), [](int i){return i % 2 == 0;});
  
     std::cout << "\\nPartitioned vector:\\n    ";
     std::copy(std::begin(v), it, std::ostream_iterator<int>(std::cout, " "));
     std::cout << " * ";
     std::copy(it, std::end(v), std::ostream_iterator<int>(std::cout, " "));
  
     std::forward_list<int> fl = {1, 30, -4, 3, 5, -4, 1, 6, -8, 2, -5, 64, 1, 92};
     std::cout << "\\nUnsorted list:\\n    ";
     for(int n : fl) std::cout << n << ' ';
     std::cout << '\\n';
  
     quicksort(std::begin(fl), std::end(fl));
     std::cout << "Sorted using quicksort:\\n    ";
     for(int fi : fl) std::cout << fi << ' ';
     std::cout << '\\n';
 }

.SH Output:

 Original vector:
     0 1 2 3 4 5 6 7 8 9
 Partitioned vector:
     0 8 2 6 4  *  5 3 7 1 9
 Unsorted list:
     1 30 -4 3 5 -4 1 6 -8 2 -5 64 1 92
 Sorted using quicksort:
     -8 -5 -4 -4 1 1 1 2 3 5 6 30 64 92

.SH See also

   is_partitioned   determines if the range is partitioned by the given predicate
   \fI(C++11)\fP          \fI(function template)\fP 
                    divides elements into two groups while preserving their relative
   stable_partition order
                    \fI(function template)\fP 
