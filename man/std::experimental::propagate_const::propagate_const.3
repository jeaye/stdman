.TH std::experimental::propagate_const::propagate_const 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::experimental::propagate_const::propagate_const \- std::experimental::propagate_const::propagate_const

.SH Synopsis
   constexpr propagate_const() = default;              \fB(1)\fP (library fundamentals TS v2)
   constexpr propagate_const( propagate_const&& p ) =  \fB(2)\fP (library fundamentals TS v2)
   default;
   template<class U>
   /* see below */ constexpr propagate_const(          \fB(3)\fP (library fundamentals TS v2)
   propagate_const<U>&& pu );
   template<class U>                                   \fB(4)\fP (library fundamentals TS v2)
   /* see below */ constexpr propagate_const( U&& u );
   propagate_const( const propagate_const& ) = delete; \fB(5)\fP (library fundamentals TS v2)

   Let t_ designate the private data member that is the wrapped pointer-like object.

   1) Constructs an propagate_const, default-initializing this->t_.

   2) Explicitly defaulted move constructor that move constructs this->t_ from p.t_.

   3) Initializes this->t_ as if by direct-non-list-initialization from the expression
   std::move(pu.t_)

   This constructor does not participate in overload resolution unless
   std::is_constructible<T, U&&>::value is true, and is explicit if and only if
   std::is_convertible<U&&, T>::value is false.

   4) Initializes this->t_ as if by direct-non-list-initialization with the expression
   std::forward<U>(u).

   This constructor does not participate in overload resolution unless
   std::is_constructible<T, U&&>::value is true and std::decay_t<U> is not a
   specialization of propagate_const. This constructor is explicit if and only if
   std::is_convertible<U&&, T>::value is false.

   5) Copy constructor is explicitly deleted.

.SH Parameters

   p  - another propagate_const object to move from
   pu - another propagate_const object of a different specialization to move from
   u  - another object to initialize the contained pointer with
