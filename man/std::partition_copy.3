.TH std::partition_copy 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::partition_copy \- std::partition_copy

.SH Synopsis
   Defined in header <algorithm>
   template< class InputIt, class OutputIt1,

             class OutputIt2, class UnaryPredicate >
   std::pair<OutputIt1, OutputIt2>                                        \fI(since C++11)\fP
        partition_copy( InputIt first, InputIt last,                      (until C++20)
                        OutputIt1 d_first_true, OutputIt2
   d_first_false,

                        UnaryPredicate p );
   template< class InputIt, class OutputIt1,

              class OutputIt2, class UnaryPredicate >
   constexpr std::pair<OutputIt1, OutputIt2>
                  partition_copy( InputIt first, InputIt last,            (since C++20)
                                  OutputIt1 d_first_true,         \fB(1)\fP
   OutputIt2 d_first_false,

                                  UnaryPredicate p );
   template< class ExecutionPolicy, class ForwardIt1, class
   ForwardIt2,

             class ForwardIt3, class UnaryPredicate >
   std::pair<ForwardIt2, ForwardIt3>
        partition_copy( ExecutionPolicy&& policy, ForwardIt1          \fB(2)\fP \fI(since C++17)\fP
   first, ForwardIt1 last,
                        ForwardIt2 d_first_true, ForwardIt3
   d_first_false,

                        UnaryPredicate p );

   1) Copies the elements from the range [first, last) to two different ranges
   depending on the value returned by the predicate p. The elements, that satisfy the
   predicate p, are copied to the range beginning at d_first_true. The rest of the
   elements are copied to the range beginning at d_first_false.
   The behavior is undefined if the input range overlaps either of the output ranges.
   2) Same as \fB(1)\fP, but executed according to policy. This overload only participates in
   overload resolution if std::is_execution_policy_v<std::decay_t<ExecutionPolicy>> is
   true

.SH Parameters

   first, last            -         the range of elements to sort
   d_first_true           -         the beginning of the output range for the elements
                                    that satisfy p
   d_first_false          -         the beginning of the output range for the elements
                                    that do not satisfy p
   policy                 -         the execution policy to use. See execution policy
                                    for details.
                                    unary predicate which returns true if the element
                                    should be placed in d_first_true.

                                    The signature of the predicate function should be
                                    equivalent to the following:

   p                      -          bool pred(const Type &a);

                                    The signature does not need to have const &, but
                                    the function must not modify the objects passed to
                                    it.
                                    The type Type must be such that an object of type
                                    InputIt can be dereferenced and then implicitly
                                    converted to Type. 
.SH Type requirements
   -
   InputIt must meet the requirements of InputIterator.
   -
   The type of dereferenced InputIt must meet the requirements of CopyAssignable.
   -
   OutputIt1, OutputIt2 must meet the requirements of OutputIterator.
   -
   ForwardIt1, ForwardIt2, ForwardIt3 must meet the requirements of ForwardIterator.
   ForwardIt1's value type must be CopyAssignable, writable to ForwardIt2 and
   ForwardIt3, and convertible to UnaryPredicate's argument type
   -
   UnaryPredicate must meet the requirements of Predicate.

.SH Return value

   A std::pair constructed from the iterator to the end of the d_first_true range and
   the iterator to the end of the d_first_false range.

.SH Complexity

   Exactly distance(first, last) applications of p.

   For the overload with an ExecutionPolicy, there may be a performance cost if
   ForwardIt's value type is not CopyConstructible.

.SH Exceptions

   The overload with a template parameter named ExecutionPolicy reports errors as
   follows:

     * If execution of a function invoked as part of the algorithm throws an exception
       and ExecutionPolicy is one of the three standard policies, std::terminate is
       called. For any other ExecutionPolicy, the behavior is implementation-defined.
     * If the algorithm fails to allocate memory, std::bad_alloc is thrown.

.SH Possible implementation

   template<class InputIt, class OutputIt1,
            class OutputIt2, class UnaryPredicate>
   std::pair<OutputIt1, OutputIt2>
       partition_copy(InputIt first, InputIt last,
                      OutputIt1 d_first_true, OutputIt2 d_first_false,
                      UnaryPredicate p)
   {
       while (first != last) {
           if (p(*first)) {
               *d_first_true = *first;
               ++d_first_true;
           } else {
               *d_first_false = *first;
               ++d_first_false;
           }
           ++first;
       }
       return std::pair<OutputIt1, OutputIt2>(d_first_true, d_first_false);
   }

.SH Example

   
// Run this code

 #include <iostream>
 #include <algorithm>
 #include <utility>
  
 int main()
 {
     int arr [10] = {1,2,3,4,5,6,7,8,9,10};
     int true_arr [5] = {0};
     int false_arr [5] = {0};
  
     std::partition_copy(std::begin(arr), std::end(arr), std::begin(true_arr),std::begin(false_arr),
                         [] (int i) {return i > 5;});
  
     std::cout << "true_arr: ";
     for (auto it = std::begin(true_arr); it != std::end(true_arr); ++it) {
         std::cout << *it << ' ';
     }
     std::cout << '\\n';
  
     std::cout << "false_arr: ";
     for (auto it = std::begin(false_arr); it != std::end(false_arr); ++it) {
         std::cout << *it << ' ';
     }
     std::cout << '\\n';
  
     return 0;
  
 }

.SH Output:

 true_arr: 6 7 8 9 10
 false_arr: 1 2 3 4 5

.SH See also

   partition        divides a range of elements into two groups
                    \fI(function template)\fP 
                    divides elements into two groups while preserving their relative
   stable_partition order
                    \fI(function template)\fP 
   copy             copies a range of elements to a new location
   copy_if          \fI(function template)\fP 
   \fI(C++11)\fP
   remove_copy      copies a range of elements omitting those that satisfy specific
   remove_copy_if   criteria
                    \fI(function template)\fP 
