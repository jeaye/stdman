.TH std::discrete_distribution 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::discrete_distribution \- std::discrete_distribution

.SH Synopsis
   Defined in header <random>
   template< class IntType = int >  \fI(since C++11)\fP
   class discrete_distribution;

   std::discrete_distribution produces random integers on the interval [0, n), where
   the probability of each individual integer i is defined as w
   i/S, that is the weight of the ith integer divided by the sum of all n weights.

   std::discrete_distribution satisfies all requirements of RandomNumberDistribution

.SH Template parameters

             The result type generated by the generator. The effect is undefined if
   IntType - this is not one of short, int, long, long long, unsigned short, unsigned
             int, unsigned long, or unsigned long long.

.SH Member types

   Member type Definition
   result_type IntType
   param_type  the type of the parameter set, see RandomNumberDistribution.

.SH Member functions

   constructor   constructs new distribution
                 \fI(public member function)\fP 
   reset         resets the internal state of the distribution
                 \fI(public member function)\fP 
.SH Generation
   operator()    generates the next random number in the distribution
                 \fI(public member function)\fP 
.SH Characteristics
   probabilities obtains the list of probabilities
                 \fI(public member function)\fP 
   param         gets or sets the distribution parameter object
                 \fI(public member function)\fP 
   min           returns the minimum potentially generated value
                 \fI(public member function)\fP 
   max           returns the maximum potentially generated value
                 \fI(public member function)\fP 

.SH Non-member functions

   operator== compares two distribution objects
   operator!= \fI(function)\fP 
   operator<< performs stream input and output on pseudo-random number distribution
   operator>> \fI(function template)\fP 

.SH Example

   
// Run this code

 #include <iostream>
 #include <map>
 #include <random>
  
 int main()
 {
     std::random_device rd;
     std::mt19937 gen(rd());
     std::discrete_distribution<> d({40, 10, 10, 40});
     std::map<int, int> m;
     for(int n=0; n<10000; ++n) {
         ++m[d(gen)];
     }
     for(auto p : m) {
         std::cout << p.first << " generated " << p.second << " times\\n";
     }
 }

.SH Output:

 0 generated 4028 times
 1 generated 978 times
 2 generated 1012 times
 3 generated 3982 times
