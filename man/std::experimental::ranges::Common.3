.TH std::experimental::ranges::Common 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::experimental::ranges::Common \- std::experimental::ranges::Common

.SH Synopsis
   Defined in header <experimental/ranges/concepts>
   template <class T, class U>

   concept bool Common =
     ranges::Same<ranges::common_type_t<T, U>, ranges::common_type_t<U,
   T>> &&
     ranges::ConvertibleTo<T, ranges::common_type_t<T, U>> &&
     ranges::ConvertibleTo<U, ranges::common_type_t<T, U>> &&
     ranges::CommonReference<                                               (ranges TS)
       std::add_lvalue_reference_t<const T>,
       std::add_lvalue_reference_t<const U>> &&
     ranges::CommonReference<
       std::add_lvalue_reference_t<common_type_t<T, U>>,
       ranges::common_reference_t<
         std::add_lvalue_reference_t<const T>,

         std::add_lvalue_reference_t<const U>>>;

   The concept Common<T, U> specifies that two types T and U share a common type (as
   computed by ranges::common_type_t) to which both can be converted.

   Common<T, U> is satisfied only if, given expressions t and u such that decltype((t))
   is T and decltype((u)) is U,

     * ranges::common_type_t<T, U>(t) is equal to ranges::common_type_t<T, U>(t) if and
       only if t is an equality-preserving expression; and
     * ranges::common_type_t<T, U>(u) is equal to ranges::common_type_t<T, U>(u) if and
       only if u is an equality-preserving expression.

   In other words, the conversion to the common type must not alter the
   equality-preservation property of the original expression.

   Equality preservation

   An expression is equality preserving if it results in equal outputs given equal
   inputs.

     * The inputs to an expression consist of its operands.
     * The outputs of an expression consist of its result and all operands modified by
       the expression (if any).

   Every expression required to be equality preserving is further required to be
   stable: two evaluations of such an expression with the same input objects must have
   equal outputs absent any explicit intervening modification of those input objects.

.SH See also

   common_type      determine the common type of a set of types
                    \fI(class template)\fP 
   common_reference determine the common reference type of a set of types
                    \fI(class template)\fP 
   CommonReference  specifies that two types share a common reference type
                    (concept) 
