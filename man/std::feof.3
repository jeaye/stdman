.TH std::feof 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::feof \- std::feof

.SH Synopsis
   Defined in header <cstdio>
   int feof( std::FILE* stream );

   Checks if the end of the given file stream has been reached.

.SH Parameters

   stream - the file stream to check

.SH Return value

   Nonzero value if the end of the stream has been reached, otherwise 0.

.SH Notes

   This function only reports the stream state as reported by the most recent I/O
   operation, it does not examine the associated data source. For example, if the most
   recent I/O was a std::fgetc, which returned the last byte of a file, std::feof
   returns zero. The next std::fgetc fails and changes the stream state to end-of-file.
   Only then std::feof returns non-zero.

   In typical usage, input stream processing stops on any error; feof and std::ferror
   are then used to distinguish between different error conditions.

.SH Example

   
// Run this code

 #include <cstdio>
 #include <cstdlib>
  
 int main()
 {
     FILE* fp = std::fopen("test.txt", "r");
     if(!fp) {
         std::perror("File opening failed");
         return EXIT_FAILURE;
     }
  
     int c; // note: int, not char, required to handle EOF
     while ((c = std::fgetc(fp)) != EOF) { // standard C I/O file reading loop
        std::putchar(c);
     }
  
     if (std::ferror(fp))
         std::puts("I/O error when reading");
     else if (std::feof(fp))
         std::puts("End of file reached successfully");
  
     std::fclose(fp);
 }

.SH See also

   eof      checks if end-of-file has been reached
            \fI(public member function of std::basic_ios)\fP 
   clearerr clears errors
            \fI(function)\fP 
   perror   displays a character string corresponding of the current error to stderr
            \fI(function)\fP 
   ferror   checks for a file error
            \fI(function)\fP 
   C documentation for
   feof
