.TH std::count,std::count_if 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::count,std::count_if \- std::count,std::count_if

.SH Synopsis
   Defined in header <algorithm>
   template< class InputIt, class T >
                                                                        (until
   typename iterator_traits<InputIt>::difference_type                   C++20)

       count( InputIt first, InputIt last, const T &value );
   template< class InputIt, class T >

   constexpr typename iterator_traits<InputIt>::difference_type         (since
                                                                        C++20)
                 count( InputIt first, InputIt last, const T
   &value );
   template< class ExecutionPolicy, class ForwardIt, class T >

   typename iterator_traits<ForwardIt>::difference_type             \fB(2)\fP (since
                                                                        C++17)
       count( ExecutionPolicy&& policy, ForwardIt first,
   ForwardIt last, const T &value );
   template< class InputIt, class UnaryPredicate >              \fB(1)\fP

   typename iterator_traits<InputIt>::difference_type                           (until
                                                                                C++20)
       count_if( InputIt first, InputIt last, UnaryPredicate p
   );
   template< class InputIt, class UnaryPredicate >

   constexpr typename iterator_traits<InputIt>::difference_type                 (since
                                                                    \fB(3)\fP         C++20)
                 count_if( InputIt first, InputIt last,
   UnaryPredicate p );
   template< class ExecutionPolicy, class ForwardIt, class
   UnaryPredicate >
                                                                                (since
   typename iterator_traits<ForwardIt>::difference_type                 \fB(4)\fP     C++17)

       count_if( ExecutionPolicy&& policy, ForwardIt first,
   ForwardIt last, UnaryPredicate p );

   Returns the number of elements in the range [first, last) satisfying specific
   criteria.

   1) counts the elements that are equal to value.
   3) counts elements for which predicate p returns true.
   2,4) Same as (1,3), but executed according to policy. This overload only
   participates in overload resolution if
   std::is_execution_policy_v<std::decay_t<ExecutionPolicy>> is true

.SH Parameters

   first, last - the range of elements to examine
   value       - the value to search for
   policy      - the execution policy to use. See execution policy for details.
                 unary predicate which returns true for the required elements.

                 The signature of the predicate function should be equivalent to the
                 following:

   p           -  bool pred(const Type &a);

                 The signature does not need to have const &, but the function must not
                 modify the objects passed to it.
                 The type Type must be such that an object of type InputIt can be
                 dereferenced and then implicitly converted to Type. 
.SH Type requirements
   -
   InputIt must meet the requirements of InputIterator.
   -
   ForwardIt must meet the requirements of ForwardIterator.

.SH Return value

   number of elements satisfying the condition.

.SH Complexity

   exactly last - first comparisons / applications of the predicate

.SH Exceptions

   The overloads with a template parameter named ExecutionPolicy report errors as
   follows:

     * If execution of a function invoked as part of the algorithm throws an exception
       and ExecutionPolicy is one of the three standard policies, std::terminate is
       called. For any other ExecutionPolicy, the behavior is implementation-defined.
     * If the algorithm fails to allocate memory, std::bad_alloc is thrown.

.SH Notes

   For the number of elements in the range [first, last) without any additional
   criteria, see std::distance.

.SH Possible implementation

.SH First version
   template<class InputIt, class T>
   typename iterator_traits<InputIt>::difference_type
       count(InputIt first, InputIt last, const T& value)
   {
       typename iterator_traits<InputIt>::difference_type ret = 0;
       for (; first != last; ++first) {
           if (*first == value) {
               ret++;
           }
       }
       return ret;
   }
.SH Second version
   template<class InputIt, class UnaryPredicate>
   typename iterator_traits<InputIt>::difference_type
       count_if(InputIt first, InputIt last, UnaryPredicate p)
   {
       typename iterator_traits<InputIt>::difference_type ret = 0;
       for (; first != last; ++first) {
           if (p(*first)) {
               ret++;
           }
       }
       return ret;
   }

.SH Example

   
// Run this code

 #include <algorithm>
 #include <iostream>
 #include <vector>
  
 int main()
 {
     std::vector<int> v{ 1, 2, 3, 4, 4, 3, 7, 8, 9, 10 };
  
     // determine how many integers in a std::vector match a target value.
     int target1 = 3;
     int target2 = 5;
     int num_items1 = std::count(v.begin(), v.end(), target1);
     int num_items2 = std::count(v.begin(), v.end(), target2);
     std::cout << "number: " << target1 << " count: " << num_items1 << '\\n';
     std::cout << "number: " << target2 << " count: " << num_items2 << '\\n';
  
     // use a lambda expression to count elements divisible by 3.
     int num_items3 = std::count_if(v.begin(), v.end(), [](int i){return i % 3 == 0;});
     std::cout << "number divisible by three: " << num_items3 << '\\n';
 }

.SH Output:

 number: 3 count: 2
 number: 5 count: 0
 number divisible by three: 3

.SH See also

   distance returns the distance between two iterators
            \fI(function)\fP 
