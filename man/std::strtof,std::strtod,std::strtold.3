.TH std::strtof,std::strtod,std::strtold 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::strtof,std::strtod,std::strtold \- std::strtof,std::strtod,std::strtold

.SH Synopsis
   Defined in header <cstdlib>
   float       strtof( const char* str, char** str_end );   \fI(since C++11)\fP
   double      strtod( const char* str, char** str_end );
   long double strtold( const char* str, char** str_end );  \fI(since C++11)\fP

   Interprets a floating point value in a byte string pointed to by str.

   Function discards any whitespace characters (as determined by std::isspace()) until
   first non-whitespace character is found. Then it takes as many characters as
   possible to form a valid floating-point representation and converts them to a
   floating-point value. The valid floating-point value can be one of the following:

     * decimal floating-point expression. It consists of the following parts:

              * (optional) plus or minus sign
              * nonempty sequence of decimal digits optionally containing decimal-point
                character (as determined by the current C locale) (defines significand)
              * (optional) e or E followed with optional minus or plus sign and
                nonempty sequence of decimal digits (defines exponent)

     * binary floating-point expression. It consists of the following parts:

              * (optional) plus or minus sign
              * 0x or 0X
              * nonempty sequence of hexadecimal digits optionally containing a
                decimal-point character (as determined by the current C locale)
                (defines significand)
              * (optional) p or P followed with optional minus or plus sign and
                nonempty sequence of decimal digits (defines exponent)

     * infinity expression. It consists of the following parts:

              * (optional) plus or minus sign
              * INF or INFINITY ignoring case

     * not-a-number expression. It consists of the following parts:

              * (optional) plus or minus sign
              * NAN or NAN(char_sequence) ignoring case of the NAN part. char_sequence
                can only contain digits, Latin letters, and underscores. The result is
                a quiet NaN floating-point value.

     * any other expression that may be accepted by the currently installed C locale

   The functions sets the pointer pointed to by str_end to point to the character past
   the last character interpreted. If str_end is NULL, it is ignored.

.SH Parameters

   str     - pointer to the null-terminated byte string to be interpreted
   str_end - pointer to a pointer to character.

.SH Return value

   Floating point value corresponding to the contents of str on success. If the
   converted value falls out of range of corresponding return type, range error occurs
   and HUGE_VAL, HUGE_VALF or HUGE_VALL is returned. If no conversion can be performed,
   0 is returned and *str_end is set to str.

.SH Example

   
// Run this code

 #include <iostream>
 #include <string>
 #include <cerrno>
 #include <cstdlib>
  
 int main()
 {
     const char* p = "111.11 -2.22 0X1.BC70A3D70A3D7P+6  1.18973e+4932zzz";
     char* end;
     std::cout << "Parsing \\"" << p << "\\":\\n";
     for (double f = std::strtod(p, &end); p != end; f = std::strtod(p, &end))
     {
         std::cout << "'" << std::string(p, end-p) << "' -> ";
         p = end;
         if (errno == ERANGE){
             std::cout << "range error, got ";
             errno = 0;
         }
         std::cout << f << '\\n';
     }
 }

.SH Output:

 Parsing "111.11 -2.22 0X1.BC70A3D70A3D7P+6  1.18973e+4932zzz":
 '111.11' -> 111.11
 ' -2.22' -> -2.22
 ' 0X1.BC70A3D70A3D7P+6' -> 111.11
 '  1.18973e+4932' -> range error, got inf

.SH See also

   atof       converts a byte string to a floating point value
              \fI(function)\fP 
   wcstof     converts a wide string to a floating point value
   wcstod     \fI(function)\fP 
   wcstold
   from_chars converts a character sequence to an integer or floating-point value
   \fI(C++17)\fP    \fI(function)\fP 
   C documentation for
   strtof,
   strtod,
   strtold
