.TH std::is_copy_assignable,std::is_trivially_copy_assignable, 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_copy_assignable,std::is_trivially_copy_assignable, \- std::is_copy_assignable,std::is_trivially_copy_assignable,

.SH Synopsis

   Defined in header <type_traits>
   template< class T >                  \fB(1)\fP \fI(since C++11)\fP
   struct is_copy_assignable;
   template< class T >                  \fB(2)\fP \fI(since C++11)\fP
   struct is_trivially_copy_assignable;
   template< class T >                  \fB(3)\fP \fI(since C++11)\fP
   struct is_nothrow_copy_assignable;

   1) If T is not a referenceable type (i.e., possibly cv-qualified void or a function
   type with a cv-qualifier-seq or a ref-qualifier), provides a member constant value
   equal to false. Otherwise, provides a member constant value equal to
   std::is_assignable<T&, const T&>::value.
   2) Same as 1), but uses std::is_trivially_assignable<T&, const T&>
   2) Same as 1), but uses std::is_nothrow_assignable<T&, const T&>

   T shall be a complete type, (possibly cv-qualified) void, or an array of unknown
   bound. Otherwise, the behavior is undefined.

.SH Member constants

   value    true if T is copy-assignable, false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP
   operator()    returns value
   \fI(C++14)\fP       \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Possible implementation

template< class T>
struct is_copy_assignable
    : std::is_assignable< typename std::add_lvalue_reference<T>::type,
                          typename std::add_lvalue_reference<const T>::type> {};
 
template< class T>
struct is_trivially_copy_assignable
    : std::is_trivially_assignable< typename std::add_lvalue_reference<T>::type,
                                    typename std::add_lvalue_reference<const T>::type> {};
 
template< class T>
struct is_nothrow_copy_assignable
    : std::is_nothrow_assignable< typename std::add_lvalue_reference<T>::type,
                                  typename std::add_lvalue_reference<const T>::type> {};

.SH Notes

   The trait std::is_copy_assignable is less strict than CopyAssignable because it does
   not check the type of the result of the assignment (which, for a CopyAssignable
   type, must be an lvalue of type T) and does not check the semantic requirement that
   the argument expression remains unchanged. It also does not check that T satisfies
   MoveAssignable, which is required of all CopyAssignable types.

.SH Example

   
// Run this code

 #include <iostream>
 #include <utility>
 #include <type_traits>
 struct Foo { int n; };
 int main() {
     std::cout << std::boolalpha
               << "Foo is trivially copy-assignable? "
               << std::is_trivially_copy_assignable<Foo>::value << '\\n'
               << "int[2] is copy-assignable? "
               << std::is_copy_assignable<int[2]>::value << '\\n'
               << "int is nothrow copy-assignable? "
               << std::is_nothrow_copy_assignable<int>::value << '\\n';
 }

.SH Output:

 Foo is trivially copy-assignable? true
 int[2] is copy-assignable? false
 int is nothrow copy-assignable? true

.SH See also

   is_assignable
   is_trivially_assignable      checks if a type has a assignment operator for a
   is_nothrow_assignable        specific argument
   \fI(C++11)\fP                      \fI(class template)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   is_move_assignable
   is_trivially_move_assignable
   is_nothrow_move_assignable   checks if a type has a move assignment operator
   \fI(C++11)\fP                      \fI(class template)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
