.TH std::find_end 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::find_end \- std::find_end

.SH Synopsis
   Defined in header <algorithm>
   template< class ForwardIt1, class ForwardIt2 >

   ForwardIt1 find_end( ForwardIt1 first,
   ForwardIt1 last,                                         (until C++20)

                        ForwardIt2 s_first,
   ForwardIt2 s_last );
   template< class ForwardIt1, class ForwardIt2 >

   constexpr ForwardIt1 find_end( ForwardIt1 first,
   ForwardIt1 last,                                         (since C++20)

                                  ForwardIt2
   s_first, ForwardIt2 s_last );
   template< class ExecutionPolicy, class
   ForwardIt1, class ForwardIt2 >

   ForwardIt1 find_end( ExecutionPolicy&& policy,       \fB(2)\fP \fI(since C++17)\fP
   ForwardIt1 first, ForwardIt1 last,

                        ForwardIt2 s_first,
   ForwardIt2 s_last );
   template< class ForwardIt1, class ForwardIt2,
   class BinaryPredicate >                          \fB(1)\fP

   ForwardIt1 find_end( ForwardIt1 first,                                 (until C++20)
   ForwardIt1 last,

                        ForwardIt2 s_first,
   ForwardIt2 s_last, BinaryPredicate p );
   template< class ForwardIt1, class ForwardIt2,
   class BinaryPredicate >

   constexpr ForwardIt1 find_end( ForwardIt1 first,                       (since C++20)
   ForwardIt1 last,                                     \fB(3)\fP

                                  ForwardIt2
   s_first, ForwardIt2 s_last, BinaryPredicate p );
   template< class ExecutionPolicy, class
   ForwardIt1, class ForwardIt2, class
   BinaryPredicate >

   ForwardIt1 find_end( ExecutionPolicy&& policy,           \fB(4)\fP           \fI(since C++17)\fP
   ForwardIt1 first, ForwardIt1 last,

                        ForwardIt2 s_first,
   ForwardIt2 s_last, BinaryPredicate p );

   Searches for the last subsequence of elements [s_first, s_last) in the range [first,
   last).

   1) Elements are compared using operator==.
   3) Elements are compared using the given binary predicate p.
   2,4) Same as (1,3), but executed according to policy. These overloads do not
   participate in overload resolution unless
   std::is_execution_policy_v<std::decay_t<ExecutionPolicy>> is true

.SH Parameters

   first, last     - the range of elements to examine
   s_first, s_last - the range of elements to search for
   policy          - the execution policy to use. See execution policy for details.
                     binary predicate which returns true if the elements should be
                     treated as equal.

                     The signature of the predicate function should be equivalent to
                     the following:

   p               -  bool pred(const Type1 &a, const Type2 &b);

                     The signature does not need to have const &, but the function must
                     not modify the objects passed to it.
                     The types Type1 and Type2 must be such that objects of types
                     ForwardIt1 and ForwardIt2 can be dereferenced and then implicitly
                     converted to Type1 and Type2 respectively. 
.SH Type requirements
   -
   ForwardIt1 must meet the requirements of ForwardIterator.
   -
   ForwardIt2 must meet the requirements of ForwardIterator.

.SH Return value

   Iterator to the beginning of last subsequence [s_first, s_last) in range [first,
   last).

   If no such subsequence is found, last is returned.                     \fI(until C++11)\fP
   If [s_first, s_last) is empty or if no such subsequence is found, last \fI(since C++11)\fP
   is returned.

.SH Complexity

   Does at most S*(N-S+1) comparisons where S = distance(s_first, s_last) and N =
   distance(first, last).

.SH Exceptions

   The overloads with a template parameter named ExecutionPolicy report errors as
   follows:

     * If execution of a function invoked as part of the algorithm throws an exception
       and ExecutionPolicy is one of the three standard policies, std::terminate is
       called. For any other ExecutionPolicy, the behavior is implementation-defined.
     * If the algorithm fails to allocate memory, std::bad_alloc is thrown.

.SH Possible implementation

.SH First version
   template<class ForwardIt1, class ForwardIt2>
   ForwardIt1 find_end(ForwardIt1 first, ForwardIt1 last,
                       ForwardIt2 s_first, ForwardIt2 s_last)
   {
       if (s_first == s_last)
           return last;
       ForwardIt1 result = last;
       while (true) {
           ForwardIt1 new_result = std::search(first, last, s_first, s_last);
           if (new_result == last) {
               return result;
           } else {
               result = new_result;
               first = result;
               ++first;
           }
       }
       return result;
   }
.SH Second version
   template<class ForwardIt1, class ForwardIt2, class BinaryPredicate>
   ForwardIt1 find_end(ForwardIt1 first, ForwardIt1 last,
                       ForwardIt2 s_first, ForwardIt2 s_last,
                       BinaryPredicate p)
   {
       if (s_first == s_last)
           return last;
       ForwardIt1 result = last;
       while (true) {
           ForwardIt1 new_result = std::search(first, last, s_first, s_last, p);
           if (new_result == last) {
               return result;
           } else {
               result = new_result;
               first = result;
               ++first;
           }
       }
       return result;
   }

.SH Example

   The following code uses find_end() to search for two different sequences of numbers.

   
// Run this code

 #include <algorithm>
 #include <iostream>
 #include <vector>
  
 int main()
 {
     std::vector<int> v{1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4};
     std::vector<int>::iterator result;
  
     std::vector<int> t1{1, 2, 3};
  
     result = std::find_end(v.begin(), v.end(), t1.begin(), t1.end());
     if (result == v.end()) {
         std::cout << "subsequence not found\\n";
     } else {
         std::cout << "last subsequence is at: "
                   << std::distance(v.begin(), result) << "\\n";
     }
  
     std::vector<int> t2{4, 5, 6};
     result = std::find_end(v.begin(), v.end(), t2.begin(), t2.end());
     if (result == v.end()) {
         std::cout << "subsequence not found\\n";
     } else {
         std::cout << "last subsequence is at: "
                   << std::distance(v.begin(), result) << "\\n";
     }
 }

.SH Output:

 last subsequence is at: 8
 subsequence not found

.SH See also

   search        searches for a range of elements
                 \fI(function template)\fP 
   includes      returns true if one set is a subset of another
                 \fI(function template)\fP 
                 finds the first two adjacent items that are equal (or satisfy a given
   adjacent_find predicate)
                 \fI(function template)\fP 
   find
   find_if       finds the first element satisfying specific criteria
   find_if_not   \fI(function template)\fP 
   \fI(C++11)\fP
   find_first_of searches for any one of a set of elements
                 \fI(function template)\fP 
   search_n      searches for a number consecutive copies of an element in a range
                 \fI(function template)\fP 
