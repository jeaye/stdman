.TH std::includes 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::includes \- std::includes

.SH Synopsis
   Defined in header <algorithm>
   template< class InputIt1, class InputIt2 >

   bool includes( InputIt1 first1, InputIt1 last1,          (until C++20)

                  InputIt2 first2, InputIt2 last2
   );
   template< class InputIt1, class InputIt2 >

   constexpr bool includes( InputIt1 first1,
   InputIt1 last1,                                          (since C++20)

                            InputIt2 first2,
   InputIt2 last2 );
   template< class ExecutionPolicy, class
   ForwardIt1, class ForwardIt2 >

   bool includes( ExecutionPolicy&& policy,             \fB(2)\fP \fI(since C++17)\fP
   ForwardIt1 first1, ForwardIt1 last1,

                  ForwardIt2 first2, ForwardIt2
   last2 );
   template< class InputIt1, class InputIt2, class  \fB(1)\fP
   Compare >

   bool includes( InputIt1 first1, InputIt1 last1,                        (until C++20)

                  InputIt2 first2, InputIt2 last2,
   Compare comp );
   template< class InputIt1, class InputIt2, class
   Compare >

   constexpr bool includes( InputIt1 first1,                              (since C++20)
   InputIt1 last1,                                      \fB(3)\fP

                            InputIt2 first2,
   InputIt2 last2, Compare comp );
   template< class ExecutionPolicy, class
   ForwardIt1, class ForwardIt2, class Compare >

   bool includes( ExecutionPolicy&& policy,                 \fB(4)\fP           \fI(since C++17)\fP
   ForwardIt1 first1, ForwardIt1 last1,

                  ForwardIt2 first2, ForwardIt2
   last2, Compare comp );

   Returns true if every element from the sorted range [first2, last2) is found within
   the sorted range [first1, last1). Also returns true if [first2, last2) is empty.

   1) Both ranges must be sorted with operator<.
   3) Both ranges must be sorted with the given comparison function comp.
   2,4) Same as (1,3), but executed according to policy. This overload only
   participates in overload resolution if
   std::is_execution_policy_v<std::decay_t<ExecutionPolicy>> is true

.SH Parameters

   first1, last1 - the sorted range of elements to examine
   first2, last2 - the sorted range of elements to search for
   policy        - the execution policy to use. See execution policy for details.
                   comparison function object (i.e. an object that satisfies the
                   requirements of Compare) which returns true if the first argument
                   is less than (i.e. is ordered before) the second.

                   The signature of the comparison function should be equivalent to the
                   following:
   comp          -
                    bool cmp(const Type1 &a, const Type2 &b);

                   The signature does not need to have const &, but the function object
                   must not modify the objects passed to it.
                   The types Type1 and Type2 must be such that an object of type
                   InputIt can be dereferenced and then implicitly converted to both of
                   them. 
.SH Type requirements
   -
   InputIt1, InputIt2 must meet the requirements of InputIterator.
   -
   ForwardIt1, ForwardIt2 must meet the requirements of ForwardIterator.

.SH Return value

   true if every element from [first2, last2) is a member of [first, last).

.SH Complexity

   At most 2Â·(N[1]+N[2]-1) comparisons, where N[1] = std::distance(first1, last1) and
   N[2] = std::distance(first2, last2).

.SH Exceptions

   The overloads with a template parameter named ExecutionPolicy report errors as
   follows:

     * If execution of a function invoked as part of the algorithm throws an exception
       and ExecutionPolicy is one of the three standard policies, std::terminate is
       called. For any other ExecutionPolicy, the behavior is implementation-defined.
     * If the algorithm fails to allocate memory, std::bad_alloc is thrown.

.SH Possible implementation

.SH First version
   template<class InputIt1, class InputIt2>
   bool includes(InputIt1 first1, InputIt1 last1,
                 InputIt2 first2, InputIt2 last2)
   {
       for (; first2 != last2; ++first1)
       {
           if (first1 == last1 || *first2 < *first1)
               return false;
           if ( !(*first1 < *first2) )
               ++first2;
       }
       return true;
   }
.SH Second version
   template<class InputIt1, class InputIt2>
   bool includes(InputIt1 first1, InputIt1 last1,
                 InputIt2 first2, InputIt2 last2, Compare comp)
   {
       for (; first2 != last2; ++first1)
       {
           if (first1 == last1 || comp(*first2, *first1))
               return false;
           if (!comp(*first1, *first2))
               ++first2;
       }
       return true;
   }

.SH Example

   
// Run this code

 #include <iostream>
 #include <algorithm>
 #include <cctype>
 #include <vector>
  
 int main()
 {
   std::vector<char> v1 {'a', 'b', 'c', 'f', 'h', 'x'};
   std::vector<char> v2 {'a', 'b', 'c'};
   std::vector<char> v3 {'a', 'c'};
   std::vector<char> v4 {'g'};
   std::vector<char> v5 {'a', 'c', 'g'};
  
   for (auto i : v1) std::cout << i << ' ';
   std::cout << "\\nincludes:\\n" << std::boolalpha;
  
   for (auto i : v2) std::cout << i << ' ';
   std::cout << ": " << std::includes(v1.begin(), v1.end(), v2.begin(), v2.end()) << '\\n';
   for (auto i : v3) std::cout << i << ' ';
   std::cout << ": " << std::includes(v1.begin(), v1.end(), v3.begin(), v3.end()) << '\\n';
   for (auto i : v4) std::cout << i << ' ';
   std::cout << ": " << std::includes(v1.begin(), v1.end(), v4.begin(), v4.end()) << '\\n';
   for (auto i : v5) std::cout << i << ' ';
   std::cout << ": " << std::includes(v1.begin(), v1.end(), v5.begin(), v5.end()) << '\\n';
  
   auto cmp_nocase = [](char a, char b) {
     return std::tolower(a) < std::tolower(b);
   };
  
   std::vector<char> v6 {'A', 'B', 'C'};
   for (auto i : v6) std::cout << i << ' ';
   std::cout << ": (case-insensitive) "
             << std::includes(v1.begin(), v1.end(), v6.begin(), v6.end(), cmp_nocase)
             << '\\n';
 }

.SH Output:

 a b c f h x
 includes:
 a b c : true
 a c : true
 g : false
 a c g : false
 A B C : (case-insensitive) true

.SH See also

   set_difference computes the difference between two sets
                  \fI(function template)\fP 
   search         searches for a range of elements
                  \fI(function template)\fP 
