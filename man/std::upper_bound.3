.TH std::upper_bound 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::upper_bound \- std::upper_bound

.SH Synopsis
   Defined in header <algorithm>
   template< class ForwardIt, class T >
   ForwardIt upper_bound( ForwardIt first,                  (until C++20)
   ForwardIt last, const T& value );
   template< class ForwardIt, class T >
   constexpr ForwardIt upper_bound( ForwardIt               (since C++20)
   first, ForwardIt last, const T& value );
   template< class ForwardIt, class T, class
   Compare >                                        \fB(1)\fP                   (until C++20)
   ForwardIt upper_bound( ForwardIt first,
   ForwardIt last, const T& value, Compare comp );
   template< class ForwardIt, class T, class            \fB(2)\fP
   Compare >
   constexpr ForwardIt upper_bound( ForwardIt                             (since C++20)
   first, ForwardIt last, const T& value, Compare
   comp );

   Returns an iterator pointing to the first element in the range [first, last) that is
   greater than value, or last if no such element is found.

   The range [first, last) must be at least partially ordered, i.e. partitioned with
   respect to the expression !(value < element) or !comp(value, element). A
   fully-sorted range meets this criterion.

   The first version uses operator< to compare the elements, the second version uses
   the given comparison function comp.

.SH Parameters

   first, last - the range of elements to examine
   value       - value to compare the elements to
                 binary predicate which returns true if the first argument is less
                 than (i.e. is ordered before) the second.

                 The signature of the predicate function should be equivalent to the
                 following:

   comp        -  bool pred(const Type1 &a, const Type2 &b);

                 The signature does not need to have const &, but the function must not
                 modify the objects passed to it.
                 The type Type1 must be such that an object of type T can be implicitly
                 converted to Type1. The type Type2 must be such that an object of type
                 ForwardIt can be dereferenced and then implicitly converted to Type2.
                 
.SH Type requirements
   -
   ForwardIt must meet the requirements of ForwardIterator.
   -
   Compare must meet the requirements of BinaryPredicate. it is not required to satisfy
   Compare

.SH Return value

   iterator pointing to the first element that is greater than value, or last if no
   such element is found.

.SH Complexity

   The number of comparisons performed is logarithmic in the distance between first and
   last (At most log
   2(last - first) + O(1) comparisons). However, for non-RandomAccessIterators, the
   number of iterator increments is linear.

.SH Possible implementation

.SH First version
   template<class ForwardIt, class T>
   ForwardIt upper_bound(ForwardIt first, ForwardIt last, const T& value)
   {
       ForwardIt it;
       typename std::iterator_traits<ForwardIt>::difference_type count, step;
       count = std::distance(first,last);
    
       while (count > 0) {
           it = first;
           step = count / 2;
           std::advance(it, step);
           if (!(value < *it)) {
               first = ++it;
               count -= step + 1;
           } else count = step;
       }
       return first;
   }
.SH Second version
   template<class ForwardIt, class T, class Compare>
   ForwardIt upper_bound(ForwardIt first, ForwardIt last, const T& value, Compare comp)
   {
       ForwardIt it;
       typename std::iterator_traits<ForwardIt>::difference_type count, step;
       count = std::distance(first,last);
    
       while (count > 0) {
           it = first;
           step = count / 2;
           std::advance(it, step);
           if (!comp(value, *it)) {
               first = ++it;
               count -= step + 1;
           } else count = step;
       }
       return first;
   }

.SH Example

   
// Run this code

 #include <algorithm>
 #include <iostream>
 #include <iterator>
 #include <vector>
  
 int main()
 {
     std::vector<int> data = { 1, 1, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 6 };
  
     auto lower = std::lower_bound(data.begin(), data.end(), 4);
     auto upper = std::upper_bound(data.begin(), data.end(), 4);
  
     std::copy(lower, upper, std::ostream_iterator<int>(std::cout, " "));
 }

.SH Output:

 4 4 4

   Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

     DR    Applied to    Behavior as published               Correct behavior
   LWG 270 C++98      Compare was required to be a only a partitioning is needed;
                      strict weak ordering         heterogeneous comparisons permitted

.SH See also

   equal_range returns range of elements matching a specific key
               \fI(function template)\fP 
   lower_bound returns an iterator to the first element not less than the given value
               \fI(function template)\fP 
   partition   divides a range of elements into two groups
               \fI(function template)\fP 
