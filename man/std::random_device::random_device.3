.TH std::random_device::random_device 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::random_device::random_device \- std::random_device::random_device

.SH Synopsis
   explicit random_device(const std::string& token =                  \fB(1)\fP \fI(since C++11)\fP
   /*implementation-defined*/ );
   random_device(const random_device& ) = delete;                     \fB(2)\fP \fI(since C++11)\fP

   1) Constructs a new std::random_device object, making use of the argument token, if
   provided, in implementation-defined manner.
   2) The copy constructor is deleted: std::random_device is not copyable nor movable.

.SH Exceptions

   Throws an implementation-defined exceptions derived from std::exception on failure.

.SH Notes

   The implementations in libc++ and libstdc++ expect token to be the name of a
   character device that produces random numbers when read from, with the default value
   "/dev/urandom", although where the CPU instruction RDRND is available, libstdc++
   uses that as the default.

.SH Example

   Demonstrates the two commonly available types of std::random_device on Linux

   
// Run this code

 #include <iostream>
 #include <random>
  
 int main()
 {
  
     std::uniform_int_distribution<int> d(0, 10);
  
     std::random_device rd1; // uses RDRND or /dev/urandom
     for(int n = 0; n < 10; ++n)
         std::cout << d(rd1) << ' ';
     std::cout << '\\n';
  
     std::random_device rd2("/dev/random"); // much slower on Linux
     for(int n = 0; n < 10; ++n)
         std::cout << d(rd2) << ' ';
     std::cout << '\\n';
 }

.SH Possible output:

 7 10 7 0 4 4 6 9 4 7
 2 4 10 6 3 2 0 6 3 7
