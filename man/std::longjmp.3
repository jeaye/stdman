.TH std::longjmp 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::longjmp \- std::longjmp

.SH Synopsis
   Defined in header <csetjmp>
   void longjmp( std::jmp_buf env, int status );               \fI(until C++17)\fP
   [[noreturn]] void longjmp( std::jmp_buf env, int status );  \fI(since C++17)\fP

   Loads the execution context env saved by a previous call to setjmp. This function
   does not return. Control is transferred to the call site of the macro setjmp that
   set up env. That setjmp then returns the value, passed as the status.

   If the function that called setjmp has exited, the behavior is undefined (in other
   words, only long jumps up the call stack are allowed)

   No destructors for automatic objects are called. If replacing of std::longjmp with
   throw and setjmp with catch would execute a non-trivial destructor for any automatic
   object, the behavior of such std::longjmp is undefined.

.SH Parameters

   env    - variable referring to the execution state of the program saved by setjmp
   status - the value to return from setjmp. If it is equal to 0, 1 is used instead

.SH Return value

   \fI(none)\fP

.SH Notes

   longjmp is the mechanism used in C to handle unexpected error conditions where the
   function cannot return meaningfully. C++ generally uses exception handling for this
   purpose.

.SH Example

   
// Run this code

 #include <iostream>
 #include <csetjmp>
  
 std::jmp_buf jump_buffer;
  
 [[noreturn]] void a(int count)
 {
     std::cout << "a(" << count << ") called\\n";
     std::longjmp(jump_buffer, count+1);  // setjmp() will return count+1
 }
  
 int main()
 {
     volatile int count = 0; // local variables must be volatile for setjmp
     if (setjmp(jump_buffer) != 9) {
         a(count++);  // This will cause setjmp() to exit
     }
 }

.SH Output:

 a\fB(0)\fP called
 a\fB(1)\fP called
 a\fB(2)\fP called
 a\fB(3)\fP called
 a\fB(4)\fP called
 a\fB(5)\fP called
 a\fB(6)\fP called
 a\fB(7)\fP called
 a\fB(8)\fP called

.SH See also

   setjmp saves the context
          \fI(function macro)\fP 
   C documentation for
   longjmp
