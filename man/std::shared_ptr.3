.TH std::shared_ptr 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::shared_ptr \- std::shared_ptr

.SH Synopsis
   Defined in header <memory>
   template< class T > class shared_ptr;  \fI(since C++11)\fP

   std::shared_ptr is a smart pointer that retains shared ownership of an object
   through a pointer. Several shared_ptr objects may own the same object. The object is
   destroyed and its memory deallocated when either of the following happens:

     * the last remaining shared_ptr owning the object is destroyed;
     * the last remaining shared_ptr owning the object is assigned another pointer via
       operator= or reset().

   The object is destroyed using delete-expression or a custom deleter that is supplied
   to shared_ptr during construction.

   A shared_ptr can share ownership of an object while storing a pointer to another
   object. This feature can be used to point to member objects while owning the object
   they belong to. The stored pointer is the one accessed by get(), the dereference and
   the comparison operators. The managed pointer is the one passed to the deleter when
   use count reaches zero.

   A shared_ptr may also own no objects, in which case it is called empty (an empty
   shared_ptr may have a non-null stored pointer if the aliasing constructor was used
   to create it).

   All specializations of shared_ptr meet the requirements of CopyConstructible,
   CopyAssignable, and LessThanComparable and are contextually convertible to bool.

   All member functions (including copy constructor and copy assignment) can be called
   by multiple threads on different instances of shared_ptr without additional
   synchronization even if these instances are copies and share ownership of the same
   object. If multiple threads of execution access the same shared_ptr without
   synchronization and any of those accesses uses a non-const member function of
   shared_ptr then a data race will occur; the shared_ptr overloads of atomic functions
   can be used to prevent the data race.

.SH Member types

   Member type             Definition
   element_type            T                       \fI(until C++17)\fP
                           std::remove_extent_t<T> \fI(since C++17)\fP
   weak_type \fI(since C++17)\fP std::weak_ptr<T>

.SH Member functions

   constructor           constructs new shared_ptr
                         \fI(public member function)\fP 
   destructor            destructs the owned object if no more shared_ptrs link to it
                         \fI(public member function)\fP 
   operator=             assigns the shared_ptr
                         \fI(public member function)\fP 
.SH Modifiers
   reset                 replaces the managed object
                         \fI(public member function)\fP 
   swap                  swaps the managed objects
                         \fI(public member function)\fP 
.SH Observers
   get                   returns the stored pointer
                         \fI(public member function)\fP 
   operator*             dereferences the stored pointer
   operator->            \fI(public member function)\fP 
   operator[]            provides indexed access to the stored array
   \fI(C++17)\fP               \fI(public member function)\fP 
                         returns the number of shared_ptr objects referring to the same
   use_count             managed object
                         \fI(public member function)\fP 
   unique                checks whether the managed object is managed only by the
   (deprecated in C++17) current shared_ptr instance
                         \fI(public member function)\fP 
   operator bool         checks if the stored pointer is not null
                         \fI(public member function)\fP 
   owner_before          provides owner-based ordering of shared pointers
                         \fI(public member function)\fP 

.SH Non-member functions

   make_shared                creates a shared pointer that manages a new object
                              \fI(function template)\fP 
                              creates a shared pointer that manages a new object
   allocate_shared            allocated using an allocator
                              \fI(function template)\fP 
   static_pointer_cast
   dynamic_pointer_cast       applies static_cast, dynamic_cast, const_cast, or
   const_pointer_cast         reinterpret_cast to the stored pointer
   reinterpret_pointer_cast   \fI(function template)\fP 
   \fI(C++17)\fP
   get_deleter                returns the deleter of specified type, if owned
                              \fI(function template)\fP 
   operator==
   operator!=
   operator<                  compares with another shared_ptr or with nullptr
   operator<=                 \fI(function template)\fP 
   operator>
   operator>=
                              outputs the value of the stored pointer to an output
   operator<<                 stream
                              \fI(function template)\fP 
   std::swap(std::shared_ptr) specializes the std::swap algorithm
   \fI(C++11)\fP                    \fI(function template)\fP 

   std::atomic_is_lock_free(std::shared_ptr)
   std::atomic_load(std::shared_ptr)
   std::atomic_load_explicit(std::shared_ptr)
   std::atomic_store(std::shared_ptr)                            specializes atomic
   std::atomic_store_explicit(std::shared_ptr)                   operations for
   std::atomic_exchange(std::shared_ptr)                         std::shared_ptr
   std::atomic_exchange_explicit(std::shared_ptr)                \fI(function template)\fP
   std::atomic_compare_exchange_weak(std::shared_ptr)            
   std::atomic_compare_exchange_strong(std::shared_ptr)
   std::atomic_compare_exchange_weak_explicit(std::shared_ptr)
   std::atomic_compare_exchange_strong_explicit(std::shared_ptr)
   (deprecated in C++20)

.SH Helper classes

   std::atomic<std::shared_ptr> atomic shared pointer
   (C++20)                      \fI(class template specialization)\fP 
   std::hash<std::shared_ptr>   hash support for std::shared_ptr
   \fI(C++11)\fP                      \fI(class template specialization)\fP 

   Deduction guides\fI(since C++17)\fP

.SH Notes

   The ownership of an object can only be shared with another shared_ptr by copy
   constructing or copy assigning its value to another shared_ptr. Constructing a new
   shared_ptr using the raw underlying pointer owned by another shared_ptr leads to
   undefined behavior.

   std::shared_ptr may be used with an incomplete type T. However, the constructor from
   a raw pointer (template<class Y> shared_ptr(Y*)) and the template<class Y> void
   reset(Y*) member function may only be called with a pointer to a complete type (note
   that std::unique_ptr may be constructed from a raw pointer to an incomplete type).

   The T in std::shared_ptr<T> may be a function type: in this case it manages a
   pointer to function, rather than an object pointer. This is sometimes used to keep a
   dynamic library or a plugin loaded as long as any of its functions are referenced:

 void del(void(*)()) {}
 void fun() {}
 int main(){
   std::shared_ptr<void()> ee(fun, del);
   (*ee)();
 }

.SH Implementation notes

   In a typical implementation, std::shared_ptr holds only two pointers:

     * the stored pointer (one returned by get());
     * a pointer to control block.

   The control block is a dynamically-allocated object that holds:

     * either a pointer to the managed object or the managed object itself;
     * the deleter (type-erased);
     * the allocator (type-erased);
     * the number of shared_ptrs that own the managed object;
     * the number of weak_ptrs that refer to the managed object.

   When shared_ptr is created by calling std::make_shared or std::allocate_shared, the
   memory for both the control block and the managed object is created with a single
   allocation. The managed object is constructed in-place in a data member of the
   control block. When shared_ptr is created via one of the shared_ptr constructors,
   the managed object and the control block must be allocated separately. In this case,
   the control block stores a pointer to the managed object.

   The pointer held by the shared_ptr directly is the one returned by get(), while the
   pointer/object held by the control block is the one that will be deleted when the
   number of shared owners reaches zero. These pointers are not necessarily equal.

   The destructor of shared_ptr decrements the number of shared owners of the control
   block. If that counter reaches zero, the control block calls the destructor of the
   managed object. The control block does not deallocate itself until the std::weak_ptr
   counter reaches zero as well.

   In practical implementations, the number of weak pointers may be incremented if
   there is a shared pointer to the same control block.

   To satisfy thread safety requirements, the reference counters are typically
   incremented using an equivalent of std::atomic::fetch_add with
   std::memory_order_relaxed (decrementing requires stronger ordering to safely destroy
   the control block).

.SH Example

   
// Run this code

 #include <iostream>
 #include <memory>
 #include <thread>
 #include <chrono>
 #include <mutex>
  
 struct Base
 {
     Base() { std::cout << "  Base::Base()\\n"; }
     // Note: non-virtual destructor is OK here
     ~Base() { std::cout << "  Base::~Base()\\n"; }
 };
  
 struct Derived: public Base
 {
     Derived() { std::cout << "  Derived::Derived()\\n"; }
     ~Derived() { std::cout << "  Derived::~Derived()\\n"; }
 };
  
 void thr(std::shared_ptr<Base> p)
 {
     std::this_thread::sleep_for(std::chrono::seconds(1));
     std::shared_ptr<Base> lp = p; // thread-safe, even though the
                                   // shared use_count is incremented
     {
         static std::mutex io_mutex;
         std::lock_guard<std::mutex> lk(io_mutex);
         std::cout << "local pointer in a thread:\\n"
                   << "  lp.get() = " << lp.get()
                   << ", lp.use_count() = " << lp.use_count() << '\\n';
     }
 }
  
 int main()
 {
     std::shared_ptr<Base> p = std::make_shared<Derived>();
  
     std::cout << "Created a shared Derived (as a pointer to Base)\\n"
               << "  p.get() = " << p.get()
               << ", p.use_count() = " << p.use_count() << '\\n';
     std::thread t1(thr, p), t2(thr, p), t3(thr, p);
     p.reset(); // release ownership from main
     std::cout << "Shared ownership between 3 threads and released\\n"
               << "ownership from main:\\n"
               << "  p.get() = " << p.get()
               << ", p.use_count() = " << p.use_count() << '\\n';
     t1.join(); t2.join(); t3.join();
     std::cout << "All threads completed, the last one deleted Derived\\n";
 }

.SH Possible output:

 Base::Base()
   Derived::Derived()
 Created a shared Derived (as a pointer to Base)
   p.get() = 0xc99028, p.use_count() = 1
 Shared ownership between 3 threads and released
 ownership from main:
   p.get() = (nil), p.use_count() = 0
 local pointer in a thread:
   lp.get() = 0xc99028, lp.use_count() = 3
 local pointer in a thread:
   lp.get() = 0xc99028, lp.use_count() = 4
 local pointer in a thread:
   lp.get() = 0xc99028, lp.use_count() = 2
   Derived::~Derived()
   Base::~Base()
 All threads completed, the last one deleted Derived
