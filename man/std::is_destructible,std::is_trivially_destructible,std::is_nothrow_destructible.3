.TH std::is_destructible,std::is_trivially_destructible,std::is_nothrow_destructible 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_destructible,std::is_trivially_destructible,std::is_nothrow_destructible \- std::is_destructible,std::is_trivially_destructible,std::is_nothrow_destructible

.SH Synopsis
   Defined in header <type_traits>
   template< class T >               \fB(1)\fP \fI(since C++11)\fP
   struct is_destructible;
   template< class T >               \fB(2)\fP \fI(since C++11)\fP
   struct is_trivially_destructible;
   template< class T >               \fB(3)\fP \fI(since C++11)\fP
   struct is_nothrow_destructible;

   1) If an imaginary struct containing a member object of type T has a
   non-deleted destructor, provides the member constant value equal true. \fI(until C++14)\fP
   For any other type, value is false.
   1) If T is a reference type, provides the member constant value equal
   true

   If T is an incomplete type (including void) or a function type, value
   equals false.                                                          \fI(since C++14)\fP

   If T is an object type, then, for the type U equal
   std::remove_all_extents<T>::type, if the expression
   std::declval<U&>().~U() is well-formed in unevaluated context, value
   equals true. Otherwise, value equals false.

   2) same as 1), and additionally std::remove_all_extents<T>::type is either a
   non-class type or a class type with a trivial destructor.

   3) same as 1), but the destructor is noexcept.

   T shall be a complete type, (possibly cv-qualified) void, or an array of unknown
   bound. Otherwise, the behavior is undefined.

.SH Member constants

   value    true if T is destructible, false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP
   operator()    returns value
   \fI(C++14)\fP       \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Notes

   Because the C++ program terminates if a destructor throws an exception during stack
   unwinding (which usually cannot be predicted), all practical destructors are
   non-throwing even if they are not declared noexcept. All destructors found in the
   C++ standard library are non-throwing.

   Storage occupied by trivially destructible objects may be reused without calling the
   destructor.

.SH Example

   
// Run this code

 #include <iostream>
 #include <string>
 #include <type_traits>
 struct Foo {
    std::string str;
    ~Foo() noexcept {};
 };
 struct Bar {
     ~Bar() = default;
 };
 int main() {
     std::cout << std::boolalpha
               << "std::string is destructible? "
               << std::is_destructible<std::string>::value << '\\n'
               << "Foo is nothrow destructible? "
               << std::is_nothrow_destructible<Foo>::value << '\\n'
               << "Bar is trivally destructible? "
               << std::is_trivially_destructible<Bar>::value << '\\n';
 }

.SH Output:

 std::string is destructible? true
 Foo is nothrow destructible? true
 Bar is trivally destructible? true

.SH See also

   is_constructible
   is_trivially_constructible
   is_nothrow_constructible   checks if a type has a constructor for specific arguments
   \fI(C++11)\fP                    \fI(class template)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   has_virtual_destructor     checks if a type has a virtual destructor
   \fI(C++11)\fP                    \fI(class template)\fP 
