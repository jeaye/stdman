.TH std::swap_ranges 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::swap_ranges \- std::swap_ranges

.SH Synopsis
   Defined in header <algorithm>
   template< class ForwardIt1, class ForwardIt2 >
   ForwardIt2 swap_ranges( ForwardIt1 first1, ForwardIt1 last1,       \fB(1)\fP
   ForwardIt2 first2 );
   template< class ExecutionPolicy, class ForwardIt1, class
   ForwardIt2 >                                                       \fB(2)\fP \fI(since C++17)\fP
   ForwardIt2 swap_ranges( ExecutionPolicy&& policy, ForwardIt1
   first1, ForwardIt1 last1, ForwardIt2 first2 );

   1) Exchanges elements between range [first1, last1) and another range starting at
   first2.
   2) Same as \fB(1)\fP, but executed according to policy. This overload does not participate
   in overload resolution unless
   std::is_execution_policy_v<std::decay_t<ExecutionPolicy>> is true

.SH Parameters

   first1, last1      -     the first range of elements to swap
   first2             -     beginning of the second range of elements to swap
   policy             -     the execution policy to use. See execution policy for
                            details.
.SH Type requirements
   -
   ForwardIt1, ForwardIt2 must meet the requirements of ForwardIterator.
   -
   The types of dereferenced ForwardIt1 and ForwardIt2 must meet the requirements of
   Swappable

.SH Return value

   Iterator to the element past the last element exchanged in the range beginning with
   first2.

.SH Exceptions

   The overload with a template parameter named ExecutionPolicy reports errors as
   follows:

     * If execution of a function invoked as part of the algorithm throws an exception
       and ExecutionPolicy is one of the three standard policies, std::terminate is
       called. For any other ExecutionPolicy, the behavior is implementation-defined.
     * If the algorithm fails to allocate memory, std::bad_alloc is thrown.

.SH Possible implementation

   template<class ForwardIt1, class ForwardIt2>
   ForwardIt2 swap_ranges(ForwardIt1 first1,
                                ForwardIt1 last1,
                                ForwardIt2 first2)
   {
       while (first1 != last1) {
           std::iter_swap(first1++, first2++);
       }
       return first2;
   }

.SH Example

   Demonstrates swapping of subranges from different containers

   
// Run this code

 #include <algorithm>
 #include <list>
 #include <vector>
 #include <iostream>
 int main()
 {
     std::vector<int> v = {1, 2, 3, 4, 5};
     std::list<int> l = {-1, -2, -3, -4, -5};
  
     std::swap_ranges(v.begin(), v.begin()+3, l.begin());
  
     for(int n : v)
        std::cout << n << ' ';
     std::cout << '\\n';
     for(int n : l)
        std::cout << n << ' ';
     std::cout << '\\n';
 }

.SH Output:

 -1 -2 -3 4 5
 1 2 3 -4 -5

.SH Complexity

   linear in the distance between first and last

.SH See also

   iter_swap swaps the elements pointed to by two iterators
             \fI(function template)\fP 
   swap      swaps the values of two objects
             \fI(function template)\fP 
