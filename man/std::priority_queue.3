.TH std::priority_queue 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::priority_queue \- std::priority_queue

.SH Synopsis
   Defined in header <queue>
   template<

       class T,
       class Container = std::vector<T>,
       class Compare = std::less<typename Container::value_type>

   > class priority_queue;

   A priority queue is a container adaptor that provides constant time lookup of the
   largest (by default) element, at the expense of logarithmic insertion and
   extraction.

   A user-provided Compare can be supplied to change the ordering, e.g. using
   std::greater<T> would cause the smallest element to appear as the top().

   Working with a priority_queue is similar to managing a heap in some random access
   container, with the benefit of not being able to accidentally invalidate the heap.

.SH Template parameters

               The type of the stored elements.
   T         - The behavior is undefined if T is not the same type as
               Container::value_type.
               \fI(since C++17)\fP
               The type of the underlying container to use to store the elements. The
               container must satisfy the requirements of SequenceContainer, and its
               iterators must satisfy the requirements of RandomAccessIterator.
               Additionally, it must provide the following functions with the usual
               semantics:
   Container -
                 * front()
                 * push_back()
                 * pop_back()

               The standard containers std::vector and std::deque satisfy these
               requirements.
   Compare   - A Compare type providing a strict weak ordering.

   Note that the Compare parameter is defined such that it returns true if its first
   argument comes before its second argument in a weak ordering. But because the
   priority queue outputs largest elements first, the elements that "come before" are
   actually output last. That is, the front of the queue contains the "last" element
   according to the weak ordering imposed by Compare.

.SH Member types

   Member type           Definition
   container_type        Container 
   value_compare \fI(C++17)\fP Compare
   value_type            Container::value_type 
   size_type             Container::size_type 
   reference             Container::reference 
   const_reference       Container::const_reference 

.SH Member functions

   constructor   constructs the priority_queue
                 \fI(public member function)\fP 
   destructor    destructs the priority_queue
                 \fI(public member function)\fP 
   operator=     assigns values to the container adaptor
                 \fI(public member function)\fP 
.SH Element access
   top           accesses the top element
                 \fI(public member function)\fP 
.SH Capacity
   empty         checks whether the underlying container is empty
                 \fI(public member function)\fP 
   size          returns the number of elements
                 \fI(public member function)\fP 
.SH Modifiers
   push          inserts element and sorts the underlying container
                 \fI(public member function)\fP 
   emplace       constructs element in-place and sorts the underlying container
   \fI(C++11)\fP       \fI(public member function)\fP 
   pop           removes the top element
                 \fI(public member function)\fP 
   swap          swaps the contents
                 \fI(public member function)\fP 
.SH Member objects
   Container c   the underlying container
                 \fI(protected member object)\fP 
   Compare comp  the comparison function object
                 \fI(protected member object)\fP

.SH Non-member functions

   std::swap(std::priority_queue) specializes the std::swap algorithm
                                  \fI(function template)\fP 

.SH Helper classes

   std::uses_allocator<std::priority_queue> specializes the std::uses_allocator type
   \fI(C++11)\fP                                  trait
                                            \fI(function template)\fP 

   Deduction guides\fI(since C++17)\fP

.SH Example

   
// Run this code

 #include <functional>
 #include <queue>
 #include <vector>
 #include <iostream>
  
 template<typename T> void print_queue(T& q) {
     while(!q.empty()) {
         std::cout << q.top() << " ";
         q.pop();
     }
     std::cout << '\\n';
 }
  
 int main() {
     std::priority_queue<int> q;
  
     for(int n : {1,8,5,6,3,4,0,9,7,2})
         q.push(n);
  
     print_queue(q);
  
     std::priority_queue<int, std::vector<int>, std::greater<int> > q2;
  
     for(int n : {1,8,5,6,3,4,0,9,7,2})
         q2.push(n);
  
     print_queue(q2);
  
     // Using lambda to compare elements.
     auto cmp = [](int left, int right) { return (left ^ 1) < (right ^ 1);};
     std::priority_queue<int, std::vector<int>, decltype(cmp)> q3(cmp);
  
     for(int n : {1,8,5,6,3,4,0,9,7,2})
         q3.push(n);
  
     print_queue(q3);
  
 }

.SH Output:

 9 8 7 6 5 4 3 2 1 0
 0 1 2 3 4 5 6 7 8 9
 8 9 6 7 4 5 2 3 0 1

   Hidden category:

     * Pages with unreviewed LWG DR marker
