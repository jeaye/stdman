.TH std::conditional 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::conditional \- std::conditional

.SH Synopsis
   Defined in header <type_traits>
   template< bool B, class T, class F >  \fI(since C++11)\fP
   struct conditional;

   Provides member typedef type, which is defined as T if B is true at compile time, or
   as F if B is false.

.SH Member types

   Member type Definition
   type        T if B == true, F if B == false

.SH Helper types

   template< bool B, class T, class F >                      \fI(since C++14)\fP
   using conditional_t = typename conditional<B,T,F>::type;

.SH Possible implementation

   template<bool B, class T, class F>
   struct conditional { typedef T type; };
    
   template<class T, class F>
   struct conditional<false, T, F> { typedef F type; };

.SH Example

   
// Run this code

 #include <iostream>
 #include <type_traits>
 #include <typeinfo>
  
 int main()
 {
     typedef std::conditional<true, int, double>::type Type1;
     typedef std::conditional<false, int, double>::type Type2;
     typedef std::conditional<sizeof(int) >= sizeof(double), int, double>::type Type3;
  
     std::cout << typeid(Type1).name() << '\\n';
     std::cout << typeid(Type2).name() << '\\n';
     std::cout << typeid(Type3).name() << '\\n';
 }

.SH Possible output:

 int
 double
 double

.SH See also

   enable_if hides a function overload or template specialization based on compile-time
   \fI(C++11)\fP   boolean
             \fI(class template)\fP 
