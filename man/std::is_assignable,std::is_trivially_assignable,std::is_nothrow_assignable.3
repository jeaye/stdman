.TH std::is_assignable,std::is_trivially_assignable,std::is_nothrow_assignable 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_assignable,std::is_trivially_assignable,std::is_nothrow_assignable \- std::is_assignable,std::is_trivially_assignable,std::is_nothrow_assignable

.SH Synopsis
   Defined in header <type_traits>
   template< class T, class U >    \fB(1)\fP \fI(since C++11)\fP
   struct is_assignable;
   template< class T, class U >    \fB(2)\fP \fI(since C++11)\fP
   struct is_trivially_assignable;
   template< class T, class U >    \fB(3)\fP \fI(since C++11)\fP
   struct is_nothrow_assignable;

   1) If the expression std::declval<T>() = std::declval<U>() is well-formed in
   unevaluated context, provides the member constant value equal true. Otherwise, value
   is false. Access checks are performed as if from a context unrelated to either type.
   2) same as \fB(1)\fP, but the evaluation of the assignment expression will not call any
   operation that is not trivial. For the purposes of this check, a call to
   std::declval is considered trivial and not considered an odr-use of std::declval.
   3) same as \fB(1)\fP, but the evaluation of the assignment expression will not call any
   operation that is not noexcept.

   T and U shall each be a complete type, (possibly cv-qualified) void, or an array of
   unknown bound. Otherwise, the behavior is undefined.

.SH Member constants

   value    true if T is assignable from U , false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP
   operator()    returns value
   \fI(C++14)\fP       \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Notes

   This trait does not check anything outside the immediate context of the assignment
   expression: if the use of T or U would trigger template specializations, generation
   of implicitly-defined special member functions etc, and those have errors, the
   actual assignment may not compile even if std::is_assignable<T,U>::value compiles
   and evaluates to true.

.SH Example

   
// Run this code

 #include <iostream>
 #include <string>
 #include <type_traits>
 struct Ex1 { int n; };
 int main() {
     std::cout << std::boolalpha
               << "int is assignable from int? "
               << std::is_assignable<int, int>::value << '\\n' // 1 = 1; wouldn't compile
               << "int& is assignable from int? "
               << std::is_assignable<int&, int>::value << '\\n' // int a; a = 1; works
               << "int is assignable from double? "
               << std::is_assignable<int, double>::value << '\\n'
               << "int& is nothrow assignable from double? "
               << std::is_nothrow_assignable<int&, double>::value << '\\n'
               << "string is assignable from double? "
               << std::is_assignable<std::string, double>::value << '\\n'
               << "Ex1& is trivially assignable from const Ex1&? "
               << std::is_trivially_assignable<Ex1&, const Ex1&>::value << '\\n';
 }

.SH Output:

 int is assignable from int? false
 int& is assignable from int? true
 int is assignable from double? false
 int& is nothrow assignable from double? true
 string is assignable from double? true
 Ex1& is trivially assignable from const Ex1&? true

.SH See also

   is_copy_assignable
   is_trivially_copy_assignable
   is_nothrow_copy_assignable   checks if a type has a copy assignment operator
   \fI(C++11)\fP                      \fI(class template)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   is_move_assignable
   is_trivially_move_assignable
   is_nothrow_move_assignable   checks if a type has a move assignment operator
   \fI(C++11)\fP                      \fI(class template)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
