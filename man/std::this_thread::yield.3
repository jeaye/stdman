.TH std::this_thread::yield 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::this_thread::yield \- std::this_thread::yield

.SH Synopsis
   Defined in header <thread>
   void yield() noexcept;      \fI(since C++11)\fP

   Provides a hint to the implementation to reschedule the execution of threads,
   allowing other threads to run.

.SH Parameters

   \fI(none)\fP

.SH Return value

   \fI(none)\fP

.SH Notes

   The exact behavior of this function depends on the implementation, in particular on
   the mechanics of the OS scheduler in use and the state of the system. For example, a
   first-in-first-out realtime scheduler (SCHED_FIFO in Linux) would suspend the
   current thread and put it on the back of the queue of the same-priority threads that
   are ready to run (and if there are no other threads at the same priority, yield has
   no effect).

.SH Example

   
// Run this code

 #include <iostream>
 #include <chrono>
 #include <thread>
  
 // "busy sleep" while suggesting that other threads run
 // for a small amount of time
 void little_sleep(std::chrono::microseconds us)
 {
     auto start = std::chrono::high_resolution_clock::now();
     auto end = start + us;
     do {
         std::this_thread::yield();
     } while (std::chrono::high_resolution_clock::now() < end);
 }
  
 int main()
 {
     auto start = std::chrono::high_resolution_clock::now();
  
     little_sleep(std::chrono::microseconds(100));
  
     auto elapsed = std::chrono::high_resolution_clock::now() - start;
     std::cout << "waited for "
               << std::chrono::duration_cast<std::chrono::microseconds>(elapsed).count()
               << " microseconds\\n";
 }

.SH Possible output:

 waited for 128 microseconds

.SH See also

   C documentation for
   thrd_yield
