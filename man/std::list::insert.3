.TH std::list::insert 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::list::insert \- std::list::insert

.SH Synopsis
   iterator insert( iterator pos, const T& value );             (until
                                                                C++11)
   iterator insert( const_iterator pos, const T& value          (since
   );                                                           C++11)
   iterator insert( const_iterator pos, T&& value );        \fB(2)\fP (since
                                                                C++11)
   void insert( iterator pos, size_type count, const T&                 (until
   value );                                                             C++11)
   iterator insert( const_iterator pos, size_type       \fB(1)\fP             (since
   count, const T& value );                                             C++11)
   template< class InputIt >                                                    (until
   void insert( iterator pos, InputIt first, InputIt        \fB(3)\fP                 C++11)
   last);
   template< class InputIt >                                    \fB(4)\fP             (since
   iterator insert( const_iterator pos, InputIt first,                          C++11)
   InputIt last );
   iterator insert( const_iterator pos,                                 \fB(5)\fP     (since
   std::initializer_list<T> ilist );                                            C++11)

   Inserts elements at the specified location in the container.

   1-2) inserts value before pos
   3) inserts count copies of the value before pos
   4) inserts elements from range [first, last) before pos.

   This overload has the same effect as overload \fB(3)\fP if InputIt is an     \fI(until C++11)\fP
   integral type.
   This overload only participates in overload resolution if InputIt      \fI(since C++11)\fP
   qualifies as InputIterator, to avoid ambiguity with the overload \fB(3)\fP.

   The behavior is undefined if first and last are iterators into *this.
   5) inserts elements from initializer list ilist before pos.

   No iterators or references are invalidated.

.SH Parameters

   pos         - iterator before which the content will be inserted. pos may be the
                 end() iterator
   value       - element value to insert
   first, last - the range of elements to insert, can't be iterators into container for
                 which insert is called
   ilist       - initializer list to insert the values from
.SH Type requirements
   -
   T must meet the requirements of CopyInsertable in order to use overload \fB(1)\fP.
   -
   T must meet the requirements of MoveInsertable in order to use overload \fB(2)\fP.
   -
   T must meet the requirements of CopyAssignable and CopyInsertable in order to use
   overload \fB(3)\fP.
   -
   T must meet the requirements of EmplaceConstructible in order to use overload (4,5).

.SH Return value

   1-2) Iterator pointing to the inserted value
   3) Iterator pointing to the first element inserted, or pos if count==0.
   4) Iterator pointing to the first element inserted, or pos if first==last.
   5) Iterator pointing to the first element inserted, or pos if ilist is empty.

.SH Complexity

   1-2) Constant.
   3) Linear in count
   4) Linear in std::distance(first, last)
   5) Linear in ilist.size()

.SH Exceptions

   If an exception is thrown, there are no effects \fI(strong exception guarantee)\fP.

.SH See also

   emplace    constructs element in-place
   \fI(C++11)\fP    \fI(public member function)\fP 
   push_front inserts an element to the beginning
              \fI(public member function)\fP 
   push_back  adds an element to the end
              \fI(public member function)\fP 
