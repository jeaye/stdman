.TH std::operator+(std::basic_string) 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::operator+(std::basic_string) \- std::operator+(std::basic_string)

.SH Synopsis
   template< class CharT, class Traits, class Alloc >

       basic_string<CharT,Traits,Alloc>                              \fB(1)\fP
           operator+( const basic_string<CharT,Traits,Alloc>& lhs,

                      const basic_string<CharT,Traits,Alloc>& rhs );
   template< class CharT, class Traits, class Alloc >

       basic_string<CharT,Traits,Alloc>                              \fB(2)\fP
           operator+( const CharT* lhs,

                      const basic_string<CharT,Traits,Alloc>& rhs );
   template< class CharT, class Traits, class Alloc >

       basic_string<CharT,Traits,Alloc>                              \fB(3)\fP
           operator+( CharT lhs,

                      const basic_string<CharT,Traits,Alloc>& rhs );
   template< class CharT, class Traits, class Alloc >

       basic_string<CharT,Traits,Alloc>                              \fB(4)\fP
           operator+( const basic_string<CharT,Traits,Alloc>& lhs,

                      const CharT* rhs );
   template<class CharT, class Traits, class Alloc>

       basic_string<CharT,Traits,Alloc>                              \fB(5)\fP
           operator+( const basic_string<CharT,Traits,Alloc>& lhs,

                      CharT rhs );
   template< class CharT, class Traits, class Alloc >

       basic_string<CharT,Traits,Alloc>                              \fB(6)\fP  \fI(since C++11)\fP
           operator+( basic_string<CharT,Traits,Alloc>&& lhs,

                      const basic_string<CharT,Traits,Alloc>& rhs );
   template< class CharT, class Traits, class Alloc >

       basic_string<CharT,Traits,Alloc>                              \fB(7)\fP  \fI(since C++11)\fP
           operator+( const basic_string<CharT,Traits,Alloc>& lhs,

                      basic_string<CharT,Traits,Alloc>&& rhs );
   template< class CharT, class Traits, class Alloc >

       basic_string<CharT,Traits,Alloc>                              \fB(8)\fP  \fI(since C++11)\fP
           operator+( basic_string<CharT,Traits,Alloc>&& lhs,

                      basic_string<CharT,Traits,Alloc>&& rhs );
   template< class CharT, class Traits, class Alloc >

       basic_string<CharT,Traits,Alloc>                              \fB(9)\fP  \fI(since C++11)\fP
           operator+(const CharT* lhs,

                     basic_string<CharT,Traits,Alloc>&& rhs );
   template< class CharT, class Traits, class Alloc >

       basic_string<CharT,Traits,Alloc>                              \fB(10)\fP \fI(since C++11)\fP
           operator+( CharT lhs,

                      basic_string<CharT,Traits,Alloc>&& rhs );
   template< class CharT, class Traits, class Alloc >

       basic_string<CharT,Traits,Alloc>                              \fB(11)\fP \fI(since C++11)\fP
           operator+( basic_string<CharT,Traits,Alloc>&& lhs,

                      const CharT* rhs );
   template< class CharT, class Traits, class Alloc >

       basic_string<CharT,Traits,Alloc>                              \fB(12)\fP \fI(since C++11)\fP
           operator+( basic_string<CharT,Traits,Alloc>&& lhs,

                      CharT rhs );

   Returns a string containing characters from lhs followed by the characters from rhs.

.SH Parameters

   lhs - string, character, or pointer to the first character in a null-terminated
         array
   rhs - string, character, or pointer to the first character in a null-terminated
         array

.SH Return value

   1) basic_string<CharT,Traits,Alloc>(lhs).append(rhs)

   2) basic_string<CharT,Traits,Alloc>(lhs) + rhs

   3) basic_string<CharT,Traits,Alloc>(1,lhs) + rhs

   4) lhs + basic_string<CharT,Traits,Alloc>(rhs)

   5) lhs + basic_string<CharT,Traits,Alloc>(1,rhs)

   6) std::move(lhs.append(rhs))

   7) std::move(rhs.insert(0, lhs))

   8) std::move(lhs.append(rhs)) or std::move(rhs.insert(0, lhs))

   9) std::move(rhs.insert(0, lhs))

   10) std::move(rhs.insert(0, 1, lhs))

   11) std::move(lhs.append(rhs))

   12) std::move(lhs.append(1, rhs))

.SH Example

   
// Run this code

 #include <iostream>
 #include <string>
  
 int main()
 {
     std::string s1 = "Hello";
     std::string s2 = "world";
     std::cout << s1 + ' ' + s2 + "!\\n";
 }

.SH Output:

 Hello world!

.SH See also

   operator+= appends characters to the end
              \fI(public member function)\fP 
   append     appends characters to the end
              \fI(public member function)\fP 
   insert     inserts characters
              \fI(public member function)\fP 
