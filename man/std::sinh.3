.TH std::sinh 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::sinh \- std::sinh

.SH Synopsis
   Defined in header <cmath>
   float       sinh( float arg );       \fB(1)\fP
   double      sinh( double arg );      \fB(2)\fP
   long double sinh( long double arg ); \fB(3)\fP
   double      sinh( Integral arg );    \fB(4)\fP \fI(since C++11)\fP

   Computes the hyperbolic sine of arg

   4) A set of overloads or a function template accepting an argument of any integral
   type. Equivalent to 2) (the argument is cast to double).

.SH Parameters

   arg - value of a floating-point or Integral type

.SH Return value

   If no errors occur, the hyperbolic sine of arg (sinh(arg), or

   earg
   -e-arg
   2

   ) is returned.

   If a range error due to overflow occurs, ±HUGE_VAL, ±HUGE_VALF, or ±HUGE_VALL is
   returned.

   If a range error occurs due to underflow, the correct result (after rounding) is
   returned.

.SH Error handling

   Errors are reported as specified in math_errhandling

   If the implementation supports IEEE floating-point arithmetic (IEC 60559),

     * if the argument is ±0 or ±∞, it is returned unmodified
     * if the argument is NaN, NaN is returned

.SH Notes

   POSIX specifies that in case of underflow, arg is returned unmodified, and if that
   is not supported, and implementation-defined value no greater than DBL_MIN, FLT_MIN,
   and LDBL_MIN is returned.

.SH Example

   
// Run this code

 #include <iostream>
 #include <cmath>
 #include <cerrno>
 #include <cstring>
 #include <cfenv>
  
 #pragma STDC FENV_ACCESS ON
 int main()
 {
     std::cout << "sinh(1) = " << std::sinh(1) << '\\n'
               << "sinh(-1) = " << std::sinh(-1) << '\\n'
               << "log(sinh(1)+cosh(1)) = "
               << std::log(std::sinh(1)+std::cosh(1)) << '\\n';
     // special values
     std::cout << "sinh(+0) = " << std::sinh(0.0) << '\\n'
               << "sinh(-0) = " << std::sinh(-0.0) << '\\n';
     // error handling
     errno=0; std::feclearexcept(FE_ALL_EXCEPT);
     std::cout << "sinh(710.5) = " << std::sinh(710.5) << '\\n';
     if(errno == ERANGE)
         std::cout << "    errno == ERANGE: " << std::strerror(errno) << '\\n';
     if(std::fetestexcept(FE_OVERFLOW))
         std::cout << "    FE_OVERFLOW raised\\n";
 }

.SH Output:

 sinh\fB(1)\fP = 1.1752
 sinh(-1) = -1.1752
 log(sinh\fB(1)\fP+cosh(1)) = 1
 sinh(+0) = 0
 sinh(-0) = -0
 sinh(710.5) = inf
     errno == ERANGE: Numerical result out of range
     FE_OVERFLOW raised

.SH See also

   cosh                computes hyperbolic cosine (ch(x))
                       \fI(function)\fP 
   tanh                hyperbolic tangent
                       \fI(function)\fP 
   asinh               computes the inverse hyperbolic sine (arsinh(x))
   \fI(C++11)\fP             \fI(function)\fP 
   sinh(std::complex)  computes hyperbolic sine of a complex number (sh(z))
                       \fI(function template)\fP 
   sinh(std::valarray) applies the function std::sinh to each element of valarray
                       \fI(function template)\fP 
   C documentation for
   sinh
