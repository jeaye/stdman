.TH std::basic_regex::basic_regex 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::basic_regex::basic_regex \- std::basic_regex::basic_regex

.SH Synopsis
   basic_regex();                                                     \fB(1)\fP \fI(since C++11)\fP
   explicit basic_regex( const CharT* s,
                         flag_type f =                                \fB(2)\fP \fI(since C++11)\fP
   std::regex_constants::ECMAScript );
   basic_regex( const CharT* s, std::size_t count,                    \fB(3)\fP \fI(since C++11)\fP
                flag_type f = std::regex_constants::ECMAScript );
   basic_regex( const basic_regex& other );                           \fB(4)\fP \fI(since C++11)\fP
   basic_regex( basic_regex&& other ) noexcept;                       \fB(5)\fP \fI(since C++11)\fP
   template< class ST, class SA >

   explicit basic_regex( const std::basic_string<CharT,ST,SA>& str,   \fB(6)\fP \fI(since C++11)\fP

                         flag_type f =
   std::regex_constants::ECMAScript );
   template< class ForwardIt >

   basic_regex( ForwardIt first, ForwardIt last,                      \fB(7)\fP \fI(since C++11)\fP

                flag_type f = std::regex_constants::ECMAScript );
   basic_regex( std::initializer_list<CharT> init,                    \fB(8)\fP \fI(since C++11)\fP
                flag_type f = std::regex_constants::ECMAScript );

   Constructs a new regular expression from a sequence of characters interpreted
   according to the flags f.

   1) Default constructor. Constructs an empty regular expression which will match
   nothing.
   2) Constructs a regex from a null-terminated string s.
   3) Constructs a regex from a sequence of count characters, pointed to by s.
   4) Copy constructor. Constructs a regex by copying other
   5) Move constructor. Constructs a regex by with the contents of other using move
   semantics.
   6) Constructs a regex from a string str.
   7) Range constructor. Constructs the string with the contents of the range [first,
   last).
   8) Initializer list constructor. Constructs the string with the contents of the
   initializer list init.

.SH Parameters

   s           - pointer to a null-terminated string
   count       - length of a character sequence used to initialize the regex
   first, last - range of a character sequence used to initialize the regex
   str         - a basic_string used as a source used to initialize the regex
   other       - another regex to use as source to initialize the regex
   init        - initializer list used to initialize the regex
   f           - flags used to guide the interpretation of the character sequence as a
                 regular expression
.SH Type requirements
   -
   ForwardIt must meet the requirements of ForwardIterator.

.SH Exceptions

   1) \fI(none)\fP
   2-3) std::regex_error if the supplied regular expression is not valid.
   4-5) \fI(none)\fP
   6-8) std::regex_error if the supplied regular expression is not valid.
