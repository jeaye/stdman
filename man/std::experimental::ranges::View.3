.TH std::experimental::ranges::View 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::experimental::ranges::View \- std::experimental::ranges::View

.SH Synopsis
   Defined in header <experimental/ranges/range>
   template <class T>

   concept bool View = ranges::Range<T> && ranges::Semiregular<T>  (ranges TS)

                    && /* view-predicate<T> */;
   template<class T>                                               (ranges TS)
   struct enable_view {};
   struct view_base {};                                            (ranges TS)

   The concept View<T> specifies the semiregular range T has constant-time copy, move,
   and assignment operations.

   The /* view-predicate<T> */ portion of the concept is determined as follows:

     * if the qualified-id ranges::enable_view<T>::type is valid and denotes a type,
       ranges::enable_view<T>::type::value;
     * otherwise, if std::is_base_of_v<ranges::view_base, T> is true, true;
     * otherwise, if T is a specialization of std::initializer_list, std::set,
       std::multiset, std::unordered_set, or std::unordered_multiset, false;
     * otherwise, if both T and const T satisfy Range and ranges::reference_t
       <ranges::iterator_t<T>> is not the same type as
       ranges::reference_t<ranges::iterator_t<const T>>, false;
     * otherwise, true.
