.TH std::is_const 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_const \- std::is_const

.SH Synopsis
   Defined in header <type_traits>
   template< class T >              \fI(since C++11)\fP
   struct is_const;

   If T is a const-qualified type (that is, const, or const volatile), provides the
   member constant value equal true. For any other type, value is false.

.SH Template parameters

   T - a type to check

   Helper variable template

   template< class T >                                     \fI(since C++17)\fP
   inline constexpr bool is_const_v = is_const<T>::value;

   

Inherited from std::integral_constant

.SH Member constants

   value    true if T is a const-qualified type , false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP
   operator()    returns value
   \fI(C++14)\fP       \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Possible implementation

   template<class T> struct is_const          : std::false_type {};
   template<class T> struct is_const<const T> : std::true_type {};

.SH Example

   
// Run this code

 #include <iostream>
 #include <type_traits>
  
 int main()
 {
     std::cout << std::boolalpha;
     std::cout << std::is_const<int>::value << '\\n'; // false
     std::cout << std::is_const<const int>::value  << '\\n'; // true
     std::cout << std::is_const<const int*>::value  << '\\n'; // false
     std::cout << std::is_const<int* const>::value  << '\\n'; // true
     std::cout << std::is_const<const int&>::value  << '\\n'; // false
 }

.SH Output:

 false
 true
 false
 true
 false

.SH See also

   is_volatile checks if a type is volatile-qualified
   \fI(C++11)\fP     \fI(class template)\fP 
   as_const    obtains a reference to const to its argument
   \fI(C++17)\fP     \fI(function template)\fP 
