.TH std::filesystem::relative,std::filesystem::proximate 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::filesystem::relative,std::filesystem::proximate \- std::filesystem::relative,std::filesystem::proximate

.SH Synopsis
   Defined in header <filesystem>
   path relative( const std::filesystem::path& p,                     \fB(1)\fP \fI(since C++17)\fP
                  std::error_code& ec);
   path relative( const std::filesystem::path& p,

                  const std::filesystem::path& base =
   std::filesystem::current_path());                                  \fB(2)\fP \fI(since C++17)\fP
   path relative( const std::filesystem::path& p,
                  const std::filesystem::path& base,

                  std::error_code& ec);
   path proximate( const std::filesystem::path& p,                    \fB(3)\fP \fI(since C++17)\fP
                   std::error_code& ec);
   path proximate( const std::filesystem::path& p,

                   const std::filesystem::path& base =
   std::filesystem::current_path());                                  \fB(4)\fP \fI(since C++17)\fP
   path proximate( const std::filesystem::path& p,
                   const std::filesystem::path& base,

                   std::error_code& ec);

   1) Returns relative(p, current_path(), ec)
   2) Returns p made relative to base. Resolves symlinks and normalizes both p and base
   before other processing. Effectively returns
   weakly_canonical(p).lexically_relative(weakly_canonical(base)) or
   weakly_canonical(p, ec).lexically_relative(weakly_canonical(base, ec)), except the
   error code form returns path() at the first error occurrence, if any.
   3) Returns proximate(p, current_path(), ec)
   4) Effectively returns
   weakly_canonical(p).lexically_proximate(weakly_canonical(base)) or
   weakly_canonical(p, ec).lexically_proximate(weakly_canonical(base, ec)), except the
   error code form returns path() at the first error occurrence, if any.

.SH Parameters

   p    - an existing path
   base - base path, against which p will be made relative/proximate
   ec   - error code to store error status to

.SH Return value

   1) p made relative against base.
   2) p made proximate against base

.SH Exceptions

   The overload that does not take a std::error_code& parameter throws filesystem_error
   on underlying OS API errors, constructed with p as the first argument, base as the
   second argument, and the OS error code as the error code argument. The overload
   taking a std::error_code& parameter sets it to the OS API error code if an OS API
   call fails, and executes ec.clear() if no errors occur. Any overload not marked
   noexcept may throw std::bad_alloc if memory allocation fails.

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

   path             represents a path
   \fI(C++17)\fP          \fI(class)\fP 
   absolute         composes an absolute path
   \fI(C++17)\fP          \fI(function)\fP 
   canonical        composes a canonical path
   weakly_canonical \fI(function)\fP 
   \fI(C++17)\fP

.SH Category:

     * Todo no example
