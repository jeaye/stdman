.TH std::experimental::filesystem::copy_symlink 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::experimental::filesystem::copy_symlink \- std::experimental::filesystem::copy_symlink

.SH Synopsis
   Defined in header <experimental/filesystem>
   void copy_symlink( const path& from, const path& to); \fB(1)\fP (filesystem TS)
   void copy_symlink( const path& from, const path& to,  \fB(2)\fP (filesystem TS)
                      error_code& ec );

   Copies a symlink to another location.

   1) Effectively calls f(read_symlink(from), to) where f is create_symlink() or
   create_directory_symlink depending on whether from resolves to a file or directory.
   2) Effectively calls f(read_symlink(from, ec), to, ec) where f is create_symlink()
   or create_directory_symlink depending on whether from resolves to a file or
   directory.

.SH Parameters

   from - path to a symbolic link to copy
   to   - destination path of the new symlink
   ec   - out-parameter for error reporting in the non-throwing overload

.SH Return value

   \fI(none)\fP

.SH Exceptions

   The overload that does not take a error_code& parameter throws filesystem_error on
   underlying OS API errors, constructed with from as the first argument, to as the
   second argument, and the OS error code as the error code argument. std::bad_alloc
   may be thrown if memory allocation fails. The overload taking a error_code&
   parameter sets it to the OS API error code if an OS API call fails, and executes
   ec.clear() if no errors occur. This overload has
   noexcept specification:  
   noexcept
     

.SH See also

   copy                     copies files or directories
                            \fI(function)\fP 
   copy_file                copies file contents
                            \fI(function)\fP 
   create_symlink           creates a symbolic link
   create_directory_symlink \fI(function)\fP 
   read_symlink             obtains the target of a symbolic link
                            \fI(function)\fP 

.SH Category:

     * unconditionally noexcept

   Hidden categories:

     * Pages with unreviewed unconditional noexcept template
     * Pages with unreviewed noexcept template
