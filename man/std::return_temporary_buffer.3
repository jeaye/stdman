.TH std::return_temporary_buffer 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::return_temporary_buffer \- std::return_temporary_buffer

.SH Synopsis
   Defined in header <memory>
   template< class T >                    (deprecated in C++17)
   void return_temporary_buffer( T* p );

   Deallocates storage previously allocated with std::get_temporary_buffer.

.SH Parameters

   p - the pointer previously returned by std::get_temporary_buffer and not invalidated
       by an earlier call to return_temporary_buffer

.SH Return value

   \fI(none)\fP

.SH Exceptions
                \fI(since C++17)\fP
   \fI(none)\fP

.SH Example

   
   
// Run this code

 #include <algorithm>
 #include <iostream>
 #include <memory>
 #include <string>
 #include <iterator>
  
 int main()
 {
     const std::string s[] = {"string", "1", "test", "..."};
     const auto p = std::get_temporary_buffer<std::string>(4);
     // requires that p.first is passed to return_temporary_buffer
     // (beware of early exit points and exceptions)
  
     std::copy(s, s + p.second,
               std::raw_storage_iterator<std::string*, std::string>(p.first));
     // requires that each string in p is individually destroyed
     // (beware of early exit points and exceptions)
  
     std::copy(p.first, p.first + p.second,
               std::ostream_iterator<std::string>{std::cout, "\\n"});
  
     std::for_each(p.first, p.first + p.second, [](std::string& e) {
         e.~basic_string<char>();
     });
  
     std::return_temporary_buffer(p.first);
 }

.SH Output:

 string
 1
 test
 ...

.SH See also

   get_temporary_buffer  obtains uninitialized storage
   (deprecated in C++17) \fI(function template)\fP 
