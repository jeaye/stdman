.TH std::is_union 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_union \- std::is_union

.SH Synopsis
   Defined in header <type_traits>
   template< class T >              \fI(since C++11)\fP
   struct is_union;

   Checks whether T is a union type. Provides the member constant value, which is equal
   to true if T is a union type . Otherwise, value is equal to false.

.SH Template parameters

   T - a type to check

   Helper variable template

   template< class T >                                     \fI(since C++17)\fP
   inline constexpr bool is_union_v = is_union<T>::value;

   

Inherited from std::integral_constant

.SH Member constants

   value    true if T is a union type , false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP
   operator()    returns value
   \fI(C++14)\fP       \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Example

   
// Run this code

 #include <iostream>
 #include <type_traits>
  
 struct A {};
  
 typedef union {
     int a;
     float b;
 } B;
  
 struct C {
     B d;
 };
  
 int main()
 {
     std::cout << std::boolalpha;
     std::cout << std::is_union<A>::value << '\\n';
     std::cout << std::is_union<B>::value << '\\n';
     std::cout << std::is_union<C>::value << '\\n';
     std::cout << std::is_union<int>::value << '\\n';
 }

.SH Output:

 false
 true
 false
 false

.SH See also

   is_class checks if a type is a non-union class type
   \fI(C++11)\fP  \fI(class template)\fP 
