.TH std::atomic::fetch_sub 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::atomic::fetch_sub \- std::atomic::fetch_sub

.SH Synopsis
   member only of atomic<Integral>\fI(C++11)\fP and atomic<Floating>(C++20)
   template specializations
   T fetch_sub( T arg,
                std::memory_order order = std::memory_order_seq_cst )
   noexcept;
   T fetch_sub( T arg,
                std::memory_order order = std::memory_order_seq_cst )
   volatile noexcept;
   member only of atomic<T*> template specialization                          \fB(1)\fP
   T* fetch_sub( std::ptrdiff_t arg,
                 std::memory_order order = std::memory_order_seq_cst )
   noexcept;                                                                      \fB(2)\fP
   T* fetch_sub( std::ptrdiff_t arg,
                 std::memory_order order = std::memory_order_seq_cst )
   volatile noexcept;

   Atomically replaces the current value with the result of arithmetic subtraction of
   the value and arg. The operation is read-modify-write operation. Memory is affected
   according to the value of order.

   For signed Integral types, arithmetic is defined to use twoâ€™s complement
   representation. There are no undefined results.

   For floating-point types, the floating-point environment in effect may
   be different from the calling thread's floating-point environment. The
   operation need not be conform to the corresponding std::numeric_limits (since C++20)
   traits but is encouraged to do so. If the result is not a
   representable value for its type, the result is unspecified but the
   operation otherwise has no undefined behavior.

   For T* types, the result may be an undefined address, but the operation otherwise
   has no undefined behavior. The program is ill-formed if T is not an object type.

.SH Parameters

   arg   - the other argument of arithmetic subtraction
   order - memory order constraints to enforce

.SH Return value

   The value immediately preceding the effects of this function in the modification
   order of *this.

   Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

     DR    Applied to              Behavior as published               Correct behavior
   P0558R1 C++11      arithmetic permitted on pointers to cv void or   made ill-formed
                      function

.SH See also

   atomic_fetch_sub          subtracts a non-atomic value from an atomic object and
   atomic_fetch_sub_explicit obtains the previous value of the atomic
   \fI(C++11)\fP                   \fI(function template)\fP 
   \fI(C++11)\fP
