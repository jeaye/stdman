.TH std::fpclassify 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::fpclassify \- std::fpclassify

.SH Synopsis
   Defined in header <cmath>
   int fpclassify( float arg );       \fB(1)\fP \fI(since C++11)\fP
   int fpclassify( double arg );      \fB(2)\fP \fI(since C++11)\fP
   int fpclassify( long double arg ); \fB(3)\fP \fI(since C++11)\fP
   int fpclassify( Integral arg );    \fB(4)\fP \fI(since C++11)\fP

   1-3) Categorizes floating point value arg into the following categories: zero,
   subnormal, normal, infinite, NAN, or implementation-defined category.
   4) A set of overloads or a function template accepting the from argument of any
   integral type. Equivalent to \fB(2)\fP (the argument is cast to double).

.SH Parameters

   arg - floating point value

.SH Return value

   one of FP_INFINITE, FP_NAN, FP_NORMAL, FP_SUBNORMAL, FP_ZERO or
   implementation-defined type, specifying the category of arg.

.SH Example

   
// Run this code

 #include <iostream>
 #include <cmath>
 #include <cfloat>
  
 const char* show_classification(double x) {
     switch(std::fpclassify(x)) {
         case FP_INFINITE:  return "Inf";
         case FP_NAN:       return "NaN";
         case FP_NORMAL:    return "normal";
         case FP_SUBNORMAL: return "subnormal";
         case FP_ZERO:      return "zero";
         default:           return "unknown";
     }
 }
 int main()
 {
     std::cout << "1.0/0.0 is " << show_classification(1/0.0) << '\\n'
               << "0.0/0.0 is " << show_classification(0.0/0.0) << '\\n'
               << "DBL_MIN/2 is " << show_classification(DBL_MIN/2) << '\\n'
               << "-0.0 is " << show_classification(-0.0) << '\\n'
               << "1.0 is " << show_classification(1.0) << '\\n';
 }

.SH Output:

 1.0/0.0 is Inf
 0.0/0.0 is NaN
 DBL_MIN/2 is subnormal
 -0.0 is zero
 1.0 is normal

.SH See also

   isfinite       checks if the given number has finite value
   \fI(C++11)\fP        \fI(function)\fP 
   isinf          checks if the given number is infinite
   \fI(C++11)\fP        \fI(function)\fP 
   isnan          checks if the given number is NaN
   \fI(C++11)\fP        \fI(function)\fP 
   isnormal       checks if the given number is normal
   \fI(C++11)\fP        \fI(function)\fP 
                  provides an interface to query properties of all fundamental numeric
   numeric_limits types.
                  \fI(class template)\fP 
   C documentation for
   fpclassify
