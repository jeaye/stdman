.TH std::piecewise_construct_t 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::piecewise_construct_t \- std::piecewise_construct_t

.SH Synopsis
   Defined in header <utility>
   struct piecewise_construct_t { };                                      \fI(since C++11)\fP
                                                                          \fI(until C++17)\fP
   struct piecewise_construct_t { explicit piecewise_construct_t() =      \fI(since C++17)\fP
   default; };

   std::piecewise_construct_t is an empty struct tag type used to disambiguate between
   different functions that take two tuple arguments.

   The overloads that do not use std::piecewise_construct_t assume that each tuple
   argument becomes the element of a pair. The overloads that use
   std::piecewise_construct_t assume that each tuple argument is used to construct,
   piecewise, a new object of specified type, which will become the element of the
   pair.

.SH Example

   
   
// Run this code

 #include <iostream>
 #include <utility>
 #include <tuple>
  
 struct Foo {
     Foo(std::tuple<int, float>)
     {
         std::cout << "Constructed a Foo from a tuple\\n";
     }
     Foo(int, float)
     {
         std::cout << "Constructed a Foo from an int and a float\\n";
     }
 };
  
 int main()
 {
     std::tuple<int, float> t(1, 3.14);
     std::pair<Foo, Foo> p1(t, t);
     std::pair<Foo, Foo> p2(std::piecewise_construct, t, t);
 }

.SH Output:

 Constructed a Foo from a tuple
 Constructed a Foo from a tuple
 Constructed a Foo from an int and a float
 Constructed a Foo from an int and a float

.SH See also

   piecewise_construct an object of type piecewise_construct_t used to disambiguate
   \fI(C++11)\fP             functions for piecewise construction
                       (constant) 
   constructor         constructs new pair
                       \fI(public member function of std::pair)\fP
