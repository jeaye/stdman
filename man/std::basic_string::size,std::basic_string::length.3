.TH std::basic_string::size,std::basic_string::length 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::basic_string::size,std::basic_string::length \- std::basic_string::size,std::basic_string::length

.SH Synopsis
   size_type size() const;
   size_type length() const;

   Returns the number of CharT elements in the string, i.e. std::distance(begin(),
   end()).

.SH Parameters

   \fI(none)\fP

.SH Return value

   The number of CharT elements in the string.

.SH Exceptions

   \fI(none)\fP                    \fI(until C++11)\fP
   noexcept specification:  
   noexcept                  \fI(since C++11)\fP
     

.SH Complexity

   Unspecified \fI(until C++11)\fP
   Constant    \fI(since C++11)\fP

.SH Notes

   For std::string, the elements are bytes (objects of type char), which are not the
   same as characters if a multibyte encoding such as UTF-8 is used.

.SH Example

   
// Run this code

 #include <cassert>
 #include <iterator>
 #include <string>
  
 int main()
 {
     std::string s("Exemplar");
     assert(8 == s.size());
     assert(s.size() == s.length());
     assert(s.size() == static_cast<std::string::size_type>(
         std::distance(s.begin(), s.end())));
 }

.SH See also

   empty    checks whether the string is empty
            \fI(public member function)\fP 
   max_size returns the maximum number of characters
            \fI(public member function)\fP 

.SH Category:

     * unconditionally noexcept

   Hidden categories:

     * Pages with unreviewed unconditional noexcept template
     * Pages with unreviewed noexcept template
