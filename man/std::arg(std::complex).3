.TH std::arg(std::complex) 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::arg(std::complex) \- std::arg(std::complex)

.SH Synopsis
   Defined in header <complex>
   template< class T >               \fB(1)\fP
   T arg( const complex<T>& z );
   long double arg( long double z ); \fB(2)\fP \fI(since C++11)\fP
   template< class DoubleOrInteger > \fB(3)\fP \fI(since C++11)\fP
   double arg( DoubleOrInteger z );
   float arg( float z );             \fB(4)\fP \fI(since C++11)\fP

   Calculates the phase angle (in radians) of the complex number z

   \fI(since C++11)\fPAdditional overloads are provided for float, double, long double, and
   all integer types, which are treated as complex numbers with zero imaginary
   component.

.SH Parameters

   z - complex value

.SH Return value

   If no errors occur, returns the phase angle of z in the interval [−π; π].

   Errors and special cases are handled as if the function is implemented as
   std::atan2(std::imag(z), std::real(z)).

.SH Example

   
// Run this code

 #include <iostream>
 #include <complex>
  
 int main()
 {
     std::complex<double> z1(1, 0);
     std::cout << "phase angle of " << z1 << " is " << std::arg(z1) << '\\n';
  
     std::complex<double> z2(0, 1);
     std::cout << "phase angle of " << z2 << " is " << std::arg(z2) << '\\n';
  
     std::complex<double> z3(-1, 0);
     std::cout << "phase angle of " << z3 << " is " << std::arg(z3) << '\\n';
  
     std::complex<double> z4(-1, -0.0);
     std::cout << "phase angle of " << z4 << " (the other side of the cut) is "
               << std::arg(z4) << '\\n';
 }

.SH Output:

 phase angle of (1,0) is 0
 phase angle of (0,1) is 1.5708
 phase angle of (-1,0) is 3.14159
 phase angle of (-1,-0) (the other side of the cut) is -3.14159

.SH See also

   abs(std::complex)    returns the magnitude of a complex number
                        \fI(function template)\fP 
   polar                constructs a complex number from magnitude and phase angle
                        \fI(function template)\fP 
   atan2                arc tangent, using signs to determine quadrants
                        \fI(function)\fP 
   atan2(std::valarray) applies the function std::atan2 to a valarray and a value
                        \fI(function template)\fP 
   C documentation for
   carg
