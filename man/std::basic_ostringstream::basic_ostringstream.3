.TH std::basic_ostringstream::basic_ostringstream 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::basic_ostringstream::basic_ostringstream \- std::basic_ostringstream::basic_ostringstream

.SH Synopsis
   explicit basic_ostringstream( ios_base::openmode mode =            \fB(1)\fP
   ios_base::out );
   explicit basic_ostringstream( const
   std::basic_string<CharT,Traits,Allocator>& str,                    \fB(2)\fP
                        ios_base::openmode mode = ios_base::out );
   basic_ostringstream( basic_ostringstream&& other );                \fB(3)\fP \fI(since C++11)\fP

   Constructs new string stream.

   1) Constructs new underlying string device. The underlying basic_stringbuf object is
   constructed as basic_stringbuf<Char,Traits,Allocator>(mode | ios_base::out).

   2) Uses a copy of str as initial contents of the underlying string device. The
   underlying basic_stringbuf object is constructed as
   basic_stringbuf<Char,Traits,Allocator>(str, mode | ios_base::out).

   3) Move constructor. Constructs the string stream with the state of other using move
   semantics.

.SH Parameters

   str   - string to use as initial contents of the string stream
           specifies stream open mode. It is bitmask type, the following constants are
           defined:

           Constant Explanation
   mode  - app      seek to the end of stream before each write
           binary   open in binary mode
           in       open for reading
           out      open for writing
           trunc    discard the contents of the stream when opening
           ate      seek to the end of stream immediately after open
   other - another string stream to use as source

.SH Notes

   Construction of one-off basic_ostringstream objects in a tight loop, such as when
   used for string conversion, may be significantly more costly than calling str to
   reuse the same object.

.SH Example

   
// Run this code

 #include <iostream>
 #include <sstream>
 int main()
 {
     // default constructor (input/output stream)
     std::stringstream buf1;
     buf1 << 7;
     int n = 0;
     buf1 >> n;
     std::cout << "buf1 = " << buf1.str() << " n = " << n << '\\n';
  
     // input stream
     std::istringstream inbuf("-10");
     inbuf >> n;
     std::cout << "n = " << n << '\\n';
  
     // output stream in append mode \fI(C++11)\fP
     std::ostringstream buf2("test", std::ios_base::ate);
     buf2 << '1';
     std::cout << buf2.str() << '\\n';
 }

.SH Output:

 buf1 = 7 n = 7
 n = -10
 test1

.SH See also

   str           gets or sets the contents of underlying string device object
                 \fI(public member function)\fP 
   constructor   constructs a basic_stringbuf object
                 \fI(public member function of std::basic_stringbuf)\fP 
