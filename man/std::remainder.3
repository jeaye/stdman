.TH std::remainder 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::remainder \- std::remainder

.SH Synopsis
   Defined in header <cmath>
   float       remainder( float x, float y );             \fB(1)\fP \fI(since C++11)\fP
   double      remainder( double x, double y );           \fB(2)\fP \fI(since C++11)\fP
   long double remainder( long double x, long double y ); \fB(3)\fP \fI(since C++11)\fP
   Promoted    remainder( Arithmetic1 x, Arithmetic2 y ); \fB(4)\fP \fI(since C++11)\fP

   1-3) Computes the IEEE remainder of the floating point division operation x/y.
   4) A set of overloads or a function template for all combinations of arguments of
   arithmetic type not covered by 1-3. If any argument has integral type, it is cast to
   double. If any other argument is long double, then the return type is long double,
   otherwise it is double.

   The IEEE floating-point remainder of the division operation x/y calculated by this
   function is exactly the value x - n*y, where the value n is the integral value
   nearest the exact value x/y. When |n-x/y| = ½, the value n is chosen to be even.

   In contrast to std::fmod(), the returned value is not guaranteed to have the same
   sign as x.

   If the returned value is 0, it will have the same sign as x.

.SH Parameters

   x, y - values of floating-point or integral types

.SH Return value

   If successful, returns the IEEE floating-point remainder of the division x/y as
   defined above.

   If a domain error occurs, an implementation-defined value is returned (NaN where
   supported)

   If a range error occurs due to underflow, the correct result is returned.

   If y is zero, but the domain error does not occur, zero is returned.

.SH Error handling

   Errors are reported as specified in math_errhandling

   Domain error may occur if y is zero.

   If the implementation supports IEEE floating-point arithmetic (IEC 60559),

     * The current rounding mode has no effect.
     * FE_INEXACT is never raised, the result is always exact.
     * If x is ±∞ and y is not NaN, NaN is returned and FE_INVALID is raised
     * If y is ±0 and x is not NaN, NaN is returned and FE_INVALID is raised
     * If either argument is NaN, NaN is returned

.SH Notes

   POSIX requires that a domain error occurs if x is infinite or y is zero.

   std::fmod, but not std::remainder is useful for doing silent wrapping of
   floating-point types to unsigned integer types: (0.0 <= (y = std::fmod(
   std::rint(x), 65536.0 )) ? y : 65536.0 + y) is in the range [-0.0 .. 65535.0], which
   corresponds to unsigned short, but std::remainder(std::rint(x), 65536.0) is in the
   range [-32767.0, +32768.0], which is outside of the range of signed short.

.SH Example

   
// Run this code

 #include <iostream>
 #include <cmath>
 #include <cfenv>
  
 #pragma STDC FENV_ACCESS ON
 int main()
 {
     std::cout << "remainder(+5.1, +3.0) = " << std::remainder(5.1,3) << '\\n'
               << "remainder(-5.1, +3.0) = " << std::remainder(-5.1,3) << '\\n'
               << "remainder(+5.1, -3.0) = " << std::remainder(5.1,-3) << '\\n'
               << "remainder(-5.1, -3.0) = " << std::remainder(-5.1,-3) << '\\n';
  
     // special values
     std::cout << "remainder(-0.0, 1.0) = " << std::remainder(-0.0, 1) << '\\n'
               << "remainder(5.1, Inf) = " << std::remainder(5.1, INFINITY) << '\\n';
  
     // error handling
     std::feclearexcept(FE_ALL_EXCEPT);
     std::cout << "remainder(+5.1, 0) = " << std::remainder(5.1, 0) << '\\n';
     if(fetestexcept(FE_INVALID))
         std::cout << "    FE_INVALID raised\\n";
 }

.SH Possible output:

 remainder(+5.1, +3.0) = -0.9
 remainder(-5.1, +3.0) = 0.9
 remainder(+5.1, -3.0) = -0.9
 remainder(-5.1, -3.0) = 0.9
 remainder(-0.0, 1.0) = -0
 remainder(5.1, Inf) = 5.1
 remainder(+5.1, 0) = -nan
     FE_INVALID raised

.SH See also

   div(int)
   ldiv     computes quotient and remainder of integer division
   lldiv    \fI(function)\fP 
   \fI(C++11)\fP
   fmod     remainder of the floating point division operation
            \fI(function)\fP 
   remquo   signed remainder as well as the three last bits of the division operation
   \fI(C++11)\fP  \fI(function)\fP 
   C documentation for
   remainder
