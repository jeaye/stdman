.TH std::make_reverse_iterator 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::make_reverse_iterator \- std::make_reverse_iterator

.SH Synopsis
   Defined in header <iterator>
   template <class Iterator>                                              \fI(since C++14)\fP
   std::reverse_iterator<Iterator> make_reverse_iterator( Iterator i );   \fI(until C++17)\fP
   template <class Iterator>
   constexpr std::reverse_iterator<Iterator> make_reverse_iterator(       \fI(since C++17)\fP
   Iterator i );

   make_reverse_iterator is a convenience function template that constructs a
   std::reverse_iterator for the given iterator i with the type deduced from the type
   of the argument.

.SH Parameters

   i - input iterator to be converted to reverse iterator

.SH Return value

   A std::reverse_iterator constructed from i

.SH Possible implementation

   template< class Iterator >
   std::reverse_iterator<Iterator> make_reverse_iterator( Iterator i )
   {
       return std::reverse_iterator<Iterator>(i);
   }

.SH Example

   
// Run this code

 #include <iostream>
 #include <iterator>
 #include <vector>
 #include <algorithm>
  
 int main() {
     auto v = std::vector<int>{ 1, 3, 10, 8, 22 };
  
     std::sort(v.begin(), v.end());
     std::copy(v.begin(), v.end(), std::ostream_iterator<int>(std::cout, ", "));
  
     std::cout << '\\n';
  
     std::copy(
         std::make_reverse_iterator(v.end()),
         std::make_reverse_iterator(v.begin()),
         std::ostream_iterator<int>(std::cout, ", "));
 }

.SH Output:

 1, 3, 8, 10, 22,
 22, 10, 8, 3, 1,

.SH See also

   reverse_iterator iterator adaptor for reverse-order traversal
                    \fI(class template)\fP 
   rbegin           returns a reverse iterator to a container or array
   crbegin          \fI(function)\fP 
   \fI(C++14)\fP
   rend             returns a reverse end iterator for a container or array
   crend            \fI(function)\fP 
   \fI(C++14)\fP
