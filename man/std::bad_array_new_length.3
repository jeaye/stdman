.TH std::bad_array_new_length 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::bad_array_new_length \- std::bad_array_new_length

.SH Synopsis
   Defined in header <new>
   class bad_array_new_length;  \fI(since C++11)\fP

   std::bad_array_new_length is the type of the object thrown as exceptions by the
   new-expressions to report invalid array lengths if

   1) array length is negative

   2) total size of the new array would exceed implementation-defined maximum value

   3) the number of initializer-clauses exceeds the number of elements to initialize

   Only the first array dimension may generate this exception; dimensions other than
   the first are constant expressions and are checked at compile time.

   std-bad array new length-inheritance.svg
   About this image

                                   Inheritance diagram

.SH Member functions

   constructor   constructs the bad_array_new_length object
                 \fI(public member function)\fP

Inherited from std::bad_alloc

Inherited from std::exception

.SH Member functions

   destructor   destroys the exception object
   \fB[virtual]\fP    \fI(virtual public member function of std::exception)\fP 
   what         returns an explanatory string
   \fB[virtual]\fP    \fI(virtual public member function of std::exception)\fP 

.SH Notes

   The override for the virtual member function what() may by provided, but is not
   required.

.SH Example

   Three conditions where std::bad_array_new_length should be thrown:

   
// Run this code

 #include <iostream>
 #include <new>
 #include <climits>
  
 int main()
 {
     int negative = -1;
     int small = 1;
     int large = INT_MAX;
     try {
         new int[negative];           // negative size
         new int[small]{1,2,3};       // too many initializers
         new int[large][1000000];     // too large
     } catch(const std::bad_array_new_length &e) {
         std::cout << e.what() << '\\n';
     }
 }

.SH See also

   operator new   allocation functions
   operator new[] \fI(function)\fP 
   bad_alloc      exception thrown when memory allocation fails
                  \fI(class)\fP 
