.TH std::experimental::filesystem::temp_directory_path 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::experimental::filesystem::temp_directory_path \- std::experimental::filesystem::temp_directory_path

.SH Synopsis
   Defined in header <experimental/filesystem>
   path temp_directory_path();                 \fB(1)\fP (filesystem TS)
   path temp_directory_path( error_code& ec );

   Returns the directory location suitable for temporary files.

.SH Parameters

   \fI(none)\fP

.SH Return value

   A directory suitable for temporary files. The path is guaranteed to exist and to be
   a directory. The overload that takes error_code& argument returns an empty path on
   error.

.SH Exceptions

   The overload that does not take a error_code& parameter throws filesystem_error on
   underlying OS API errors, constructed with path to be returned as the first argument
   and the OS error code as the error code argument. std::bad_alloc may be thrown if
   memory allocation fails. The overload taking a error_code& parameter sets it to the
   OS API error code if an OS API call fails, and executes ec.clear() if no errors
   occur. This overload has
   noexcept specification:  
   noexcept
     

.SH Notes

   On POSIX systems, the path may be the one specified in the environment variables
   TMPDIR, TMP, TEMP, TEMPDIR, and, if none of them are specified, the path "/tmp" is
   returned.

   On Windows systems, the path is typically the one returned by GetTempPath

.SH Example

   
// Run this code

 #include <iostream>
 #include <experimental/filesystem>
 namespace fs = std::experimental::filesystem;
 int main()
 {
     std::cout << "Temp directory is " << fs::temp_directory_path() << '\\n';
 }

.SH Possible output:

 Temp directory is "C:\\Windows\\TEMP\\"

.SH See also

   tmpfile creates and opens a temporary, auto-removing file
           \fI(function)\fP 

.SH Category:

     * unconditionally noexcept

   Hidden categories:

     * Pages with unreviewed unconditional noexcept template
     * Pages with unreviewed noexcept template
