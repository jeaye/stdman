.TH std::numeric_limits::has_signaling_NaN 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::numeric_limits::has_signaling_NaN \- std::numeric_limits::has_signaling_NaN

.SH Synopsis
   static const bool has_signaling_NaN;      \fI(until C++11)\fP
   static constexpr bool has_signaling_NaN;  \fI(since C++11)\fP

   The value of std::numeric_limits<T>::has_signaling_NaN is true for all types T
   capable of representing the special value "Signaling Not-A-Number". This constant is
   meaningful for all floating-point types and is guaranteed to be true if
   std::numeric_limits<T>::is_iec559 == true.

.SH Standard specializations

   T                     value of std::numeric_limits<T>::has_signaling_NaN
   /* non-specialized */ false
   bool                  false
   char                  false
   signed char           false
   unsigned char         false
   wchar_t               false
   char16_t              false
   char32_t              false
   short                 false
   unsigned short        false
   int                   false
   unsigned int          false
   long                  false
   unsigned long         false
   long long             false
   unsigned long long    false
   float                 usually true
   double                usually true
   long double           usually true

.SH See also

   quiet_NaN     returns a quiet NaN value of the given floating-point type
   \fB[static]\fP      \fI(public static member function)\fP 
   has_infinity  identifies floating-point types that can represent the special value
   \fB[static]\fP      "positive infinity"
                 \fI(public static member constant)\fP 
   has_quiet_NaN identifies floating-point types that can represent the special value
   \fB[static]\fP      "quiet not-a-number" (NaN)
                 \fI(public static member constant)\fP 
