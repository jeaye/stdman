.TH std::basic_filebuf 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::basic_filebuf \- std::basic_filebuf

.SH Synopsis
   Defined in header <fstream>
   template<

       class CharT,
       class Traits = std::char_traits<CharT>

   > class basic_filebuf : public std::basic_streambuf<CharT, Traits>

   std::basic_filebuf is a std::basic_streambuf whose associated character sequence is
   a file. Both the input sequence and the output sequence are associated with the same
   file, and a joint file position is maintained for both operations.

   The functions underflow() and overflow()/sync() perform the actual I/O between the
   file and the get and put areas of the buffer. When CharT is not char, most
   implementations store multibyte characters in the file and a std::codecvt facet is
   used to perform wide/multibyte character conversion.

   Two specializations for common character types are also defined:

   Defined in header <streambuf>
   Type     Definition
   filebuf  basic_filebuf<char>
   wfilebuf basic_filebuf<wchar_t>

.SH Member types

   Member type Definition
   char_type   CharT
   traits_type Traits
   int_type    Traits::int_type
   pos_type    Traits::pos_type which is required to be std::fpos<Traits::state_type>
   off_type    Traits::off_type

.SH Member functions

.SH Public member functions
   constructor   constructs a basic_filebuf object
                 \fI(public member function)\fP 
   operator=     assigns a basic_filebuf object
   \fI(C++11)\fP       \fI(public member function)\fP 
   swap          swaps two basic_filebuf objects
   \fI(C++11)\fP       \fI(public member function)\fP 
   destructor    destructs a basic_filebuf object and closes the file if it is open
   \fB[virtual]\fP     \fI(virtual public member function)\fP 
   is_open       checks if the associated file is open
                 \fI(public member function)\fP 
   open          opens a file and configures it as the associated character sequence
                 \fI(public member function)\fP 
   close         flushes the put area buffer and closes the associated file
                 \fI(public member function)\fP 
.SH Protected member functions
   showmanyc     optionally provides the number of characters available for input from
   \fB[virtual]\fP     the file
                 \fI(virtual protected member function)\fP 
   underflow     reads from the associated file
   \fB[virtual]\fP     \fI(virtual protected member function)\fP 
   uflow         reads from the associated file and advances the next pointer in the
   \fB[virtual]\fP     get area
                 \fI(virtual protected member function)\fP 
   pbackfail     backs out the input sequence to unget a character, not affecting the
   \fB[virtual]\fP     associated file
                 \fI(virtual protected member function)\fP 
   overflow      writes characters to the associated file from the put area
   \fB[virtual]\fP     \fI(virtual protected member function)\fP 
   setbuf        provides user-supplied buffer or turns this filebuf unbuffered
   \fB[virtual]\fP     \fI(virtual protected member function)\fP 
   seekoff       repositions the file position, using relative addressing
   \fB[virtual]\fP     \fI(virtual protected member function)\fP 
   seekpos       repositions the file position, using absolute addressing
   \fB[virtual]\fP     \fI(virtual protected member function)\fP 
   sync          writes characters to the associated file from the put area
   \fB[virtual]\fP     \fI(virtual protected member function)\fP 
   imbue         changes the associated locale
   \fB[virtual]\fP     \fI(virtual protected member function)\fP 

.SH Non-member functions

   std::swap(std::basic_filebuf) specializes the std::swap algorithm
   \fI(C++11)\fP                       \fI(function template)\fP 

Inherited from std::basic_streambuf

.SH Member types

   Member type Definition
   char_type   CharT
   traits_type Traits
   int_type    Traits::int_type
   pos_type    Traits::pos_type
   off_type    Traits::off_type

.SH Member functions

   destructor                 destructs the basic_streambuf object
   \fB[virtual]\fP                  \fI(virtual public member function of std::basic_streambuf)\fP
                              
.SH Locales
   pubimbue                   invokes imbue()
                              \fI(public member function of std::basic_streambuf)\fP 
   getloc                     obtains a copy of the associated locale
                              \fI(public member function of std::basic_streambuf)\fP 
.SH Positioning
   pubsetbuf                  invokes setbuf()
                              \fI(public member function of std::basic_streambuf)\fP 
   pubseekoff                 invokes seekoff()
                              \fI(public member function of std::basic_streambuf)\fP 
   pubseekpos                 invokes seekpos()
                              \fI(public member function of std::basic_streambuf)\fP 
   pubsync                    invokes sync()
                              \fI(public member function of std::basic_streambuf)\fP 
.SH Get area
                              obtains the number of characters immediately available in
   in_avail                   the get area
                              \fI(public member function of std::basic_streambuf)\fP 
                              advances the input sequence, then reads one character
   snextc                     without advancing again
                              \fI(public member function of std::basic_streambuf)\fP 
                              reads one character from the input sequence and advances
   sbumpc                     the sequence
                              \fI(public member function of std::basic_streambuf)\fP 
   stossc                     advances the input sequence as if by calling sbumpc() and
   \fB(deprecated)\fP \fI(until C++17)\fP discarding the result
                              \fI(public member function)\fP 
                              reads one character from the input sequence without
   sgetc                      advancing the sequence
                              \fI(public member function of std::basic_streambuf)\fP 
   sgetn                      invokes xsgetn()
                              \fI(public member function of std::basic_streambuf)\fP 
.SH Put area
                              writes one character to the put area and advances the
   sputc                      next pointer
                              \fI(public member function of std::basic_streambuf)\fP 
   sputn                      invokes xsputn()
                              \fI(public member function of std::basic_streambuf)\fP 
.SH Putback
   sputbackc                  puts one character back in the input sequence
                              \fI(public member function of std::basic_streambuf)\fP 
   sungetc                    moves the next pointer in the input sequence back by one
                              \fI(public member function of std::basic_streambuf)\fP 

.SH Protected member functions

   constructor   constructs a basic_streambuf object
                 \fI(protected member function)\fP 
   operator=     replaces a basic_streambuf object
   \fI(C++11)\fP       \fI(protected member function)\fP 
   swap          swaps two basic_streambuf objects
   \fI(C++11)\fP       \fI(protected member function)\fP 
.SH Locales
   imbue         changes the associated locale
   \fB[virtual]\fP     \fI(virtual protected member function of std::basic_streambuf)\fP 
.SH Positioning
   setbuf        replaces the buffer with user-defined array, if permitted
   \fB[virtual]\fP     \fI(virtual protected member function of std::basic_streambuf)\fP 
   seekoff       repositions the next pointer in the input sequence, output sequence,
   \fB[virtual]\fP     or both, using relative addressing
                 \fI(virtual protected member function of std::basic_streambuf)\fP 
   seekpos       repositions the next pointer in the input sequence, output sequence,
   \fB[virtual]\fP     or both using absolute addressing
                 \fI(virtual protected member function of std::basic_streambuf)\fP 
   sync          synchronizes the buffers with the associated character sequence
   \fB[virtual]\fP     \fI(virtual protected member function of std::basic_streambuf)\fP 
.SH Get area
   showmanyc     obtains the number of characters available for input in the associated
   \fB[virtual]\fP     input sequence, if known
                 \fI(virtual protected member function of std::basic_streambuf)\fP 
   underflow     reads characters from the associated input sequence to the get area
   \fB[virtual]\fP     \fI(virtual protected member function of std::basic_streambuf)\fP 
   uflow         reads characters from the associated input sequence to the get area
   \fB[virtual]\fP     and advances the next pointer
                 \fI(virtual protected member function of std::basic_streambuf)\fP 
   xsgetn        reads multiple characters from the input sequence
   \fB[virtual]\fP     \fI(virtual protected member function of std::basic_streambuf)\fP 
   eback         returns a pointer to the beginning, current character and the end of
   gptr          the get area
   egptr         \fI(protected member function)\fP 
   gbump         advances the next pointer in the input sequence
                 \fI(protected member function)\fP 
                 repositions the beginning, next, and end pointers of the input
   setg          sequence
                 \fI(protected member function)\fP 
.SH Put area
   xsputn        writes multiple characters to the output sequence
   \fB[virtual]\fP     \fI(virtual protected member function of std::basic_streambuf)\fP 
   overflow      writes characters to the associated output sequence from the put area
   \fB[virtual]\fP     \fI(virtual protected member function of std::basic_streambuf)\fP 
   pbase         returns a pointer to the beginning, current character and the end of
   pptr          the put area
   epptr         \fI(protected member function)\fP 
   pbump         advances the next pointer of the output sequence
                 \fI(protected member function)\fP 
                 repositions the beginning, next, and end pointers of the output
   setp          sequence
                 \fI(protected member function)\fP 
.SH Putback
   pbackfail     puts a character back into the input sequence, possibly modifying the
   \fB[virtual]\fP     input sequence
                 \fI(virtual protected member function of std::basic_streambuf)\fP 
