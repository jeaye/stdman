.TH std::ctype<char> 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::ctype<char> \- std::ctype<char>

.SH Synopsis
   Defined in header <locale>
   template<>
   class ctype<char>;

   This specialization of std::ctype encapsulates character classification features for
   type char. Unlike general-purpose std::ctype, which uses virtual functions, this
   specialization uses table lookup to classify characters (which is generally faster).

   The base class std::ctype<char> implements character classification equivalent to
   the minimal "C" locale. The classification rules can be extended or modified if
   constructed with a non-default classification table argument, if constructed as
   std::ctype_byname<char> or as a user-defined derived facet. All std::istream
   formatted input functions are required to use std::ctype<char> for character
   classing during input parsing.

   std-ctype char-inheritance.svg
   About this image

                                   Inheritance diagram

.SH Member types

   Member type Definition
   char_type   char

.SH Member functions

   constructor   constructs a new std::ctype<char> facet
                 \fI(public member function)\fP 
   destructor    destructs a std::ctype<char> facet
                 \fI(protected member function)\fP 
   table         obtains the character classification table
                 \fI(public member function)\fP 
   classic_table obtains the "C" locale character classification table
   \fB[static]\fP      \fI(public static member function)\fP 
                 classifies a character or a character sequence, using the
   is            classification table
                 \fI(public member function)\fP 
                 locates the first character in a sequence that conforms to given
   scan_is       classification, using the classification table
                 \fI(public member function)\fP 
                 locates the first character in a sequence that fails given
   scan_not      classification, using the classification table
                 \fI(public member function)\fP 
   toupper       invokes do_toupper
                 \fI(public member function of std::ctype)\fP 
   tolower       invokes do_tolower
                 \fI(public member function of std::ctype)\fP 
   widen         invokes do_widen
                 \fI(public member function of std::ctype)\fP 
   narrow        invokes do_narrow
                 \fI(public member function of std::ctype)\fP 

.SH Protected member functions

   do_toupper converts a character or characters to uppercase
   \fB[virtual]\fP  \fI(virtual protected member function of std::ctype)\fP 
   do_tolower converts a character or characters to lowercase
   \fB[virtual]\fP  \fI(virtual protected member function of std::ctype)\fP 
   do_widen   converts a character or characters from char to charT
   \fB[virtual]\fP  \fI(virtual protected member function of std::ctype)\fP 
   do_narrow  converts a character or characters from charT to char
   \fB[virtual]\fP  \fI(virtual protected member function of std::ctype)\fP 

.SH Member objects

   static std::locale::id id           id of the locale
   \fB[static]\fP                            \fI(public static member constant)\fP
   static const std::size_t table_size size of the classification table, at least 256
   \fB[static]\fP                            \fI(public static member constant)\fP

Inherited from std::ctype_base

.SH Member types

   Type Definition
   mask unspecified bitmask type (enumeration, integer type, or bitset)

.SH Member constants

   space            the value of mask identifying whitespace character classification
   \fB[static]\fP         \fI(public static member constant)\fP
   print            the value of mask identifying printable character classification
   \fB[static]\fP         \fI(public static member constant)\fP
   cntrl            the value of mask identifying control character classification
   \fB[static]\fP         \fI(public static member constant)\fP
   upper            the value of mask identifying uppercase character classification
   \fB[static]\fP         \fI(public static member constant)\fP
   lower            the value of mask identifying lowercase character classification
   \fB[static]\fP         \fI(public static member constant)\fP
   alpha            the value of mask identifying alphabetic character classification
   \fB[static]\fP         \fI(public static member constant)\fP
   digit            the value of mask identifying digit character classification
   \fB[static]\fP         \fI(public static member constant)\fP
   punct            the value of mask identifying punctuation character classification
   \fB[static]\fP         \fI(public static member constant)\fP
   xdigit           the value of mask identifying hexadecimal digit character
   \fB[static]\fP         classification
                    \fI(public static member constant)\fP
   blank            the value of mask identifying blank character classification
   \fB[static]\fP \fI(C++11)\fP \fI(public static member constant)\fP
   alnum            alpha | digit
   \fB[static]\fP         \fI(public static member constant)\fP
   graph            alnum | punct
   \fB[static]\fP         \fI(public static member constant)\fP

.SH Example

   The following example demonstrates modification of ctype<char> to tokenize
   comma-separated values

   
// Run this code

 #include <iostream>
 #include <vector>
 #include <locale>
 #include <sstream>
  
 // This ctype facet classifies commas and endlines as whitespace
 struct csv_whitespace : std::ctype<char> {
     static const mask* make_table()
     {
         // make a copy of the "C" locale table
         static std::vector<mask> v(classic_table(), classic_table() + table_size);
         v[','] |=  space;  // comma will be classified as whitespace
         v[' '] &= ~space;      // space will not be classified as whitespace
         return &v[0];
     }
     csv_whitespace(std::size_t refs = 0) : ctype(make_table(), false, refs) {}
 };
  
 int main()
 {
     std::string in = "Column 1,Column 2,Column 3\\n123,456,789";
     std::string token;
  
     std::cout << "default locale:\\n";
     std::istringstream s1(in);
     while(s1 >> token)
             std::cout << "  " << token << '\\n';
  
     std::cout << "locale with modified ctype:\\n";
     std::istringstream s2(in);
     s2.imbue(std::locale(s2.getloc(), new csv_whitespace));
     while(s2 >> token)
             std::cout << "  " << token<< '\\n';
 }

.SH Output:

 default locale:
   Column
   1,Column
   2,Column
   3
   123,456,789
 locale with modified ctype:
   Column 1
   Column 2
   Column 3
   123
   456
   789

.SH See also

   ctype        defines character classification tables
                \fI(class template)\fP
   ctype_base   defines character classification categories
                \fI(class template)\fP
   ctype_byname creates a ctype facet for the named locale
                \fI(class template)\fP
