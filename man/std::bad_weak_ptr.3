.TH std::bad_weak_ptr 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::bad_weak_ptr \- std::bad_weak_ptr

.SH Synopsis
   Defined in header <memory>
   class bad_weak_ptr;         \fI(since C++11)\fP

   std::bad_weak_ptr is the type of the object thrown as exceptions by the constructors
   of std::shared_ptr that take std::weak_ptr as the argument, when the std::weak_ptr
   refers to an already deleted object.

   std-bad weak ptr-inheritance.svg
   About this image

                                   Inheritance diagram

.SH Member functions

   constructor   constructs the bad_weak_ptr object
                 \fI(public member function)\fP

std::bad_weak_ptr ::bad_weak_ptr()

   bad_weak_ptr() noexcept;

   Constructs a new instance of std::bad_weak_ptr. what() returns an
   implementation-defined null-terminated byte string.

.SH Parameters

   \fI(none)\fP

Inherited from std::exception

.SH Member functions

   destructor   destroys the exception object
   \fB[virtual]\fP    \fI(virtual public member function of std::exception)\fP 
   what         returns an explanatory string
   \fB[virtual]\fP    \fI(virtual public member function of std::exception)\fP 

.SH Example

   
// Run this code

 #include <memory>
 #include <iostream>
 int main()
 {
     std::shared_ptr<int> p1(new int(42));
     std::weak_ptr<int> wp(p1);
     p1.reset();
     try {
         std::shared_ptr<int> p2(wp);
     } catch(const std::bad_weak_ptr& e) {
         std::cout << e.what() << '\\n';
     }
 }

.SH Output:

 std::bad_weak_ptr

.SH See also

   shared_ptr smart pointer with shared object ownership semantics
   \fI(C++11)\fP    \fI(class template)\fP 
   weak_ptr   weak reference to an object managed by std::shared_ptr
   \fI(C++11)\fP    \fI(class template)\fP 

   Hidden category:

     * Pages with unreviewed LWG DR marker
