.TH std::thread::joinable 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::thread::joinable \- std::thread::joinable

.SH Synopsis
   bool joinable() const noexcept;  \fI(since C++11)\fP

   Checks if the thread object identifies an active thread of execution. Specifically,
   returns true if get_id() != std::thread::id(). So a default constructed thread is
   not joinable.

   A thread that has finished executing code, but has not yet been joined is still
   considered an active thread of execution and is therefore joinable.

.SH Parameters

   \fI(none)\fP

.SH Return value

   true if the thread object identifies an active thread of execution, false otherwise

.SH Example

   
// Run this code

 #include <iostream>
 #include <thread>
 #include <chrono>
  
 void foo()
 {
     std::this_thread::sleep_for(std::chrono::seconds(1));
 }
  
 int main()
 {
     std::thread t;
     std::cout << "before starting, joinable: " << std::boolalpha << t.joinable()
               << '\\n';
  
     t = std::thread(foo);
     std::cout << "after starting, joinable: " << t.joinable()
               << '\\n';
  
     t.join();
     std::cout << "after joining, joinable: " << t.joinable()
               << '\\n';
 }

.SH Output:

 before starting, joinable: false
 after starting, joinable: true
 after joining, joinable: false

.SH See also

   get_id returns the id of the thread
          \fI(public member function)\fP 
   join   waits for a thread to finish its execution
          \fI(public member function)\fP 
   detach permits the thread to execute independently from the thread handle
          \fI(public member function)\fP 

.SH References

     * C++11 standard (ISO/IEC 14882:2011):

              * 30.3.1.5 thread members [thread.thread.member]
