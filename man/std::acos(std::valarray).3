.TH std::acos(std::valarray) 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::acos(std::valarray) \- std::acos(std::valarray)

.SH Synopsis
   Defined in header <valarray>
   template< class T >
   valarray<T> acos( const valarray<T>& va );

   For each element in va computes arc cosine of the value of the element.

.SH Parameters

   va - value array to apply the operation to

.SH Return value

   Value array containing arc cosines of the values in va.

.SH Notes

   Unqualified function (acos) is used to perform the computation. If such function is
   not available, std::acos is used due to argument dependent lookup.

   The function can be implemented with the return type different from std::valarray.
   In this case, the replacement type has the following properties:

              * All const member functions of std::valarray are provided.
              * std::valarray, std::slice_array, std::gslice_array, std::mask_array and
                std::indirect_array can be constructed from the replacement type.
              * All functions accepting an argument of type const std::valarray&
                except begin() and end()
                \fI(since C++11)\fP should also accept the replacement type.
              * All functions accepting two arguments of type const std::valarray&
                should accept every combination of const std::valarray& and the
                replacement type.
              * The return type does not add more than two levels of template nesting
                over the most deeply-nested argument type.

.SH Possible implementation

   template<class T>
   valarray<T> acos(const valarray<T>& va)
   {
       valarray<T> other = va;
       for (T &i : other) {
           i = acos(i);
       }
       return other;
   }

.SH Example

   
// Run this code

 #include <cmath>
 #include <iostream>
 #include <valarray>
  
 const double pi = 4.0 * atan(1.0);
  
 int main()
 {
     // take common x-values from unit circle
     std::valarray<double> v1 = {-1.0, -sqrt(3.0)/2.0, -sqrt(2.0)/2.0, -0.5, 0.0, 0.5, sqrt(2.0)/2.0, sqrt(3.0)/2.0, 1.0};
     std::valarray<double> v2 = std::acos(v1) * 180.0 / pi;;
  
     for(double n : v2)
         std::cout << std::fixed << n << ' ';
     std::cout << '\\n';
 }

.SH Output:

 180.000000 150.000000 135.000000 120.000000 90.000000 60.000000 45.000000 30.000000 0.000000

.SH See also

   asin(std::valarray)  applies the function std::asin to each element of valarray
                        \fI(function template)\fP 
   atan(std::valarray)  applies the function std::atan to each element of valarray
                        \fI(function template)\fP 
   atan2(std::valarray) applies the function std::atan2 to a valarray and a value
                        \fI(function template)\fP 
   cos(std::valarray)   applies the function std::cos to each element of valarray
                        \fI(function template)\fP 
   acos                 computes arc cosine (arccos(x))
                        \fI(function)\fP 
   acos(std::complex)   computes arc cosine of a complex number (arccos(z))
   \fI(C++11)\fP              \fI(function template)\fP 

   Hidden category:

     * Pages with unreviewed LWG DR marker
