.TH std::uninitialized_default_construct_n 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::uninitialized_default_construct_n \- std::uninitialized_default_construct_n

.SH Synopsis
   Defined in header <memory>
   template< class ForwardIt, class Size >
   ForwardIt uninitialized_default_construct_n( ForwardIt first, Size \fB(1)\fP \fI(since C++17)\fP
   n );
   template< class ExecutionPolicy, class ForwardIt, class Size >
   ForwardIt uninitialized_default_construct_n( ExecutionPolicy&&     \fB(2)\fP \fI(since C++17)\fP
   policy, ForwardIt first, Size n );

   1) Constructs n objects of type typename iterator_traits<ForwardIt>::value_type in
   the uninitialized storage starting at first by default-initialization, as if by

 for (; n > 0; (void) ++first, --n)
   ::new (static_cast<void*>(std::addressof(*first)))
       typename std::iterator_traits<ForwardIt>::value_type;

   If an exception is thrown during the initialization, the function has no effects.
   2) Same as \fB(1)\fP, but executed according to policy. This overload does not participate
   in overload resolution unless
   std::is_execution_policy_v<std::decay_t<ExecutionPolicy>> is true

.SH Parameters

   first             -          the beginning of the range of elements to initialize
   n                 -          the number of elements to initialize
   policy            -          the execution policy to use. See execution policy for
                                details.
.SH Type requirements
   -
   ForwardIt must meet the requirements of ForwardIterator.
   -
   No increment, assignment, comparison, or indirection through valid instances of
   ForwardIt may throw exceptions.

.SH Return value

   The end of the range of objects (i.e., std::next(first, n)).

.SH Complexity

   Linear in n.

.SH Exceptions

   The overload with a template parameter named ExecutionPolicy reports errors as
   follows:

     * If execution of a function invoked as part of the algorithm throws an exception
       and ExecutionPolicy is one of the three standard policies, std::terminate is
       called. For any other ExecutionPolicy, the behavior is implementation-defined.
     * If the algorithm fails to allocate memory, std::bad_alloc is thrown.

.SH Possible implementation

   template<class ForwardIt, class Size>
   ForwardIt uninitialized_default_construct_n( ForwardIt first, Size n )
   {
       typedef typename std::iterator_traits<ForwardIt>::value_type Value;
       ForwardIt current = first;
       try {
           for (; n > 0 ; (void) ++current, --n) {
               ::new (static_cast<void*>(std::addressof(*current))) Value;
           }
           return current;
       }  catch (...) {
           for (; first != current; ++first) {
               first->~Value();
           }
           throw;
       }
   }

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

   uninitialized_default_construct constructs objects by default-initialization in an
   \fI(C++17)\fP                         uninitialized area of memory, defined by a range
                                   \fI(function template)\fP 
                                   constructs objects by value-initialization in an
   uninitialized_value_construct_n uninitialized area of memory, defined by a start and
   \fI(C++17)\fP                         a count
                                   \fI(function template)\fP 

.SH Category:

     * Todo no example
