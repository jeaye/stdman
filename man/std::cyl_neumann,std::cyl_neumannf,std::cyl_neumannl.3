.TH std::cyl_neumann,std::cyl_neumannf,std::cyl_neumannl 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::cyl_neumann,std::cyl_neumannf,std::cyl_neumannl \- std::cyl_neumann,std::cyl_neumannf,std::cyl_neumannl

.SH Synopsis
   double      cyl_neumann( double ν, double x );

   float       cyl_neumannf( float ν, float x  );            \fB(1)\fP \fI(since C++17)\fP

   long double cyl_neumannl( long double ν, long double x );
   Promoted    cyl_neumann( Arithmetic ν, Arithmetic x );    \fB(2)\fP \fI(since C++17)\fP

   1) Computes the cylindrical Neumann function (also known as Bessel function of the
   second kind or Weber function) of ν and x.
   2) A set of overloads or a function template for all combinations of arguments of
   arithmetic type not covered by \fB(1)\fP. If any argument has integral type, it is cast to
   double. If any argument is long double, then the return type Promoted is also long
   double, otherwise the return type is always double.

.SH Parameters

   ν - the order of the function
   x - the argument of the function)

.SH Return value

   If no errors occur, value of the cylindrical Neumann function (Bessel function of
   the second kind) of ν and x, is returned, that is N
   ν(x) =

   J
   ν(x)cos(νπ)-J
   -ν(x)
   sin(νπ)

   (where J
   ν(x) is std::cyl_bessel_j(ν,x)) for x≥0 and non-integer ν; for integer ν a limit is
   used.

.SH Error handling

   Errors may be reported as specified in math_errhandling

     * If the argument is NaN, NaN is returned and domain error is not reported
     * If ν>=128, the behavior is implementation-defined

.SH Notes

   Implementations that do not support C++17, but support ISO 29124:2010, provide this
   function if __STDCPP_MATH_SPEC_FUNCS__ is defined by the implementation to a value
   at least 201003L and if the user defines __STDCPP_WANT_MATH_SPEC_FUNCS__ before
   including any standard library headers.

   Implementations that do not support ISO 29124:2010 but support TR 19768:2007 (TR1),
   provide this function in the header tr1/cmath and namespace std::tr1

   An implementation of this function is also available in boost.math

.SH Example

   
// Run this code

 #include <cmath>
 #include <iostream>
 int main()
 {
     double pi = std::acos(-1);
     double x = 1.2345;
  
     // spot check for ν == 0.5
     std::cout << "N_.5(" << x << ") = " << std::cyl_neumann(.5, x) << '\\n'
               << "calculated via J = " <<
               (std::cyl_bessel_j(.5,x)*std::cos(.5*pi)
              - std::cyl_bessel_j(-.5,x))/std::sin(.5*pi) << '\\n';
 }

.SH Output:

 N_.5(1.2345) = -0.236973
 calculated via J = -0.236973

.SH External links

   Weisstein, Eric W. "Bessel Function of the Second Kind." From MathWorld--A Wolfram
   Web Resource.

.SH See also

   cyl_bessel_i
   cyl_bessel_if
   cyl_bessel_il regular modified cylindrical Bessel functions
   \fI(C++17)\fP       \fI(function)\fP 
   \fI(C++17)\fP
   \fI(C++17)\fP
   cyl_bessel_j
   cyl_bessel_jf
   cyl_bessel_jl cylindrical Bessel functions (of the first kind)
   \fI(C++17)\fP       \fI(function)\fP 
   \fI(C++17)\fP
   \fI(C++17)\fP
   cyl_bessel_k
   cyl_bessel_kf
   cyl_bessel_kl irregular modified cylindrical Bessel functions
   \fI(C++17)\fP       \fI(function)\fP 
   \fI(C++17)\fP
   \fI(C++17)\fP
