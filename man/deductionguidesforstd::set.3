.TH deductionguidesforstd::set 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
deductionguidesforstd::set \- deductionguidesforstd::set

.SH Synopsis
   Defined in header <set>
   template<class InputIt,

            class Comp = std::less<typename
   std::iterator_traits<InputIt>::value_type>,
            class Alloc = std::allocator<typename                     \fB(1)\fP \fI(since C++17)\fP
   std::iterator_traits<InputIt>::value_type>>
   set(InputIt, InputIt, Comp = Comp(), Alloc = Alloc())

     -> set<typename std::iterator_traits<InputIt>::value_type, Comp,
   Alloc>;
   template<class Key, class Comp = std::less<Key>, class Alloc =
   std::allocator<Key>>
                                                                      \fB(2)\fP \fI(since C++17)\fP
   set(std::initializer_list<Key>, Comp = Comp(), Alloc = Alloc())

     -> set<Key, Comp, Alloc>;
   template<class InputIt, class Alloc>

   set(InputIt, InputIt, Alloc)
     -> set<typename std::iterator_traits<InputIt>::value_type,       \fB(3)\fP \fI(since C++17)\fP

              std::less<typename
   std::iterator_traits<InputIt>::value_type>, Alloc>;
   template<class Key, class Alloc>

   set(std::initializer_list<Key>, Alloc)                             \fB(4)\fP \fI(since C++17)\fP

     -> set<Key, std::less<Key>, Alloc>;

   These deduction guides are provided for set to allow deduction from an iterator
   range (overloads (1,3)) and std::initializer_list (overloads (2,4)). These overloads
   only participate in overload resolution if InputIt satisfies InputIterator, Alloc
   satisfies Allocator, and Comp does not satisfy Allocator.

   Note: the extent to which the library determines that a type does not satisfy
   InputIterator is unspecified, except that as a minimum integral types do not qualify
   as input iterators. Likewise, the extent to which it determines that a type does not
   satisfy Allocator is unspecified, except that as a minimum the member type
   Alloc::value_type must exist and the expression
   std::declval<Alloc&>().allocate(std::size_t{}) must be well-formed when treated as
   an unevaluated operand.

.SH Example

   
// Run this code

 #include <set>
 int main() {
    std::set s = {1,2,3,4}; // guide #2 deduces std::set<int>
    std::set s2(s.begin(), s.end()); // guide #1 deduces std::set<int>
 }
