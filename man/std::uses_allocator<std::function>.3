.TH std::uses_allocator<std::function> 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::uses_allocator<std::function> \- std::uses_allocator<std::function>

.SH Synopsis
   Defined in header <functional>
   template< class R, class... ArgTypes, class Alloc >                    \fI(since C++11)\fP
   struct uses_allocator<std::function<R(ArgTypes...)>, Alloc> :          \fI(until C++17)\fP
   std::true_type { };

   This specialization of std::uses_allocator informs other library components that all
   objects of type std::function support uses-allocator construction, even though they
   do not have a nested allocator_type.

.SH Notes

   std::function's allocator support was poorly specified and inconsistently
   implemented. Some implementations do not support uses-allocator construction at all,
   some provide the needed constructor overloads but ignore the supplied allocator
   argument, and some provide the overloads and use the supplied allocator for
   construction but not when the std::function is reassigned. As a result, allocator
   support was removed in C++17.

Inherited from std::integral_constant

.SH Member constants

   value    true
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP
   operator()    returns value
   \fI(C++14)\fP       \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH See also

   uses_allocator checks if the specified type supports uses-allocator construction
   \fI(C++11)\fP        \fI(class template)\fP 
