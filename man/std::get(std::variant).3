.TH std::get(std::variant) 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::get(std::variant) \- std::get(std::variant)

.SH Synopsis
   Defined in header <variant>
   template <std::size_t I, class... Types>

   constexpr std::variant_alternative_t<
     I, std::variant<Types...>

   >& get(std::variant<Types...>& v);
   template <std::size_t I, class... Types>

   constexpr std::variant_alternative_t<
     I, std::variant<Types...>

   >&& get(std::variant<Types...>&& v);
   template <std::size_t I, class... Types>

   constexpr std::variant_alternative_t<
     I, std::variant<Types...>

   > const& get(const std::variant<Types...>& v); \fB(1)\fP \fI(since C++17)\fP
   template <std::size_t I, class... Types>

   constexpr std::variant_alternative_t<
     I, std::variant<Types...>

   > const&& get(const std::variant<Types...>&&
   v);
   template <class T, class... Types>
   constexpr T& get(std::variant<Types...>& v);
   template <class T, class... Types>
   constexpr T&& get(std::variant<Types...>&& v);
   template <class T, class... Types>                               \fB(2)\fP \fI(since C++17)\fP
   constexpr const T& get(const
   std::variant<Types...>& v);
   template <class T, class... Types>
   constexpr const T&& get(const
   std::variant<Types...>&& v);

   1) Index-based value accessor: If v.index() == I, returns a reference to the value
   stored in v. Otherwise, throws std::bad_variant_access. The call is ill-formed if I
   is not a valid index in the variant.
   2) Type-based value accessor: If v holds the alternative T, returns a reference to
   the value stored in v. Otherwise, throws std::bad_variant_access. The call is
   ill-formed if T is not a unique element of Types....

.SH Parameters

   I    - index to look up
   Type - unique type to look up
   v    - a variant

.SH Return value

   Reference to the value stored in the variant.

.SH Exceptions

   1,2) Throws std::bad_variant_access on errors.

.SH Example

   
// Run this code

 #include <variant>
 #include <string>
  
 int main()
 {
     std::variant<int, float> v{12}, w;
     int i = std::get<int>(v);
     w = std::get<int>(v);
     w = std::get<0>(v); // same effect as the previous line
  
 //  std::get<double>(v); // error: no double in [int, float]
 //  std::get<3>(v);      // error: valid index values are 0 and 1
  
     try {
       std::get<float>(w); // w contains int, not float: will throw
     }
     catch (std::bad_variant_access&) {}
 }

.SH See also

   get_if               obtains a pointer to the value of a pointed-to variant given
   \fI(C++17)\fP              the index or the type (if unique), returns null on error
                        \fI(function template)\fP 
   std::get(std::tuple) tuple accesses specified element
                        \fI(function template)\fP 
   std::get(std::array) accesses an element of an array
                        \fI(function template)\fP 
   std::get(std::pair)  accesses an element of a pair
   \fI(C++11)\fP              \fI(function template)\fP 

.SH Category:

     * Uses of dcl rev begin with nonempty note
