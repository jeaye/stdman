.TH std::deque::erase 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::deque::erase \- std::deque::erase

.SH Synopsis
   iterator erase( iterator pos );                          \fI(until C++11)\fP
   iterator erase( const_iterator pos );                    \fI(since C++11)\fP
   iterator erase( iterator first, iterator last ); \fB(1)\fP                   \fI(until C++11)\fP
   iterator erase( const_iterator first,                \fB(2)\fP               \fI(since C++11)\fP
   const_iterator last );

   Removes specified elements from the container.

   1) Removes the element at pos.
   2) Removes the elements in the range [first; last).

   All iterators and references are invalidated, unless the erased elements are at the
   end or the beginning of the container, in which case only the iterators and
   references to the erased elements are invalidated.

   It is unspecified when the past-the-end iterator is invalidated.       \fI(until C++11)\fP
   The past-the-end iterator is also invalidated unless the erased
   elements are at the beginning of the container and the last element is \fI(since C++11)\fP
   not erased.

   The iterator pos must be valid and dereferenceable. Thus the end() iterator (which
   is valid, but is not dereferencable) cannot be used as a value for pos.

   The iterator first does not need to be dereferenceable if first==last: erasing an
   empty range is a no-op.

.SH Parameters

   pos         - iterator to the element to remove
   first, last - range of elements to remove
.SH Type requirements
   -
   T must meet the requirements of MoveAssignable.

.SH Return value

   Iterator following the last removed element. If the iterator pos refers to the last
   element, the end() iterator is returned.

.SH Exceptions

   Does not throw unless an exception is thrown by the assignment operator of T.

.SH Complexity

   Linear: the number of calls to the destructor of T is the same as the number of
   elements erased, the number of calls to the assignment operator of T is no more than
   the lesser of the number of elements before the erased elements and the number of
   elements after the erased elements

.SH Example

   
// Run this code

 #include <deque>
 #include <iostream>
  
  
 int main( )
 {
     std::deque<int> c{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
     for (auto &i : c) {
         std::cout << i << " ";
     }
     std::cout << '\\n';
  
     c.erase(c.begin());
  
     for (auto &i : c) {
         std::cout << i << " ";
     }
     std::cout << '\\n';
  
     c.erase(c.begin()+2, c.begin()+5);
  
     for (auto &i : c) {
         std::cout << i << " ";
     }
     std::cout << '\\n';
  
     // Erase all even numbers (C++11 and later)
     for (auto it = c.begin(); it != c.end(); ) {
         if (*it % 2 == 0) {
             it = c.erase(it);
         } else {
             ++it;
         }
     }
  
     for (auto &i : c) {
         std::cout << i << " ";
     }
     std::cout << '\\n';
 }

.SH Output:

 0 1 2 3 4 5 6 7 8 9
 1 2 3 4 5 6 7 8 9
 1 2 6 7 8 9
 1 7 9

.SH See also

   clear clears the contents
         \fI(public member function)\fP 
