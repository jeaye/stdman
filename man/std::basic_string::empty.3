.TH std::basic_string::empty 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::basic_string::empty \- std::basic_string::empty

.SH Synopsis
   bool empty() const;                (until C++20)
   [[nodiscard]] bool empty() const;  (since C++20)

   Checks if the string has no characters, i.e. whether begin() == end().

.SH Parameters

   \fI(none)\fP

.SH Return value

   true if the string is empty, false otherwise

.SH Exceptions

   \fI(none)\fP                    \fI(until C++11)\fP
   noexcept specification:  
   noexcept                  \fI(since C++11)\fP
     

.SH Complexity

   Constant.

.SH Example

   
// Run this code

 #include <iostream>
 #include <string>
  
 int main()
 {
     std::string s;
     std::boolalpha(std::cout);
     std::cout << "s.empty():" << s.empty() << "\\t s:'" << s << "'\\n";
  
     s = "Exemplar";
     std::cout << "s.empty():" << s.empty() << "\\t s:'" << s << "'\\n";
  
     s = "";
     std::cout << "s.empty():" << s.empty() << "\\t s:'" << s << "'\\n";
 }

.SH Output:

 s.empty():true   s:''
 s.empty():false  s:'Exemplar'
 s.empty():true   s:''

.SH See also

   size   returns the number of characters
   length \fI(public member function)\fP 

.SH Category:

     * unconditionally noexcept

   Hidden categories:

     * Pages with unreviewed unconditional noexcept template
     * Pages with unreviewed noexcept template
