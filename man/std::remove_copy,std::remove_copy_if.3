.TH std::remove_copy,std::remove_copy_if 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::remove_copy,std::remove_copy_if \- std::remove_copy,std::remove_copy_if

.SH Synopsis
   Defined in header <algorithm>
   template< class InputIt, class OutputIt, class T
   >

   OutputIt remove_copy( InputIt first, InputIt             (until C++20)
   last, OutputIt d_first,

                         const T& value );
   template< class InputIt, class OutputIt, class T
   >

   constexpr OutputIt remove_copy( InputIt first,           (since C++20)
   InputIt last, OutputIt d_first,

                                   const T& value
   );
   template< class ExecutionPolicy, class
   ForwardIt1, class ForwardIt2, class T >

   ForwardIt2 remove_copy( ExecutionPolicy&&            \fB(2)\fP \fI(since C++17)\fP
   policy, ForwardIt1 first, ForwardIt1 last,

                           ForwardIt2 d_first,
   const T& value );
   template< class InputIt, class OutputIt, class   \fB(1)\fP
   UnaryPredicate >

   OutputIt remove_copy_if( InputIt first, InputIt                        (until C++20)
   last, OutputIt d_first,

                            UnaryPredicate p );
   template< class InputIt, class OutputIt, class
   UnaryPredicate >

   constexpr OutputIt remove_copy_if( InputIt                             (since C++20)
   first, InputIt last, OutputIt d_first,               \fB(3)\fP

                                    
    UnaryPredicate p );
   template< class ExecutionPolicy, class
   ForwardIt1, class ForwardIt2, class
   UnaryPredicate >

   ForwardIt2 remove_copy_if( ExecutionPolicy&&             \fB(4)\fP           \fI(since C++17)\fP
   policy, ForwardIt1 first, ForwardIt1 last,

                              ForwardIt2 d_first,
   UnaryPredicate p );

   Copies elements from the range [first, last), to another range beginning at d_first,
   omitting the elements which satisfy specific criteria. Source and destination ranges
   cannot overlap.

   1) Ignores all elements that are equal to value.
   3) Ignores all elements for which predicate p returns true.
   2,4) Same as (1,3), but executed according to policy. This overload only
   participates in overload resolution if
   std::is_execution_policy_v<std::decay_t<ExecutionPolicy>> is true

.SH Parameters

   first, last - the range of elements to copy
   d_first     - the beginning of the destination range.
   value       - the value of the elements not to copy
   policy      - the execution policy to use. See execution policy for details.
.SH Type requirements
   -
   InputIt must meet the requirements of InputIterator.
   -
   OutputIt must meet the requirements of OutputIterator.
   -
   ForwardIt1, ForwardIt2 must meet the requirements of ForwardIterator.
   -
   UnaryPredicate must meet the requirements of Predicate.

.SH Return value

   Iterator to the element past the last element copied.

.SH Complexity

   Exactly last - first applications of the predicate.

   For the overloads with an ExecutionPolicy, there may be a performance cost if
   ForwardIt1's value_type is not MoveConstructible.

.SH Exceptions

   The overloads with a template parameter named ExecutionPolicy report errors as
   follows:

     * If execution of a function invoked as part of the algorithm throws an exception
       and ExecutionPolicy is one of the three standard policies, std::terminate is
       called. For any other ExecutionPolicy, the behavior is implementation-defined.
     * If the algorithm fails to allocate memory, std::bad_alloc is thrown.

.SH Possible implementation

.SH First version
   template<class InputIt, class OutputIt, class T>
   OutputIt remove_copy(InputIt first, InputIt last,
                        OutputIt d_first, const T& value)
   {
       for (; first != last; ++first) {
           if (!(*first == value)) {
               *d_first++ = *first;
           }
       }
       return d_first;
   }
.SH Second version
   template<class InputIt, class OutputIt, class UnaryPredicate>
   OutputIt remove_copy_if(InputIt first, InputIt last,
                           OutputIt d_first, UnaryPredicate p)
   {
       for (; first != last; ++first) {
           if (!p(*first)) {
               *d_first++ = *first;
           }
       }
       return d_first;
   }

.SH Example

   The following code outputs a string while erasing the spaces on the fly.

   
// Run this code

 #include <algorithm>
 #include <iterator>
 #include <string>
 #include <iostream>
 int main()
 {
     std::string str = "Text with some   spaces";
     std::cout << "before: " << str << "\\n";
  
     std::cout << "after:  ";
     std::remove_copy(str.begin(), str.end(),
                      std::ostream_iterator<char>(std::cout), ' ');
     std::cout << '\\n';
 }

.SH Output:

 before: Text with some   spaces
 after:  Textwithsomespaces

.SH See also

   remove         removes elements satisfying specific criteria
   remove_if      \fI(function template)\fP 
   copy           copies a range of elements to a new location
   copy_if        \fI(function template)\fP 
   \fI(C++11)\fP
   partition_copy copies a range dividing the elements into two groups
   \fI(C++11)\fP        \fI(function template)\fP 
