.TH std::stoul,std::stoull 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::stoul,std::stoull \- std::stoul,std::stoull

.SH Synopsis
   Defined in header <string>
   unsigned long      stoul( const std::string& str, std::size_t* pos
   = 0, int base = 10 );                                              \fB(1)\fP \fI(since C++11)\fP
   unsigned long      stoul( const std::wstring& str, std::size_t*
   pos = 0, int base = 10 );
   unsigned long long stoull( const std::string& str, std::size_t*
   pos = 0, int base = 10 );                                          \fB(2)\fP \fI(since C++11)\fP
   unsigned long long stoull( const std::wstring& str, std::size_t*
   pos = 0, int base = 10 );

   Interprets an unsigned integer value in the string str.

   1) calls std::strtoul(str.c_str(), &ptr, base) or std::wcstoul(str.c_str(), &ptr,
   base)
   2) calls std::strtoull(str.c_str(), &ptr, base) or std::wcstoull(str.c_str(), &ptr,
   base)

   Discards any whitespace characters (as identified by calling isspace()) until the
   first non-whitespace character is found, then takes as many characters as possible
   to form a valid base-n (where n=base) unsigned integer number representation and
   converts them to an integer value. The valid unsigned integer value consists of the
   following parts:

     * (optional) plus or minus sign
     * (optional) prefix \fB(0)\fP indicating octal base (applies only when the base is 8 or
       0)
     * (optional) prefix (0x or 0X) indicating hexadecimal base (applies only when the
       base is 16 or 0)
     * a sequence of digits

   The set of valid values for base is {0,2,3,...,36}. The set of valid digits for
   base-2 integers is {0,1}, for base-3 integers is {0,1,2}, and so on. For bases
   larger than 10, valid digits include alphabetic characters, starting from Aa for
   base-11 integer, to Zz for base-36 integer. The case of the characters is ignored.

   Additional numeric formats may be accepted by the currently installed C locale.

   If the value of base is 0, the numeric base is auto-detected: if the prefix is 0,
   the base is octal, if the prefix is 0x or 0X, the base is hexadecimal, otherwise the
   base is decimal.

   If the minus sign was part of the input sequence, the numeric value calculated from
   the sequence of digits is negated as if by unary minus in the result type, which
   applies unsigned integer wraparound rules.

   If pos is not a null pointer, then a pointer ptr, internal to the conversion
   functions, will receive the address of the first unconverted character in
   str.c_str(), and the index of that character will be calculated and stored in *pos,
   giving the number of characters that were processed by the conversion.

.SH Parameters

   str  - the string to convert
   pos  - address of an integer to store the number of characters processed
   base - the number base

.SH Return value

   The string converted to the specified unsigned integer type.

.SH Exceptions

     * std::invalid_argument if no conversion could be performed
     * std::out_of_range if the converted value would fall out of the range of the
       result type or if the underlying function (std::strtoul or std::strtoull) sets
       errno to ERANGE.

.SH See also

   stoi
   stol
   stoll   converts a string to a signed integer
   \fI(C++11)\fP \fI(function)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   stof
   stod
   stold   converts a string to a floating point value
   \fI(C++11)\fP \fI(function)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
