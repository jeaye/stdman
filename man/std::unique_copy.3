.TH std::unique_copy 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::unique_copy \- std::unique_copy

.SH Synopsis
   Defined in header <algorithm>
   template< class InputIt, class OutputIt >

   OutputIt unique_copy( InputIt first, InputIt             (until C++20)
   last,

                         OutputIt d_first );
   template< class InputIt, class OutputIt >

   constexpr OutputIt unique_copy( InputIt first,
   InputIt last,                                            (since C++20)

                                   OutputIt d_first
   );
   template< class ExecutionPolicy, class
   ForwardIt1, class ForwardIt2 >

   ForwardIt2 unique_copy( ExecutionPolicy&&            \fB(2)\fP \fI(since C++17)\fP
   policy, ForwardIt1 first, ForwardIt1 last,

                           ForwardIt2 d_first );
   template< class InputIt, class OutputIt, class
   BinaryPredicate >
                                                    \fB(1)\fP
   OutputIt unique_copy( InputIt first, InputIt                           (until C++20)
   last,

                         OutputIt d_first,
   BinaryPredicate p );
   template< class InputIt, class OutputIt, class
   BinaryPredicate >

   constexpr OutputIt unique_copy( InputIt first,                         (since C++20)
   InputIt last,                                        \fB(3)\fP

                                   OutputIt
   d_first, BinaryPredicate p );
   template< class ExecutionPolicy, class
   ForwardIt1, class ForwardIt2, class
   BinaryPredicate >

   ForwardIt2 unique_copy( ExecutionPolicy&&                \fB(4)\fP           \fI(since C++17)\fP
   policy, ForwardIt1 first, ForwardIt1 last,

                           ForwardIt2 d_first,
   BinaryPredicate p );

   Copies the elements from the range [first, last), to another range beginning at
   d_first in such a way that there are no consecutive equal elements. Only the first
   element of each group of equal elements is copied.

   1) Elements are compared using operator==.
   3) Elements are compared using the given binary predicate p.
   2,4) Same as (1,3), but executed according to policy. This overload only
   participates in overload resolution if
   std::is_execution_policy_v<std::decay_t<ExecutionPolicy>> is true

.SH Parameters

   first, last          -          the range of elements to process
   d_first              -          the beginning of the destination range
   policy               -          the execution policy to use. See execution policy
                                   for details.
                                   binary predicate which returns true if the elements
                                   should be treated as equal.

                                   The signature of the predicate function should be
                                   equivalent to the following:

   p                    -           bool pred(const Type1 &a, const Type2 &b);

                                   The signature does not need to have const &, but the
                                   function must not modify the objects passed to it.
                                   The types Type1 and Type2 must be such that an
                                   object of type InputIt can be dereferenced and then
                                   implicitly converted to both of them. 
.SH Type requirements
   -
   InputIt must meet the requirements of InputIterator.
   -
   OutputIt must meet the requirements of OutputIterator.
   -
   ForwardIt1, ForwardIt2 must meet the requirements of ForwardIterator.
   -
   The type of dereferenced InputIt must meet the requirements of CopyAssignable. if
   InputIt does not satisfy ForwardIterator
   -
   The type of dereferenced InputIt must meet the requirements of CopyConstructible. if
   neither InputIt nor OutputIt satisfies ForwardIterator, or if InputIt does not
   satisfy ForwardIterator and the value type of InputIt differs from that of OutputIt

.SH Return value

   Output iterator to the element past the last written element

.SH Complexity

   For nonempty ranges, exactly std::distance(first, last) - 1 applications of the
   corresponding comparator.

.SH Exceptions

   The overloads with a template parameter named ExecutionPolicy report errors as
   follows:

     * If execution of a function invoked as part of the algorithm throws an exception
       and ExecutionPolicy is one of the three standard policies, std::terminate is
       called. For any other ExecutionPolicy, the behavior is implementation-defined.
     * If the algorithm fails to allocate memory, std::bad_alloc is thrown.

.SH Notes

   If InputIt satisfies ForwardIterator, this function rereads the input in order to
   detect duplicates.

   Otherwise, if OutputIt satisfies ForwardIterator, and the value type of InputIt is
   the same as that of OutputIt, this function compare *d_first to *first.

   Otherwise, this function compares *first to a local element copy.

   For the overloads with an ExecutionPolicy, there may be a performance cost if the
   value type of ForwardIterator1 is not both CopyConstructible and CopyAssignable

.SH Example

   
// Run this code

 #include <string>
 #include <iostream>
 #include <algorithm>
 #include <iterator>
  
 int main()
 {
     std::string s1 = "The      string    with many       spaces!";
     std::cout << "before: " << s1 << '\\n';
  
     std::string s2;
     std::unique_copy(s1.begin(), s1.end(), std::back_inserter(s2),
                      [](char c1, char c2){ return c1 == ' ' && c2 == ' '; });
  
     std::cout << "after:  " << s2 << '\\n';
 }

.SH Output:

 before: The      string    with many       spaces!
 after:  The string with many spaces!

.SH See also

                 finds the first two adjacent items that are equal (or satisfy a given
   adjacent_find predicate)
                 \fI(function template)\fP 
   unique        removes consecutive duplicate elements in a range
                 \fI(function template)\fP 
