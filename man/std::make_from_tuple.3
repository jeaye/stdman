.TH std::make_from_tuple 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::make_from_tuple \- std::make_from_tuple

.SH Synopsis
   Defined in header <tuple>
   template <class T, class Tuple>          \fI(since C++17)\fP
   constexpr T make_from_tuple(Tuple&& t);

   Construct an object of type T, using the elements of the tuple t as the arguments to
   the constructor.

.SH Parameters

   t - tuple whose elements to be used as arguments to the constructor of T

.SH Return value

   The constructed T object.

.SH Notes

   The tuple need not be std::tuple, and instead may be anything that supports std::get
   and std::tuple_size; in particular, std::array and std::pair may be used.

   Due to guaranteed copy elision, T need not be movable.

.SH Possible implementation

   namespace detail {
   template <class T, class Tuple, std::size_t... I>
   constexpr T make_from_tuple_impl( Tuple&& t, std::index_sequence<I...> )
   {
     return T(std::get<I>(std::forward<Tuple>(t))...);
   }
   } // namespace detail
    
   template <class T, class Tuple>
   constexpr T make_from_tuple( Tuple&& t )
   {
       return detail::make_from_tuple_impl<T>(std::forward<Tuple>(t),
           std::make_index_sequence<std::tuple_size_v<std::remove_reference_t<Tuple>>>{});
   }

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

   make_tuple       creates a tuple object of the type defined by the argument types
                    \fI(function template)\fP 
   forward_as_tuple creates a tuple of rvalue references
                    \fI(function template)\fP 
   apply            calls a function with a tuple of arguments
   \fI(C++17)\fP          \fI(function template)\fP 

.SH Category:

     * Todo no example
