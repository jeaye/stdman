.TH std::experimental::filesystem::directory_iterator 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::experimental::filesystem::directory_iterator \- std::experimental::filesystem::directory_iterator

.SH Synopsis
   Defined in header <experimental/filesystem>
   class directory_iterator;                    (filesystem TS)

   directory_iterator is an InputIterator that iterates over the directory_entry
   elements of a directory (but does not visit the subdirectories). The iteration order
   is unspecified, except that each directory entry is visited only once. The special
   pathnames dot and dot-dot are skipped.

   If the directory_iterator is advanced past the last directory entry, it becomes
   equal to the default-constructed iterator, also known as the end iterator. Two end
   iterators are always equal, dereferencing or incrementing the end iterator is
   undefined behavior.

   If a file or a directory is deleted or added to the directory tree after the
   directory iterator has been created, it is unspecified whether the change would be
   observed through the iterator.

.SH Member types

   Member type       Definition
   value_type        filesystem::directory_entry
   difference_type   std::ptrdiff_t
   pointer           const filesystem::directory_entry*
   reference         const filesystem::directory_entry&
   iterator_category std::input_iterator_tag

.SH Member functions

   constructor   constructs a directory iterator
                 \fI(public member function)\fP 
   destructor    default destructor
                 \fI(public member function)\fP 
   operator=     assigns contents
                 \fI(public member function)\fP 
   operator*     accesses the pointed-to entry
   operator->    \fI(public member function)\fP 
   increment     advances to the next entry
   operator++    \fI(public member function)\fP 

.SH Non-member functions

   filesystem::begin(filesystem::directory_iterator) range-based for loop support
   filesystem::end(filesystem::directory_iterator)   \fI(function)\fP 

   Additionally, operator== and operator!= are provided, either as members or as
   non-members, as required by InputIterator

.SH Example

   
// Run this code

 #include <fstream>
 #include <iostream>
 #include <experimental/filesystem>
 namespace fs = std::experimental::filesystem;
  
 int main()
 {
     fs::create_directories("sandbox/a/b");
     std::ofstream("sandbox/file1.txt");
     std::ofstream("sandbox/file2.txt");
     for(auto& p: fs::directory_iterator("sandbox"))
         std::cout << p << '\\n';
     fs::remove_all("sandbox");
 }

.SH Possible output:

 "sandbox/a"
 "sandbox/file1.txt"
 "sandbox/file2.txt"

.SH See also

                                an iterator to the contents of a directory and its
   recursive_directory_iterator subdirectories
                                \fI(class)\fP 
   directory_options            options for iterating directory contents
                                \fI(enum)\fP 
   directory_entry              a directory entry
                                \fI(class)\fP 
