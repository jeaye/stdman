.TH std::filesystem::current_path 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::filesystem::current_path \- std::filesystem::current_path

.SH Synopsis
   Defined in header <filesystem>
   path current_path();                                 \fB(1)\fP \fI(since C++17)\fP
   path current_path( std::error_code& ec );            \fB(2)\fP \fI(since C++17)\fP
   void current_path( const std::filesystem::path& p ); \fB(3)\fP \fI(since C++17)\fP
   void current_path( const std::filesystem::path& p,   \fB(4)\fP \fI(since C++17)\fP
                      std::error_code& ec ) noexcept;

   Returns or changes the current path.

   1-2) Returns the absolute path of the current working directory, obtained as if (in
   native format) by POSIX getcwd. \fB(2)\fP returns path() if error occurs.
   3-4) Changes the current working directory to p, as if by POSIX chdir.

.SH Parameters

   p  - path to change the current working directory to
   ec - out-parameter for error reporting in the non-throwing overloads

.SH Return value

   1-2) Returns the current working directory.
   3-4) \fI(none)\fP

.SH Exceptions

   1-2) The overload that does not take a std::error_code& parameter throws
   filesystem_error on underlying OS API errors, constructed with the OS error code as
   the error code argument. The overload taking a std::error_code& parameter sets it to
   the OS API error code if an OS API call fails, and executes ec.clear() if no errors
   occur. Any overload not marked noexcept may throw std::bad_alloc if memory
   allocation fails.
   3-4) The overload that does not take a std::error_code& parameter throws
   filesystem_error on underlying OS API errors, constructed with p as the first
   argument and the OS error code as the error code argument. The overload taking a
   std::error_code& parameter sets it to the OS API error code if an OS API call fails,
   and executes ec.clear() if no errors occur. Any overload not marked noexcept may
   throw std::bad_alloc if memory allocation fails.

.SH Notes

   The current working directory is the directory, associated with the process, that is
   used as the starting location in pathname resolution for relative paths.

   The current path as returned by many operating systems is a dangerous global
   variable. It may be changed unexpectedly by third-party or system library functions,
   or by another thread.

.SH Example

   
// Run this code

 #include <iostream>
 #include <filesystem>
 namespace fs = std::filesystem;
 int main()
 {
     std::cout << "Current path is " << fs::current_path() << '\\n';
 }

.SH Possible output:

 Current path is "D:/local/ConsoleApplication1"
