.TH std::data 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::data \- std::data

.SH Synopsis
   Defined in header <iterator>
   template <class C>                                             \fB(1)\fP \fI(since C++17)\fP
   constexpr auto data(C& c) -> decltype(c.data());
   template <class C>                                             \fB(2)\fP \fI(since C++17)\fP
   constexpr auto data(const C& c) -> decltype(c.data());
   template <class T, std::size_t N>                              \fB(3)\fP \fI(since C++17)\fP
   constexpr T* data(T (&array)[N]) noexcept;
   template <class E>                                             \fB(4)\fP \fI(since C++17)\fP
   constexpr const E* data(std::initializer_list<E> il) noexcept;

   Returns a pointer to the block of memory containing the elements of the container.

   1,2) returns c.data()
   3) returns array
   4) returns il.begin()

.SH Parameters

   c     - a container with a data() method
   array - an array of arbitrary type
   il    - an initializer list

.SH Return value

   A pointer to the block of memory containing the elements of the container.

.SH Notes

   In addition to being included in <iterator>, std::data is guaranteed to become
   available if any of the following headers are included: <array>, <deque>,
   <forward_list>, <list>, <map>, <regex>, <set>, <string>, <unordered_map>,
   <unordered_set>, and <vector>.

.SH Possible implementation

.SH First version
   template <class C>
   constexpr auto data(C& c) -> decltype(c.data())
   {
       return c.data();
   }
.SH Second version
   template <class C>
   constexpr auto data(const C& c) -> decltype(c.data())
   {
       return c.data();
   }
                           Third version
   template <class T, std::size_t N>
   constexpr T* data(T (&array)[N]) noexcept
   {
       return array;
   }
                          Fourth version
   template <class E>
   constexpr const E* data(std::initializer_list<E> il) noexcept
   {
       return il.begin();
   }

.SH Example

    This section is incomplete
    Reason: no example

.SH Category:

     * Todo no example
