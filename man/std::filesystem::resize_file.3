.TH std::filesystem::resize_file 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::filesystem::resize_file \- std::filesystem::resize_file

.SH Synopsis
   Defined in header <filesystem>
   void resize_file(const std::filesystem::path& p,

                    std::uintmax_t new_size);
   void resize_file(const std::filesystem::path& p,  \fI(since C++17)\fP
                    std::uintmax_t new_size,

                    std::error_code& ec) noexcept;

   Changes the size of the regular file named by p as if by POSIX truncate: if the file
   size was previously larger than new_size, the remainder of the file is discarded. If
   the file was previously smaller than new_size, the file size is increased and the
   new area appears as if zero-filled.

.SH Parameters

   p        - path to resize
   new_size - size that the file will now have
   ec       - out-parameter for error reporting in the non-throwing overload

.SH Return value

   \fI(none)\fP

.SH Exceptions

   The overload that does not take a std::error_code& parameter throws filesystem_error
   on underlying OS API errors, constructed with p as the first argument and the OS
   error code as the error code argument. The overload taking a std::error_code&
   parameter sets it to the OS API error code if an OS API call fails, and executes
   ec.clear() if no errors occur. Any overload not marked noexcept may throw
   std::bad_alloc if memory allocation fails.

.SH Notes

   On systems that support sparse files, increasing the file size does not increase the
   space it occupies on the file system: space allocation takes place only when
   non-zero bytes are written to the file.

.SH Example

   demonstrates the effect of creating a sparse file on the free space

   
// Run this code

 #include <iostream>
 #include <iomanip>
 #include <fstream>
 #include <filesystem>
 namespace fs = std::filesystem;
 int main()
 {
     fs::path p = fs::current_path() / "example.bin";
     std::ofstream(p).put('a');
     std::cout << "File size: " << std::setw(10) << fs::file_size(p)
               << " Free space: " << fs::space(p).free << '\\n';
     fs::resize_file(p, 1024*1024*1024); // resize to 1 G
     std::cout << "File size: " << fs::file_size(p)
               << " Free space: " << fs::space(p).free << '\\n';
     fs::remove(p);
 }

.SH Possible output:

 File size:          1 Free space: 3724541952
 File size: 1073741824 Free space: 3724476416

.SH See also

   file_size returns the size of a file
   \fI(C++17)\fP   \fI(function)\fP 
   space     determines available free space on the file system
   \fI(C++17)\fP   \fI(function)\fP 
