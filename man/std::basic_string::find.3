.TH std::basic_string::find 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::basic_string::find \- std::basic_string::find

.SH Synopsis
   size_type find( const basic_string& str, size_type pos = 0 ) const \fB(1)\fP
   size_type find( const CharT* s, size_type pos, size_type count )   \fB(2)\fP
   const;
   size_type find( const CharT* s, size_type pos = 0 ) const;         \fB(3)\fP
   size_type find( CharT ch, size_type pos = 0 ) const;               \fB(4)\fP
   size_type find( std::basic_string_view<CharT, Traits> sv,          \fB(5)\fP \fI(since C++17)\fP
                   size_type pos = 0) const

   Finds the first substring equal to the given character sequence. Search begins at
   pos, i.e. the found substring must not begin in a position preceding pos.

   1) Finds the first substring equal to str.
   2) Finds the first substring equal to the first count characters of the character
   string pointed to by s. s can include null characters.
   3) Finds the first substring equal to the character string pointed to by s. The
   length of the string is determined by the first null character.
   4) Finds the first character ch (treated as a single-character substring by the
   formal rules below).
   5) Finds the first substring equal to the string view sv.

   Formally, a substring str is said to be found at position xpos if all of the
   following is true:

     * xpos >= pos
     * xpos + str.size() <= size()
     * for all positions n in str, Traits::eq(at(xpos+n), str.at(n))

   In particular, this implies that

     * a substring can be found only if pos <= size() - str.size()
     * an empty substring is found at pos if and only if pos <= size()
     * for a non-empty substring, if pos >= size(), the function always returns npos.

.SH Parameters

   str   - string to search for
   pos   - position at which to start the search
   count - length of substring to search for
   s     - pointer to a character string to search for
   ch    - character to search for
   sv    - std::basic_string_view to search for

.SH Return value

   Position of the first character of the found substring or npos if no such substring
   is found.

.SH Exceptions

   1-4) \fI(none)\fP               \fI(until C++11)\fP
   1,4)
   noexcept specification:   \fI(since C++11)\fP
   noexcept                  \fI(until C++14)\fP
     
   2,3) \fI(none)\fP
   1)
   noexcept specification:  
   noexcept                  \fI(since C++14)\fP
     
   2,3,4) \fI(none)\fP
   5)
   noexcept specification:   \fI(since C++17)\fP
   noexcept
     

.SH Example

   
// Run this code

 #include <string>
 #include <iostream>
  
 void print(std::string::size_type n, std::string const &s)
 {
     if (n == std::string::npos) {
         std::cout << "not found\\n";
     } else {
         std::cout << "found: " << s.substr(n) << '\\n';
     }
 }
  
 int main()
 {
     std::string::size_type n;
     std::string const s = "This is a string";
  
     // search from beginning of string
     n = s.find("is");
     print(n, s);
  
     // search from position 5
     n = s.find("is", 5);
     print(n, s);
  
     // find a single character
     n = s.find('a');
     print(n, s);
  
     // find a single character
     n = s.find('q');
     print(n, s);
 }

.SH Output:

 found: is is a string
 found: is a string
 found: a string
 not found

.SH See also

   strstr            finds the first occurrence of a substring of characters
                     \fI(function)\fP 
                     finds the first occurrence of a wide string within another wide
   wcsstr            string
                     \fI(function)\fP 
   strchr            finds the first occurrence of a character
                     \fI(function)\fP 
   wcschr            finds the first occurrence of a wide character in a wide string
                     \fI(function)\fP 
   rfind             find the last occurrence of a substring
                     \fI(public member function)\fP 
   find_first_of     find first occurrence of characters
                     \fI(public member function)\fP 
   find_first_not_of find first absence of characters
                     \fI(public member function)\fP 
   find_last_of      find last occurrence of characters
                     \fI(public member function)\fP 
   find_last_not_of  find last absence of characters
                     \fI(public member function)\fP 
   search            searches for a range of elements
                     \fI(function template)\fP 

.SH Category:

     * unconditionally noexcept

   Hidden categories:

     * Pages with unreviewed unconditional noexcept template
     * Pages with unreviewed noexcept template
