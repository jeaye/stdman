.TH std::tuple 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::tuple \- std::tuple

.SH Synopsis
   Defined in header <tuple>
   template< class... Types >  \fI(since C++11)\fP
   class tuple;

   Class template std::tuple is a fixed-size collection of heterogeneous values. It is
   a generalization of std::pair.

   If (std::is_trivially_destructible_v<Types> && ...) is true, the       \fI(since C++17)\fP
   destructor of tuple is trivial.

.SH Template parameters

   Types... - the types of the elements that the tuple stores. Empty list is supported.

.SH Member functions

   constructor   constructs a new tuple
                 \fI(public member function)\fP
   operator=     assigns the contents of one tuple to another
                 \fI(public member function)\fP
   swap          swaps the contents of two tuples
                 \fI(public member function)\fP

.SH Non-member functions

                         creates a tuple object of the type defined by the argument
   make_tuple            types
                         \fI(function template)\fP 
                         creates a tuple of lvalue references or unpacks a tuple into
   tie                   individual objects
                         \fI(function template)\fP 
   forward_as_tuple      creates a tuple of rvalue references
                         \fI(function template)\fP 
   tuple_cat             creates a tuple by concatenating any number of tuples
                         \fI(function template)\fP 
   std::get(std::tuple)  tuple accesses specified element
                         \fI(function template)\fP 
   operator==
   operator!=
   operator<             lexicographically compares the values in the tuple
   operator<=            \fI(function template)\fP 
   operator>
   operator>=
   std::swap(std::tuple) specializes the std::swap algorithm
   \fI(C++11)\fP               \fI(function template)\fP 

.SH Helper classes

   tuple_size                      obtains the size of tuple at compile time
                                   \fI(class template specialization)\fP 
   tuple_element                   obtains the type of the specified element
                                   \fI(class template specialization)\fP 
   std::uses_allocator<std::tuple> specializes the std::uses_allocator type trait
   \fI(C++11)\fP                         \fI(class template specialization)\fP 
                                   placeholder to skip an element when unpacking a
   ignore                          tuple using tie
                                   (constant) 

   Deduction guides\fI(since C++17)\fP

.SH Notes

   Until C++17, a function could not return a tuple using list-initialization:

 std::tuple<int, int> foo_tuple()
 {
   return {1, -1};  // Error until C++17
   return std::make_tuple(1, -1); // Always works
 }

.SH Example

   
// Run this code

 #include <tuple>
 #include <iostream>
 #include <string>
 #include <stdexcept>
  
 std::tuple<double, char, std::string> get_student(int id)
 {
     if (id == 0) return std::make_tuple(3.8, 'A', "Lisa Simpson");
     if (id == 1) return std::make_tuple(2.9, 'C', "Milhouse Van Houten");
     if (id == 2) return std::make_tuple(1.7, 'D', "Ralph Wiggum");
     throw std::invalid_argument("id");
 }
  
 int main()
 {
     auto student0 = get_student(0);
     std::cout << "ID: 0, "
               << "GPA: " << std::get<0>(student0) << ", "
               << "grade: " << std::get<1>(student0) << ", "
               << "name: " << std::get<2>(student0) << '\\n';
  
     double gpa1;
     char grade1;
     std::string name1;
     std::tie(gpa1, grade1, name1) = get_student(1);
     std::cout << "ID: 1, "
               << "GPA: " << gpa1 << ", "
               << "grade: " << grade1 << ", "
               << "name: " << name1 << '\\n';
 }

.SH Output:

 ID: 0, GPA: 3.8, grade: A, name: Lisa Simpson
 ID: 1, GPA: 2.9, grade: C, name: Milhouse Van Houten

.SH References

     * C++11 standard (ISO/IEC 14882:2011):

              * 20.4 Tuples [tuple]
