.TH std::is_object 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_object \- std::is_object

.SH Synopsis
   Defined in header <type_traits>
   template< class T >              \fI(since C++11)\fP
   struct is_object;

   If T is an object type (that is any possibly cv-qualified type other than function,
   reference, or void types), provides the member constant value equal true. For any
   other type, value is false.

.SH Template parameters

   T - a type to check

   Helper variable template

   template< class T >                                       \fI(since C++17)\fP
   inline constexpr bool is_object_v = is_object<T>::value;

   

Inherited from std::integral_constant

.SH Member constants

   value    true if T is an object type , false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP
   operator()    returns value
   \fI(C++14)\fP       \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Possible implementation

   template< class T>
   struct is_object : std::integral_constant<bool,
                        std::is_scalar<T>::value ||
                        std::is_array<T>::value  ||
                        std::is_union<T>::value  ||
                        std::is_class<T>::value> {};

.SH Example

   
// Run this code

 #include <iostream>
 #include <type_traits>
  
 int main() {
     class cls {};
     std::cout << std::boolalpha;
     std::cout << std::is_object<int>::value << '\\n';
     std::cout << std::is_object<int&>::value << '\\n';
     std::cout << std::is_object<cls>::value << '\\n';
     std::cout << std::is_object<cls&>::value << '\\n';
 }

.SH Output:

 true
 false
 true
 false

.SH See also

   is_scalar checks if a type is scalar type
   \fI(C++11)\fP   \fI(class template)\fP 
   is_array  checks if a type is an array type
   \fI(C++11)\fP   \fI(class template)\fP 
   is_union  checks if a type is an union type
   \fI(C++11)\fP   \fI(class template)\fP 
   is_class  checks if a type is a non-union class type
   \fI(C++11)\fP   \fI(class template)\fP 
