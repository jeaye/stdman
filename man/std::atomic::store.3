.TH std::atomic::store 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::atomic::store \- std::atomic::store

.SH Synopsis
   void store( T desired, std::memory_order order =
   std::memory_order_seq_cst ) noexcept;                                 \fI(since C++11)\fP
   void store( T desired, std::memory_order order =
   std::memory_order_seq_cst ) volatile noexcept;

   Atomically replaces the current value with desired. Memory is affected according to
   the value of order.

   order must be one of std::memory_order_relaxed, std::memory_order_release or
   std::memory_order_seq_cst. Otherwise the behavior is undefined.

.SH Parameters

   desired - the value to store into the atomic variable
   order   - memory order constraints to enforce

.SH Return value

   \fI(none)\fP

.SH See also

   operator=             stores a value into an atomic object
                         \fI(public member function)\fP 
   atomic_store          atomically replaces the value of the atomic object with a
   atomic_store_explicit non-atomic argument
   \fI(C++11)\fP               \fI(function template)\fP 
   \fI(C++11)\fP

.SH Category:

     * Uses of dcl rev begin with nonempty note
