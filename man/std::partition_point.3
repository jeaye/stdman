.TH std::partition_point 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::partition_point \- std::partition_point

.SH Synopsis
   Defined in header <algorithm>
   template< class ForwardIt, class UnaryPredicate >                      \fI(since C++11)\fP
   ForwardIt partition_point( ForwardIt first, ForwardIt last,            (until C++20)
   UnaryPredicate p );                                               \fB(1)\fP
   template< class ForwardIt, class UnaryPredicate >
   constexpr ForwardIt partition_point( ForwardIt first, ForwardIt        (since C++20)
   last, UnaryPredicate p );

   Examines the partitioned (as if by std::partition) range [first, last) and locates
   the end of the first partition, that is, the first element that does not satisfy p
   or last if all elements satisfy p.

.SH Parameters

   first, last - the partitioned range of elements to examine
                 unary predicate which returns true for the elements found in the
                 beginning of the range.

                 The signature of the predicate function should be equivalent to the
                 following:
   p           -
                  bool pred(const Type &a);

                 The signature does not need to have const &, but the function must not
                 modify the objects passed to it.
                 The type Type must be such that an object of type ForwardIt can be
                 dereferenced and then implicitly converted to Type. 
.SH Type requirements
   -
   ForwardIt must meet the requirements of ForwardIterator.
   -
   UnaryPredicate must meet the requirements of Predicate.

.SH Return value

   The iterator past the end of the first partition within [first, last) or last if all
   elements satisfy p.

.SH Complexity

   Given N = std::distance(first, last), performs O(log N) applications of the
   predicate p.

   However, for non-RandomAccessIterators, the number of iterator increments is O(N).

.SH Example

   
// Run this code

 #include <algorithm>
 #include <array>
 #include <iostream>
 #include <iterator>
  
 int main()
 {
     std::array<int, 9> v = { 1, 2, 3, 4, 5, 6, 7, 8, 9 };
  
     auto is_even = [](int i){ return i % 2 == 0; };
     std::partition(v.begin(), v.end(), is_even);
  
     auto p = std::partition_point(v.begin(), v.end(), is_even);
  
     std::cout << "Before partition:\\n    ";
     std::copy(v.begin(), p, std::ostream_iterator<int>(std::cout, " "));
     std::cout << "\\nAfter partition:\\n    ";
     std::copy(p, v.end(), std::ostream_iterator<int>(std::cout, " "));
 }

.SH Output:

 Before partition:
     8 2 6 4
 After partition:
     5 3 7 1 9

.SH See also

   is_sorted   checks whether a range is sorted into ascending order
   \fI(C++11)\fP     \fI(function template)\fP 
   lower_bound returns an iterator to the first element not less than the given value
               \fI(function template)\fP 
