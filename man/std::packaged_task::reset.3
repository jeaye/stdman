.TH std::packaged_task::reset 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::packaged_task::reset \- std::packaged_task::reset

.SH Synopsis
   void reset();  \fI(since C++11)\fP

   Resets the state abandoning the results of previous executions. New shared state is
   constructed.

   Equivalent to *this = packaged_task(std::move(f)), where f is the stored task.

.SH Parameters

   \fI(none)\fP

.SH Return value

   \fI(none)\fP

.SH Exceptions

     * std::future_error if *this has no shared state. The error condition is set to
       no_state.
     * std::bad_alloc if there was not enough memory for a new shared state.
     * any exception thrown by the move constructor of the new packaged_task

.SH Example

   
// Run this code

 #include <iostream>
 #include <cmath>
 #include <thread>
 #include <future>
  
 int main()
 {
     std::packaged_task<int(int,int)> task([](int a, int b) {
         return std::pow(a, b);
     });
     std::future<int> result = task.get_future();
     task(2, 9);
     std::cout << "2^9 = " << result.get() << '\\n';
  
     task.reset();
     result = task.get_future();
     std::thread task_td(std::move(task), 2, 10);
     task_td.join();
     std::cout << "2^10 = " << result.get() << '\\n';
 }

.SH Output:

 2^9 = 512
 2^10 = 1024
