.TH std::bad_typeid 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::bad_typeid \- std::bad_typeid

.SH Synopsis
   Defined in header <typeinfo>
   class bad_typeid : public std::exception;

   An exception of this type is thrown when a typeid operator is applied to a
   dereferenced null pointer value of a polymorphic type.

   std-bad typeid-inheritance.svg
   About this image

                                   Inheritance diagram

.SH Member functions

   constructor   constructs a new bad_typeid object
                 \fI(public member function)\fP

Inherited from std::exception

.SH Member functions

   destructor   destroys the exception object
   \fB[virtual]\fP    \fI(virtual public member function of std::exception)\fP 
   what         returns an explanatory string
   \fB[virtual]\fP    \fI(virtual public member function of std::exception)\fP 

.SH Example

   
// Run this code

 #include <iostream>
 #include <typeinfo>
  
 struct S { // The type has to be polymorphic
     virtual void f();
 };
  
 int main()
 {
     S* p = nullptr;
     try {
         std::cout << typeid(*p).name() << '\\n';
     } catch(const std::bad_typeid& e) {
         std::cout << e.what() << '\\n';
     }
 }

.SH Output:

 Attempted a typeid of NULL pointer!
