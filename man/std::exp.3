.TH std::exp 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::exp \- std::exp

.SH Synopsis
   Defined in header <cmath>
   float       exp( float arg );       \fB(1)\fP
   double      exp( double arg );      \fB(2)\fP
   long double exp( long double arg ); \fB(3)\fP
   double      exp( Integral arg );    \fB(4)\fP \fI(since C++11)\fP

   Computes e (Euler's number, 2.7182818...) raised to the given power arg

   4) A set of overloads or a function template accepting an argument of any integral
   type. Equivalent to 2) (the argument is cast to double).

.SH Parameters

   arg - value of floating-point or Integral type

.SH Return value

   If no errors occur, the base-e exponential of arg (earg
   ) is returned.

   If a range error due to overflow occurs, +HUGE_VAL, +HUGE_VALF, or +HUGE_VALL is
   returned.

   If a range error occurs due to underflow, the correct result (after rounding) is
   returned.

.SH Error handling

   Errors are reported as specified in math_errhandling

   If the implementation supports IEEE floating-point arithmetic (IEC 60559),

     * If the argument is ±0, 1 is returned
     * If the argument is -∞, +0 is returned
     * If the argument is +∞, +∞ is returned
     * If the argument is NaN, NaN is returned

.SH Notes

   For IEEE-compatible type double, overflow is guaranteed if 709.8 < arg, and
   underflow is guaranteed if arg < -708.4

.SH Example

   
// Run this code

 #include <iostream>
 #include <cmath>
 #include <cerrno>
 #include <cstring>
 #include <cfenv>
 #pragma STDC FENV_ACCESS ON
 int main()
 {
     std::cout << "exp(1) = " << std::exp(1) << '\\n'
               << "FV of $100, continuously compounded at 3% for 1 year = "
               << 100*std::exp(0.03) << '\\n';
     // special values
     std::cout << "exp(-0) = " << std::exp(-0.0) << '\\n'
               << "exp(-Inf) = " << std::exp(-INFINITY) << '\\n';
     // error handling
     errno=0; std::feclearexcept(FE_ALL_EXCEPT);
     std::cout << "exp(710) = " << std::exp(710) << '\\n';
     if(errno == ERANGE)
         std::cout << "    errno == ERANGE: " << std::strerror(errno) << '\\n';
     if(std::fetestexcept(FE_OVERFLOW))
         std::cout << "    FE_OVERFLOW raised\\n";
 }

.SH Possible output:

 exp\fB(1)\fP = 2.71828
 FV of $100, continuously compounded at 3% for 1 year = 103.045
 exp(-0) = 1
 exp(-Inf) = 0
 exp(710) = inf
     errno == ERANGE: Numerical result out of range
     FE_OVERFLOW raised

.SH See also

   exp2               returns 2 raised to the given power (2^x)
   \fI(C++11)\fP            \fI(function)\fP 
   expm1              returns e raised to the given power, minus one (e^x-1)
   \fI(C++11)\fP            \fI(function)\fP 
   log                computes natural (base e) logarithm (ln(x))
                      \fI(function)\fP 
   exp(std::complex)  complex base e exponential
                      \fI(function template)\fP 
   exp(std::valarray) applies the function std::exp to each element of valarray
                      \fI(function template)\fP 
   C documentation for
   exp
