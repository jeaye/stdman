.TH std::unique_lock::try_lock_until 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::unique_lock::try_lock_until \- std::unique_lock::try_lock_until

.SH Synopsis
   template< class Clock, class Duration >
   bool try_lock_until( const std::chrono::time_point<Clock,Duration>&    \fI(since C++11)\fP
   timeout_time );

   Tries to lock the associated mutex. Blocks until specified timeout_time has been
   reached or the lock is acquired, whichever comes first. On successful lock
   acquisition returns true, otherwise returns false. May block for longer than until
   timeout_time has been reached.

   Effectively calls mutex()->try_lock_until(timeout_time)

   std::system_error is thrown if there is no associated mutex or if the mutex is
   already locked.

.SH Parameters

   timeout_time - maximum time point to block until

.SH Return value

   true if the ownership of the mutex has been acquired successfully, false otherwise.

.SH Exceptions

     * Any exceptions thrown by mutex()->try_lock_until(timeout_time)

     * If there is no associated mutex, std::system_error with an error code of
       std::errc::operation_not_permitted

     * If the mutex is already locked, std::system_error with an error code of
       std::errc::resource_deadlock_would_occur

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

   lock         locks the associated mutex
                \fI(public member function)\fP 
                tries to lock the associated mutex, returns if the mutex is not
   try_lock     available
                \fI(public member function)\fP 
                attempts to lock the associated TimedLockable mutex, returns if the
   try_lock_for mutex has been unavailable for the specified time duration
                \fI(public member function)\fP 
   unlock       unlocks the associated mutex
                \fI(public member function)\fP 

.SH Category:

     * Todo no example
