.TH std::ldexp 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::ldexp \- std::ldexp

.SH Synopsis
   Defined in header <cmath>
   float       ldexp( float x, int exp );       \fB(1)\fP
   double      ldexp( double x, int exp );      \fB(2)\fP
   long double ldexp( long double x, int exp ); \fB(3)\fP
   double      ldexp( Integral x, int exp );    \fB(4)\fP \fI(since C++11)\fP

   1-3) Multiplies a floating point value x by the number 2 raised to the exp power.
   4) A set of overloads or a function template accepting an argument of any integral
   type. Equivalent to \fB(2)\fP (the argument is cast to double).

.SH Parameters

   x   - floating point value
   exp - integer value

.SH Return value

   If no errors occur, x multiplied by 2 to the power of exp (x×2exp
   ) is returned.

   If a range error due to overflow occurs, ±HUGE_VAL, ±HUGE_VALF, or ±HUGE_VALL is
   returned.

   If a range error due to underflow occurs, the correct result (after rounding) is
   returned.

.SH Error handling

   Errors are reported as specified in math_errhandling

   If the implementation supports IEEE floating-point arithmetic (IEC 60559),

     * Unless a range error occurs, FE_INEXACT is never raised (the result is exact)
     * Unless a range error occurs, the current rounding mode is ignored
     * If x is ±0, it is returned, unmodified
     * If x is ±∞, it is returned, unmodified
     * If exp is 0, then x is returned, unmodified
     * If x is NaN, NaN is returned

.SH Notes

   On binary systems (where FLT_RADIX is 2), std::ldexp is equivalent to std::scalbn.

   The function std::ldexp ("load exponent"), together with its dual, std::frexp, can
   be used to manipulate the representation of a floating-point number without direct
   bit manipulations.

   On many implementations, std::ldexp is less efficient than multiplication or
   division by a power of two using arithmetic operators.

.SH Example

   
// Run this code

 #include <iostream>
 #include <cmath>
 #include <cerrno>
 #include <cstring>
 #include <cfenv>
  
 #pragma STDC FENV_ACCESS ON
 int main()
 {
     std::cout << "ldexp(7, -4) = " << std::ldexp(7, -4) << '\\n'
               << "ldexp(1, -1074) = " << std::ldexp(1, -1074)
               << " (minimum positive subnormal double)\\n"
               << "ldexp(nextafter(1,0), 1024) = "
               << std::ldexp(std::nextafter(1,0), 1024)
               << " (largest finite double)\\n";
     // special values
     std::cout << "ldexp(-0, 10) = " << std::ldexp(-0.0, 10) << '\\n'
               << "ldexp(-Inf, -1) = " << std::ldexp(-INFINITY, -1) << '\\n';
     // error handling
     errno=0; std::feclearexcept(FE_ALL_EXCEPT);
     std::cout << "ldexp(1, 1024) = " << std::ldexp(1, 1024) << '\\n';
     if(errno == ERANGE)
         std::cout << "    errno == ERANGE: " << std::strerror(errno) << '\\n';
     if(std::fetestexcept(FE_OVERFLOW))
         std::cout << "    FE_OVERFLOW raised\\n";
 }

.SH Output:

 ldexp(7, -4) = 0.4375
 ldexp(1, -1074) = 4.94066e-324 (minimum positive subnormal double)
 ldexp(nextafter(1,0), 1024) = 1.79769e+308 (largest finite double)
 ldexp(-0, 10) = -0
 ldexp(-Inf, -1) = -inf
 ldexp(1, 1024) = inf
     errno == ERANGE: Numerical result out of range
     FE_OVERFLOW raised

.SH See also

   frexp   decomposes a number into significand and a power of 2
           \fI(function)\fP 
   scalbn
   scalbln multiplies a number by FLT_RADIX raised to a power
   \fI(C++11)\fP \fI(function)\fP 
   \fI(C++11)\fP
   C documentation for
   ldexp
