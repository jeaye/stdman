.TH std::destroy_n 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::destroy_n \- std::destroy_n

.SH Synopsis
   Defined in header <memory>
   template< class ForwardIt, class Size >                            \fB(1)\fP \fI(since C++17)\fP
   ForwardIt destroy_n( ForwardIt first, Size n );
   template< class ExecutionPolicy, class ForwardIt, class Size >
   ForwardIt destroy_n( ExecutionPolicy&& policy, ForwardIt first,    \fB(2)\fP \fI(since C++17)\fP
   Size n );

   1) Destroys the n objects in the range starting at first, as if by

 for (; n > 0; (void) ++first, --n)
   std::destroy_at(std::addressof(*first));

   2) Same as \fB(1)\fP, but executed according to policy. This overload does not participate
   in overload resolution unless
   std::is_execution_policy_v<std::decay_t<ExecutionPolicy>> is true

.SH Parameters

   first             -          the beginning of the range of elements to destroy
   n                 -          the number of elements to destroy
   policy            -          the execution policy to use. See execution policy for
                                details.
.SH Type requirements
   -
   ForwardIt must meet the requirements of ForwardIterator.
   -
   No increment, assignment, comparison, or indirection through valid instances of
   ForwardIt may throw exceptions.

.SH Return value

   The end of the range of objects that has been destroyed (i.e., std::next(first, n)).

.SH Complexity

   Linear in n.

.SH Exceptions

   The overload with a template parameter named ExecutionPolicy reports errors as
   follows:

     * If execution of a function invoked as part of the algorithm throws an exception
       and ExecutionPolicy is one of the three standard policies, std::terminate is
       called. For any other ExecutionPolicy, the behavior is implementation-defined.
     * If the algorithm fails to allocate memory, std::bad_alloc is thrown.

.SH Possible implementation

   template<class ForwardIt, class Size>
   ForwardIt destroy_n( ForwardIt first, Size n )
   {
     for (; n > 0; (void) ++first, --n)
       std::destroy_at(std::addressof(*first));
     return first;
   }

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

   destroy    destroys a range of objects
   \fI(C++17)\fP    \fI(function template)\fP 
   destroy_at destroys an object at a given address
   \fI(C++17)\fP    \fI(function template)\fP 

.SH Category:

     * Todo no example
