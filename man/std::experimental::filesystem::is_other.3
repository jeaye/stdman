.TH std::experimental::filesystem::is_other 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::experimental::filesystem::is_other \- std::experimental::filesystem::is_other

.SH Synopsis
   Defined in header <experimental/filesystem>
   bool is_other( file_status s );                 \fB(1)\fP (filesystem TS)
   bool is_other( const path& p );                 \fB(2)\fP (filesystem TS)
   bool is_other( const path& p, error_code& ec ); \fB(3)\fP (filesystem TS)

   Checks if the given file status or path corresponds to a file of type other type.
   That is, the file exists, but is neither regular file, nor directory nor a symlink.

   1) Equivalent to exists(s) && !is_regular_file(s) && !is_directory(s) &&
   !is_symlink(s).
   2) Equivalent to is_other(status(p)).
   3) Equivalent to is_other(status(p, ec)). Returns false and sets ec to an
   appropriate error code if an error occurs. Otherwise, ec is cleared with a call to
   ec.clear().

.SH Parameters

   s  - file status to check
   p  - path to examine
   ec - error code to store the error status to

.SH Return value

   true if the given path or file status corresponds to a other file, false otherwise.

.SH Exceptions

   1,3)
   noexcept specification:  
   noexcept
     
   2) Throws filesystem_error if an error occurs. The error is constructed with p as an
   argument. The error code is set to an appropriate error code for the error that
   caused the failure.

.SH See also

    This section is incomplete

   Categories:

     * unconditionally noexcept
     * Todo without reason

   Hidden categories:

     * Pages with unreviewed unconditional noexcept template
     * Pages with unreviewed noexcept template
