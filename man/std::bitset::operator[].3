.TH std::bitset::operator[] 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::bitset::operator[] \- std::bitset::operator[]

.SH Synopsis
   bool operator[]( std::size_t pos ) const;                   \fI(until C++11)\fP
   constexpr bool operator[]( std::size_t pos ) const; \fB(1)\fP     \fI(since C++11)\fP
   reference operator[]( std::size_t pos );                \fB(2)\fP

   Accesses the bit at position pos. The first version returns the value of the bit,
   the second version returns an object of type std::bitset::reference that allows
   modification of the value.

   Unlike test(), does not throw exceptions: the behavior is undefined if pos is out of
   bounds.

.SH Parameters

   pos - position of the bit to return

.SH Return value

   1) the value of the requested bit

   2) an object of type std::bitset::reference, which allows writing to the requested
   bit.

.SH Exceptions

   None

.SH Example

   
// Run this code

 #include <iostream>
 #include <bitset>
  
 int main()
 {
     std::bitset<8> b1(42);
     for (std::size_t i = 0; i < b1.size(); ++i) {
         std::cout << "b1[" << i << "]: " << b1[i] << '\\n';
     }
     b1[0] = true; // modifies the first bit through bitset::reference
     std::cout << "After setting bit 0, the bitset holds " << b1 << '\\n';
 }

.SH Output:

 b1[0]: 0
 b1[1]: 1
 b1[2]: 0
 b1[3]: 1
 b1[4]: 0
 b1[5]: 1
 b1[6]: 0
 b1[7]: 0
 After setting bit 0, the bitset holds 00101011

.SH See also

   test accesses specific bit
        \fI(public member function)\fP 
