.TH std::destroy 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::destroy \- std::destroy

.SH Synopsis
   Defined in header <memory>
   template< class ForwardIt >                                        \fB(1)\fP \fI(since C++17)\fP
   void destroy( ForwardIt first, ForwardIt last );
   template< class ExecutionPolicy, class ForwardIt >
   void destroy( ExecutionPolicy&& policy, ForwardIt first, ForwardIt \fB(2)\fP \fI(since C++17)\fP
   last );

   1) Destroys the objects in the range [first, last), as if by

 for (; first != last; ++first)
   std::destroy_at(std::addressof(*first));

   2) Same as \fB(1)\fP, but executed according to policy. This overload does not participate
   in overload resolution unless
   std::is_execution_policy_v<std::decay_t<ExecutionPolicy>> is true.

.SH Parameters

   first, last         -         the range of elements to destroy
   policy              -         the execution policy to use. See execution policy for
                                 details.
.SH Type requirements
   -
   ForwardIt must meet the requirements of ForwardIterator.
   -
   No increment, assignment, comparison, or indirection through valid instances of
   ForwardIt may throw exceptions.

.SH Return value

   \fI(none)\fP

.SH Complexity

   Linear in the distance between first and last.

.SH Exceptions

   The overload with a template parameter named ExecutionPolicy reports errors as
   follows:

     * If execution of a function invoked as part of the algorithm throws an exception
       and ExecutionPolicy is one of the three standard policies, std::terminate is
       called. For any other ExecutionPolicy, the behavior is implementation-defined.
     * If the algorithm fails to allocate memory, std::bad_alloc is thrown.

.SH Possible implementation

   template< class ForwardIt >
   void destroy( ForwardIt first, ForwardIt last )
   {
     for (; first != last; ++first)
       std::destroy_at(std::addressof(*first));
   }

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

   destroy_n  destroys a number of objects in a range
   \fI(C++17)\fP    \fI(function template)\fP 
   destroy_at destroys an object at a given address
   \fI(C++17)\fP    \fI(function template)\fP 

.SH Category:

     * Todo no example
