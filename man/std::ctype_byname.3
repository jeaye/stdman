.TH std::ctype_byname 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::ctype_byname \- std::ctype_byname

.SH Synopsis
   Defined in header <locale>
   template< class CharT >
   class ctype_byname : public std::ctype<CharT>;

   std::ctype_byname is a std::ctype facet which encapsulates character classification
   rules of the locale specified at its construction.

   Two specializations are provided by the standard library

   Defined in header <locale>
                              provides narrow character classification. This
   std::ctype_byname<char>    specialization uses table lookup for character
                              classification
   std::ctype_byname<wchar_t> provides wide character classification

.SH Member types

   Member type Definition
   mask        ctype<CharT>::mask

.SH Member functions

   constructor   constructs a new ctype_byname facet
                 \fI(public member function)\fP 
   destructor    destroys a ctype_byname facet
                 \fI(protected member function)\fP 

   

std::ctype_byname::ctype_byname

   explicit ctype_byname( const char* name, std::size_t refs = 0 );
   explicit ctype_byname( const std::string& name, std::size_t refs = 0   \fI(since C++11)\fP
   );

   Constructs a new std::ctype_byname facet for a locale with name.

   refs is used for resource management: if refs == 0, the implementation destroys the
   facet, when the last std::locale object holding it is destroyed. Otherwise, the
   object is not destroyed.

.SH Parameters

   name - the name of the locale
   refs - the number of references that link to the facet

   

std::ctype_byname::~ctype_byname

   protected:
   ~ctype_byname();

   Destroys the facet.

Inherited from std::ctype<CharT>

.SH Member types

   Member type Definition
   char_type   CharT

.SH Member objects

   Member name                         Type
   static std::locale::id id           id of the locale
   \fB[static]\fP                            \fI(public static member constant)\fP
         if CharT is char, the following member of std::ctype<char> is inherited
   static const std::size_t table_size size of the classification table, at least 256
   \fB[static]\fP                            \fI(public static member constant)\fP

.SH Member functions

   is                invokes do_is
                     \fI(public member function of std::ctype)\fP 
   scan_is           invokes do_scan_is
                     \fI(public member function of std::ctype)\fP 
   scan_not          invokes do_scan_not
                     \fI(public member function of std::ctype)\fP 
   toupper           invokes do_toupper
                     \fI(public member function of std::ctype)\fP 
   tolower           invokes do_tolower
                     \fI(public member function of std::ctype)\fP 
   widen             invokes do_widen
                     \fI(public member function of std::ctype)\fP 
   narrow            invokes do_narrow
                     \fI(public member function of std::ctype)\fP 
         if CharT is char, the following members of std::ctype<char> are inherited
   table             obtains the character classification table
                     \fI(public member function of std::ctype<char>)\fP 
   classic_table     obtains the "C" locale character classification table
   \fB[static]\fP          \fI(public static member function of std::ctype<char>)\fP 

.SH Protected member functions

   do_toupper   converts a character or characters to uppercase
   \fB[virtual]\fP    \fI(virtual protected member function of std::ctype)\fP 
   do_tolower   converts a character or characters to lowercase
   \fB[virtual]\fP    \fI(virtual protected member function of std::ctype)\fP 
   do_widen     converts a character or characters from char to charT
   \fB[virtual]\fP    \fI(virtual protected member function of std::ctype)\fP 
   do_narrow    converts a character or characters from charT to char
   \fB[virtual]\fP    \fI(virtual protected member function of std::ctype)\fP 
         if CharT is char, the following members of std::ctype are NOT inherited
   do_is        classifies a character or a character sequence
   \fB[virtual]\fP    \fI(virtual protected member function of std::ctype)\fP 
   do_scan_is   locates the first character in a sequence that conforms to given
   \fB[virtual]\fP    classification
                \fI(virtual protected member function of std::ctype)\fP 
   do_scan_not  locates the first character in a sequence that fails given
   \fB[virtual]\fP    classification
                \fI(virtual protected member function of std::ctype)\fP 

Inherited from std::ctype_base

.SH Member types

   Type Definition
   mask unspecified bitmask type (enumeration, integer type, or bitset)

.SH Member constants

   space            the value of mask identifying whitespace character classification
   \fB[static]\fP         \fI(public static member constant)\fP
   print            the value of mask identifying printable character classification
   \fB[static]\fP         \fI(public static member constant)\fP
   cntrl            the value of mask identifying control character classification
   \fB[static]\fP         \fI(public static member constant)\fP
   upper            the value of mask identifying uppercase character classification
   \fB[static]\fP         \fI(public static member constant)\fP
   lower            the value of mask identifying lowercase character classification
   \fB[static]\fP         \fI(public static member constant)\fP
   alpha            the value of mask identifying alphabetic character classification
   \fB[static]\fP         \fI(public static member constant)\fP
   digit            the value of mask identifying digit character classification
   \fB[static]\fP         \fI(public static member constant)\fP
   punct            the value of mask identifying punctuation character classification
   \fB[static]\fP         \fI(public static member constant)\fP
   xdigit           the value of mask identifying hexadecimal digit character
   \fB[static]\fP         classification
                    \fI(public static member constant)\fP
   blank            the value of mask identifying blank character classification
   \fB[static]\fP \fI(C++11)\fP \fI(public static member constant)\fP
   alnum            alpha | digit
   \fB[static]\fP         \fI(public static member constant)\fP
   graph            alnum | punct
   \fB[static]\fP         \fI(public static member constant)\fP

.SH Notes

   The explicit specialization std::ctype_byname<char> was listed as a separate entry
   in the header file <locale> until C++11. it was removed in C++11 as defect #1298,
   but it remains a required specialization, just like std::ctype_byname<wchar_t>.

.SH Example

   
// Run this code

 #include <iostream>
 #include <locale>
  
 int main()
 {
     wchar_t c = L'\\u00de'; // capital letter thorn
  
     std::locale loc("C");
  
     std::cout << "isupper('횧', C locale) returned "
                << std::boolalpha << std::isupper(c, loc) << '\\n';
  
     loc = std::locale(loc, new std::ctype_byname<wchar_t>("en_US.utf8"));
  
     std::cout << "isupper('횧', C locale with Unicode ctype) returned "
               << std::boolalpha << std::isupper(c, loc) << '\\n';
 }

.SH Output:

 isupper('횧', C locale) returned false
 isupper('횧', C locale with Unicode ctype) returned true

.SH See also

   ctype       defines character classification tables
               \fI(class template)\fP 
   ctype<char> specialization of std::ctype for type char
               \fI(class template specialization)\fP 
