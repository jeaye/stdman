.TH std::hash<std::optional> 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::hash<std::optional> \- std::hash<std::optional>

.SH Synopsis
   Defined in header <optional>
   template<class T>               \fI(since C++17)\fP
   struct hash<std::optional<T>>;

   The template specialization of std::hash for the std::optional class allows users to
   obtain hashes of the values contained in optional objects.

   The specialization std::hash<optional<T>> is enabled (see std::hash) if
   std::hash<std::remove_const_t<T>> is enabled, and is disabled otherwise.

   When enabled, for an object o of type std::optional<T> that contains a value,
   std::hash<std::optional<T>>()(o) evaluates to the same value as
   std::hash<std::remove_const_t<T>>()(*o). For an optional that does not contain a
   value, the hash is unspecified.

   The member functions of this specialization are not guaranteed to be noexcept
   because the hash of the underlying type might throw.

.SH Template parameters

   T - the type of the value contained in optional object

.SH Example

   
// Run this code

 #include <optional>
 #include <unordered_set>
 #include <string>
 #include <iostream>
 using namespace std::literals;
 int main()
 {
     // hash<optional> makes it possible to use unordered_set
     std::unordered_set<std::optional<std::string>> s = {
             "abc"s, std::nullopt, "def"s
     };
  
     for(const auto& o : s)
         std::cout << o.value_or("(null)") << ' ';
 }

.SH Possible output:

 def abc (null)

.SH See also

   hash    hash function object
   \fI(C++11)\fP \fI(class template)\fP 
