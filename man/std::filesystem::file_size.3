.TH std::filesystem::file_size 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::filesystem::file_size \- std::filesystem::file_size

.SH Synopsis
   Defined in header <filesystem>
   std::uintmax_t file_size( const std::filesystem::path& p );

   std::uintmax_t file_size( const std::filesystem::path& p,   \fB(1)\fP \fI(since C++17)\fP

                             std::error_code& ec ) noexcept;

   If p does not exist, reports an error.

   For a regular file p, returns the size determined as if by reading the st_size
   member of the structure obtained by POSIX stat (symlinks are followed)

   The result of attempting to determine the size of a directory (as well as any other
   file that is not a regular file or a symlink) is implementation-defined.

   The non-throwing overload returns returns -1 on errors.

.SH Parameters

   p  - path to examine
   ec - out-parameter for error reporting in the non-throwing overload

.SH Return value

   The size of the file, in bytes.

.SH Exceptions

   The overload that does not take a std::error_code& parameter throws filesystem_error
   on underlying OS API errors, constructed with p as the first argument and the OS
   error code as the error code argument. The overload taking a std::error_code&
   parameter sets it to the OS API error code if an OS API call fails, and executes
   ec.clear() if no errors occur. Any overload not marked noexcept may throw
   std::bad_alloc if memory allocation fails.

.SH Example

   
// Run this code

 #include <iostream>
 #include <fstream>
 #include <filesystem>
 namespace fs = std::filesystem;
 int main()
 {
     fs::path p = fs::current_path() / "example.bin";
     std::ofstream(p).put('a'); // create file of size 1
     std::cout << "File size = " << fs::file_size(p) << '\\n';
     fs::remove(p);
  
     try {
         fs::file_size("/dev"); // attempt to get size of a directory
     } catch(fs::filesystem_error& e) {
         std::cout << e.what() << '\\n';
     }
 }

.SH Possible output:

 File size = 1
 filesystem error: cannot get file size: Is a directory [/dev]

.SH See also

   resize_file changes the size of a regular file by truncation or zero-fill
   \fI(C++17)\fP     \fI(function)\fP 
   space       determines available free space on the file system
   \fI(C++17)\fP     \fI(function)\fP 
   file_size   returns the size of the file to which the directory entry refers
               \fI(public member function of std::filesystem::directory_entry)\fP 
