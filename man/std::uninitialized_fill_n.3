.TH std::uninitialized_fill_n 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::uninitialized_fill_n \- std::uninitialized_fill_n

.SH Synopsis
   Defined in header <memory>
   template< class ForwardIt, class Size, class T >
   void uninitialized_fill_n( ForwardIt first, Size count, const          \fI(until C++11)\fP
   T& value );
   template< class ForwardIt, class Size, class T >
   ForwardIt uninitialized_fill_n( ForwardIt first, Size count,   \fB(1)\fP     \fI(since C++11)\fP
   const T& value );
   template< class ExecutionPolicy, class ForwardIt, class Size,
   class T >                                                          \fB(2)\fP \fI(since C++17)\fP
   ForwardIt uninitialized_fill_n( ExecutionPolicy&& policy,
   ForwardIt first, Size count, const T& value );

   1) Copies the given value value to the first count elements in an uninitialized
   memory area beginning at first as if by

 for (; n--; ++first)
   ::new (static_cast<void*>(std::addressof(*first)))
      typename std::iterator_traits<ForwardIt>::value_type(x);

   If an exception is thrown during the initialization, the function has no effects.
   2) Same as \fB(1)\fP, but executed according to policy. This overload does not participate
   in overload resolution unless
   std::is_execution_policy_v<std::decay_t<ExecutionPolicy>> is true

.SH Parameters

   first            -           the beginning of the range of the elements to
                                initialize
   count            -           number of elements to construct
   value            -           the value to construct the elements with
.SH Type requirements
   -
   ForwardIt must meet the requirements of ForwardIterator.
   -
   No increment, assignment, comparison, or indirection through valid instances of
   ForwardIt may throw exceptions.

.SH Return value

   \fI(none)\fP                                                \fI(until C++11)\fP
   Iterator to the element past the last element copied. \fI(since C++11)\fP

.SH Complexity

   Linear in count.

.SH Exceptions

   The overload with a template parameter named ExecutionPolicy reports errors as
   follows:

     * If execution of a function invoked as part of the algorithm throws an exception
       and ExecutionPolicy is one of the three standard policies, std::terminate is
       called. For any other ExecutionPolicy, the behavior is implementation-defined.
     * If the algorithm fails to allocate memory, std::bad_alloc is thrown.

.SH Possible implementation

   template< class ForwardIt, class Size, class T >
   ForwardIt uninitialized_fill_n(ForwardIt first, Size count, const T& value)
   {
       typedef typename std::iterator_traits<ForwardIt>::value_type Value;
       ForwardIt current = first;
       try {
           for (; count > 0; ++current, (void) --count) {
               ::new (static_cast<void*>(std::addressof(*current))) Value(value);
           }
           return current;
       } catch (...) {
           for (; first != current; ++first) {
               first->~Value();
           }
           throw;
       }
   }

.SH Example

   
// Run this code

 #include <algorithm>
 #include <iostream>
 #include <memory>
 #include <string>
 #include <tuple>
  
 int main()
 {
     std::string* p;
     std::size_t sz;
     std::tie(p, sz) = std::get_temporary_buffer<std::string>(4);
     std::uninitialized_fill_n(p, sz, "Example");
  
     for (std::string* i = p; i != p+sz; ++i) {
         std::cout << *i << '\\n';
         i->~basic_string<char>();
     }
     std::return_temporary_buffer(p);
 }

.SH Output:

.SH Example
.SH Example
.SH Example
.SH Example

.SH See also

                      copies an object to an uninitialized area of memory, defined by a
   uninitialized_fill range
                      \fI(function template)\fP 
