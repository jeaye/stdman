.TH std::copy_backward 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::copy_backward \- std::copy_backward

.SH Synopsis
   Defined in header <algorithm>
   template< class BidirIt1, class BidirIt2 >
   BidirIt2 copy_backward( BidirIt1 first, BidirIt1 last, BidirIt2        \fI(until C++20)\fP
   d_last );
   template< class BidirIt1, class BidirIt2 >
   constexpr BidirIt2 copy_backward( BidirIt1 first, BidirIt1 last,       \fI(since C++20)\fP
   BidirIt2 d_last );

   Copies the elements from the range, defined by [first, last), to another range
   ending at d_last. The elements are copied in reverse order (the last element is
   copied first), but their relative order is preserved.

   The behavior is undefined if d_last is within (first, last]. std::copy must be used
   instead of std::copy_backward in that case.

.SH Parameters

   first, last      -     the range of the elements to copy
   d_last           -     end of the destination range..
.SH Type requirements
   -
   BidirIt must meet the requirements of BidirectionalIterator.

.SH Return value

   iterator to the last element copied.

.SH Complexity

   Exactly last - first assignments.

.SH Notes

   When copying overlapping ranges, std::copy is appropriate when copying to the left
   (beginning of the destination range is outside the source range) while
   std::copy_backward is appropriate when copying to the right (end of the destination
   range is outside the source range).

.SH Possible implementation

   template< class BidirIt1, class BidirIt2 >
   BidirIt2 copy_backward(BidirIt1 first, BidirIt1 last, BidirIt2 d_last)
   {
       while (first != last) {
           *(--d_last) = *(--last);
       }
       return d_last;
   }

.SH Example

   
// Run this code

 #include <algorithm>
 #include <iostream>
 #include <vector>
  
 int main()
 {
     std::vector<int> from_vector;
     for (int i = 0; i < 10; i++) {
         from_vector.push_back(i);
     }
  
     std::vector<int> to_vector(15);
  
     std::copy_backward(from_vector.begin(), from_vector.end(), to_vector.end());
  
     std::cout << "to_vector contains: ";
     for (auto i: to_vector) {
         std::cout << i << " ";
     }
  }

.SH Output:

 to_vector contains: 0 0 0 0 0 0 1 2 3 4 5 6 7 8 9

.SH See also

   copy    copies a range of elements to a new location
   copy_if \fI(function template)\fP 
   \fI(C++11)\fP
