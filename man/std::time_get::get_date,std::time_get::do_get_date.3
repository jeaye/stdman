.TH std::time_get::get_date,std::time_get::do_get_date 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::time_get::get_date,std::time_get::do_get_date \- std::time_get::get_date,std::time_get::do_get_date

.SH Synopsis
   Defined in header <locale>
   public:

   iter_type get_date( iter_type beg, iter_type end, std::ios_base& str,           \fB(1)\fP

                       std::ios_base::iostate& err, std::tm* t ) const;
   protected:

   virtual iter_type do_get_date( iter_type beg, iter_type end, std::ios_base&     \fB(2)\fP
   str,

                                  std::ios_base::iostate& err, std::tm* t ) const;

   1) Public member function, calls the protected virtual member function do_get_date()
   of the most derived class.
   2) Reads successive characters from the sequence [beg, end) and parses out the
   calendar date value using the default format expected by this locale, which is the
   same format as

   "%x"                                                                   \fI(until C++11)\fP
   "%d/%m/%y", "%m/%d/%y", "%y/%m/%d", and "%y/%d/%m", depending on       \fI(since C++11)\fP
   date_order()

   as used by the functions std::get_time(), get(), and the POSIX function strptime()
   The parsed date is stored in the corresponding fields of the std::tm structure
   pointed to by the argument t.
   If the end iterator is reached before a valid date is read, the function sets
   std::ios_base::eofbit in err. If a parsing error is encountered, the function sets
   std::ios_base::failbit in err.

.SH Parameters

   beg - iterator designating the start of the sequence to parse
   end - one past the end iterator for the sequence to parse
   str - a stream object that this function uses to obtain locale facets when needed,
         e.g. std::ctype to skip whitespace or std::collate to compare strings
   err - stream error flags object that is modified by this function to indicate errors
   t   - pointer to the std::tm object that will hold the result of this function call

.SH Return value

   Iterator pointing one past the last character in [beg, end) that was recognized as a
   part of a valid date.

.SH Notes

   For the alphabetic components of the default date format (if any), this function is
   usually case-insensitive.

   If a parsing error is encountered, most implementations of this function leave *t
   unmodified.

   The implementation may support other date formats besides the ones required by the
   standard.

.SH Example

   
// Run this code

 #include <iostream>
 #include <locale>
 #include <sstream>
 #include <iterator>
 #include <ctime>
  
 void try_get_date(const std::string& s)
 {
     std::cout << "Parsing the date out of '" << s <<
                  "' in the locale " << std::locale().name() << '\\n';
     std::istringstream str(s);
     std::ios_base::iostate err = std::ios_base::goodbit;
  
     std::tm t;
     std::istreambuf_iterator<char> ret =
         std::use_facet<std::time_get<char>>(str.getloc()).get_date(
             {str}, {}, str, err, &t
         );
     str.setstate(err);
     if(str) {
         std::cout << "Day: "   << t.tm_mday << ' '
                   << "Month: " << t.tm_mon + 1 << ' '
                   << "Year: "  << t.tm_year + 1900 << '\\n';
     } else {
         std::cout << "Parse failed. Unparsed string: ";
         std::copy(ret, {}, std::ostreambuf_iterator<char>(std::cout));
         std::cout << '\\n';
     }
 }
 int main()
 {
     std::locale::global(std::locale("en_US.utf8"));
     try_get_date("02/01/2013");
     try_get_date("02-01-2013");
  
     std::locale::global(std::locale("ja_JP.utf8"));
     try_get_date("2013年02月01日");
 }

.SH Output:

 Parsing the date out of '02/01/2013' in the locale en_US.utf8
 Day: 1 Month: 2 Year: 2013
 Parsing the date out of '02-01-2013' in the locale en_US.utf8
 Parse failed. Unparsed string: -01-2013
 Parsing the date out of '2013年02月01日' in the locale ja_JP.utf8
 Day: 1 Month: 2 Year: 2013

.SH See also

   get_time parses a date/time value of specified format
   \fI(C++11)\fP  \fI(function template)\fP 
