.TH std::array::empty 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::array::empty \- std::array::empty

.SH Synopsis
   constexpr bool empty() const noexcept;                \fI(since C++11)\fP
                                                         (until C++20)
   [[nodiscard]] constexpr bool empty() const noexcept;  (since C++20)

   Checks if the container has no elements, i.e. whether begin() == end().

.SH Parameters

   \fI(none)\fP

.SH Return value

   true if the container is empty, false otherwise

.SH Complexity

   Constant.

.SH Example

   

   The following code uses empty to check if a std::array contains any elements:

   
// Run this code

 #include <array>
 #include <iostream>
  
 int main()
 {
     std::array<int, 4> numbers {3, 1, 4, 1};
     std::array<int, 0> no_numbers;
  
     std::cout << "numbers.empty(): " << numbers.empty() << '\\n';
     std::cout << "no_numbers.empty(): " << no_numbers.empty() << '\\n';
 }

.SH Output:

 numbers.empty(): 0
 no_numbers.empty(): 1

.SH See also

   size returns the number of elements
        \fI(public member function)\fP 
