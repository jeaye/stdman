.TH std::bitset::operator&=,|=,^=,~ 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::bitset::operator&=,|=,^=,~ \- std::bitset::operator&=,|=,^=,~

.SH Synopsis
   bitset<N>& operator&=( const bitset<N>& other ); \fB(1)\fP
   bitset<N>& operator|=( const bitset<N>& other ); \fB(2)\fP
   bitset<N>& operator^=( const bitset<N>& other ); \fB(3)\fP
   bitset<N> operator~() const;                     \fB(4)\fP

   Performs binary AND, OR, XOR and NOT.

   1) Sets the bits to the result of binary AND on corresponding pairs of bits of *this
   and other.
   2) Sets the bits to the result of binary OR on corresponding pairs of bits of *this
   and other.
   3) Sets the bits to the result of binary XOR on corresponding pairs of bits of *this
   and other.
   4) Returns a temporary copy of *this with all bits flipped (binary NOT).

   Note that &=, |=, and ^= are only defined for bitsets of the same size N.

.SH Parameters

   other - another bitset

.SH Return value

   1-3) *this
   4) bitset<N>(*this).flip()

.SH Exceptions

   \fI(none)\fP                    \fI(until C++11)\fP
   noexcept specification:  
   noexcept                  \fI(since C++11)\fP
     

.SH Example

   
// Run this code

 #include <iostream>
 #include <string>
 #include <bitset>
  
 int main()
 {
     std::bitset<16> dest;
     std::string pattern_str = "1001";
     std::bitset<16> pattern(pattern_str);
  
     for (size_t i = 0, ie = dest.size()/pattern_str.size(); i != ie; ++i) {
         dest <<= pattern_str.size();
         dest |= pattern;
     }
     std::cout << dest << '\\n';
 }

.SH Output:

 1001100110011001

.SH See also

   operator<<=
   operator>>= performs binary shift left and shift right
   operator<<  \fI(public member function)\fP 
   operator>>

.SH Category:

     * unconditionally noexcept

   Hidden categories:

     * Pages with unreviewed unconditional noexcept template
     * Pages with unreviewed noexcept template
