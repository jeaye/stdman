.TH std::function::operator= 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::function::operator= \- std::function::operator=

.SH Synopsis
   function& operator=( const function& other );       \fB(1)\fP \fI(since C++11)\fP
   function& operator=( function&& other );            \fB(2)\fP \fI(since C++11)\fP
   function& operator=( std::nullptr_t );              \fB(3)\fP \fI(since C++11)\fP
   template< class F >                                 \fB(4)\fP \fI(since C++11)\fP
   function& operator=( F&& f );
   template< class F >                                 \fB(5)\fP \fI(since C++11)\fP
   function& operator=( std::reference_wrapper<F> f );

   Assigns a new target to std::function.

   1) Assigns a copy of target of other, as if by executing
   function(other).swap(*this);
   2) Moves the target of other to *this. other is in a valid state with an unspecified
   value.
   3) Drops the current target. *this is empty after the call.
   4) Sets the target of *this to the callable f, as if by executing
   function(std::forward<F>(f)).swap(*this);.
   This operator does not participate in overload resolution unless f is Callable for
   argument types Args... and return type R.
   \fI(since C++14)\fP
   5) Sets the target of *this to a copy of f, as if by executing
   function(f).swap(*this);

.SH Parameters

   other - another std::function object to copy the target of
   f     - a callable to initialize the target with
.SH Type requirements
   -
   F must meet the requirements of Callable.

.SH Return value

   *this

.SH Exceptions

   1-2) \fI(none)\fP
   3)

   \fI(none)\fP                    \fI(until C++17)\fP
   noexcept specification:  
   noexcept                  \fI(since C++17)\fP
     

   4) \fI(none)\fP
   5)
   noexcept specification:  
   noexcept
     

.SH Notes

   Even before allocator support was removed from std::function in C++17, these
   assignment operators use the default allocator rather than the allocator of *this or
   the allocator of other (see LWG #2386).

.SH See also


   assign        assigns a new target
   \fI(until C++17)\fP \fI(public member function)\fP 

.SH Category:

     * unconditionally noexcept

   Hidden categories:

     * Pages with unreviewed unconditional noexcept template
     * Pages with unreviewed noexcept template
