.TH std::basic_string::compare 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::basic_string::compare \- std::basic_string::compare

.SH Synopsis
   int compare( const basic_string& str ) const;                 \fB(1)\fP
   int compare( size_type pos1, size_type count1,                \fB(2)\fP
                const basic_string& str ) const;
   int compare( size_type pos1, size_type count1,

                const basic_string& str,                                 \fI(until C++14)\fP

                size_type pos2, size_type count2 ) const;
   int compare( size_type pos1, size_type count1,

                const basic_string& str,                                 \fI(since C++14)\fP

                size_type pos2, size_type count2 = npos ) const;
   int compare( const CharT* s ) const;                              \fB(4)\fP
   int compare( size_type pos1, size_type count1,                \fB(3)\fP \fB(5)\fP
                const CharT* s ) const;
   int compare( size_type pos1, size_type count1,                    \fB(6)\fP
                const CharT* s, size_type count2 ) const;
   int compare( std::basic_string_view<CharT, Traits> sv) const;     \fB(7)\fP \fI(since C++17)\fP
   int compare( size_type pos1, size_type count1,                    \fB(8)\fP \fI(since C++17)\fP
                std::basic_string_view<CharT, Traits> sv) const;
   template < class T >

   int compare( size_type pos1, size_type count1,                    \fB(9)\fP \fI(since C++17)\fP
                const T& t,

                size_type pos2, size_type count2 = npos) const;

   Compares two character sequences.

   1) Compares this string to str. First, calculates the number of characters to
   compare, as if by size_type rlen = std::min(size(), str.size()). Then compares by
   calling Traits::compare(data(), str.data(), rlen). For standard strings this
   function performs character-by-character lexicographical comparison. If the result
   is zero (the strings are equal so far), then their sizes are compared as follows:

                         Condition                             Result      Return value
   Traits::compare(data, arg, rlen) < 0                   data is less     <0
                                                          than arg
                                      size(data) <        data is less     <0
                                      size(arg)           than arg
   Traits::compare(data, arg, rlen)   size(data) ==       data is equal to 0
   == 0                               size(arg)           arg
                                      size(data) >        data is greater  >0
                                      size(arg)           than arg
   Traits::compare(data, arg, rlen) > 0                   data is greater  >0
                                                          than arg

   2) Compares a [pos1, pos1+count1) substring of this string to str as if by
   basic_string(*this, pos1, count1).compare(str)
   \fI(until C++17)\fP
   compare(pos1, count1, std::basic_string_view<CharT, Traits>(str))
   \fI(since C++17)\fP
   3) Compares a [pos1, pos1+count1) substring of this string to a substring [pos2,
   pos2+count2) of str as if by
   basic_string(*this, pos1, count1).compare(basic_string(str, pos2, count2))
   \fI(until C++17)\fP
   compare(pos1, count1, std::basic_string_view<CharT, Traits>(str), pos2, count2)
   \fI(since C++17)\fP
   4) Compares this string to the null-terminated character sequence beginning at the
   character pointed to by s, as if by compare(basic_string(s))
   5) Compares a [pos1, pos1+count1) substring of this string to the null-terminated
   character sequence beginning at the character pointed to by s, as if by
   basic_string(*this, pos, count1).compare(basic_string(s))
   6) Compares a [pos1, pos1+count1) substring of this string to the first count2
   characters of the character array whose first character is pointed to by s, as if by
   basic_string(*this, pos, count1).compare(basic_string(s, count2)). (Note: the
   characters from s to s+count2 may include null characters))
   7) Compares this string to sv, similar to \fB(1)\fP except for using sv.size() and
   sv.data() instead of str.size() and str.data()
   8) Compares a [pos1, pos1+count1) substring of this string to sv, as if by
   std::basic_string_view<CharT, Traits>(data(), size()).substr(pos1,
   count1).compare(sv)
   9) Converts t to a string view sv as if by std::basic_string_view<CharT, Traits> sv
   = t;, then compares a [pos1, pos1+count1) substring of this string to a substring
   [pos2, pos2+count2) of sv as if by std::basic_string_view<CharT, Traits>(data(),
   size()).substr(pos1, count1).compare(sv.substr(pos2, count2));. This overload only
   participates in overload resolution if std::is_convertible_v<const T&,
   std::basic_string_view<CharT, Traits>> is true and std::is_convertible_v<const T&,
   const CharT*> is false.

.SH Parameters

   str    - other string to compare to
   s      - pointer to the character string to compare to
   count1 - number of characters of this string to compare
   pos1   - position of the first character in this string to compare
   count2 - number of characters of the given string to compare
   pos2   - position of the first character of the given string to compare
   sv     - std::basic_string_view to compare to
   t      - object (convertible to std::basic_string_view) to compare to

.SH Return value

   negative value if *this appears before the character sequence specified by the
   arguments, in lexicographical order

   zero if both character sequences compare equivalent

   positive value if *this appears after the character sequence specified by the
   arguments, in lexicographical order

.SH Exceptions

   1)

   \fI(none)\fP                    \fI(until C++11)\fP
   noexcept specification:  
   noexcept                  \fI(since C++11)\fP
     

   2-6) May throw the exceptions thrown by the corresponding basic_string constructors.

   7)
   noexcept specification:   \fI(since C++17)\fP
   noexcept
     

.SH Possible implementation

template<class CharT, class Traits, class Alloc>
int basic_string<CharT, Traits, Alloc>::compare(const std::basic_string& s) const noexcept
{
    size_type lhs_sz = size();
    size_type rhs_sz = s.size();
    int result = traits_type::compare(data(), s.data(), std::min(lhs_sz, rhs_sz));
    if (result != 0)
        return result;
    if (lhs_sz < rhs_sz)
        return -1;
    if (lhs_sz > rhs_sz)
        return 1;
    return 0;
}

.SH Notes

   For the situations when three-way comparison is not required, std::basic_string
   provides the usual relational operators (<, <=, ==, >, etc).

   By default (with the default std::char_traits), this function is not
   locale-sensitive. See std::collate::compare for locale-aware three-way string
   comparison.

.SH Example

   
// Run this code

 #include <cassert>
 #include <string>
 #include <iostream>
  
 int main()
 {
     // 1) Compare with other string
     {
         int compare_value{
             std::string{"Batman"}.compare(std::string{"Superman"})
         };
         std::cout << (
             compare_value < 0 ? "Batman comes before Superman\\n" :
             compare_value > 0 ? "Batman comes before Superman\\n" :
             "Superman and Batman are the same.\\n"
         );
     }
  
     // 2) Compare substring with other string
     {
         int compare_value{
             std::string{"Batman"}.compare(3, 3, std::string{"Superman"})
         };
         std::cout << (
             compare_value < 0 ? "man comes before Superman\\n" :
             compare_value > 0 ? "Superman comes before man\\n" :
             "man and Superman are the same.\\n"
         );
     }
  
     // 3) Compare substring with other substring
     {
         std::string a{"Batman"};
         std::string b{"Superman"};
  
         int compare_value{a.compare(3, 3, b, 5, 3)};
  
         std::cout << (
             compare_value < 0 ? "man comes before man\\n" :
             compare_value > 0 ? "man comes before man\\n" :
             "man and man are the same.\\n"
         );
         // Compare substring with other substring
         // defaulting to end of other string
         assert(compare_value == a.compare(3, 3, b, 5));
     }
  
     // 4) Compare with char pointer
     {
         int compare_value{std::string{"Batman"}.compare("Superman")};
  
         std::cout << (
             compare_value < 0 ? "Batman comes before Superman\\n" :
             compare_value > 0 ? "Superman comes before Batman\\n" :
             "Superman and Batman are the same.\\n"
         );
     }
  
     // 5) Compare substring with char pointer
     {
         int compare_value{std::string{"Batman"}.compare(3, 3, "Superman")};
  
         std::cout << (
             compare_value < 0 ? "man comes before Superman\\n" :
             compare_value > 0 ? "Superman comes before man\\n" :
             "man and Superman are the same.\\n"
         );
     }
  
     // 6) Compare substring with char pointer substring
     {
         int compare_value{std::string{"Batman"}.compare(0, 3, "Superman", 5)};
  
         std::cout << (
             compare_value < 0 ? "Bat comes before Super\\n" :
             compare_value > 0 ? "Super comes before Bat\\n" :
             "Super and Bat are the same.\\n"
         );
     }
 }

.SH Output:

 Batman comes before Superman
 Superman comes before man
 man and man are the same.
 Batman comes before Superman
 Superman comes before man
 Bat comes before Super

.SH See also

   operator==
   operator!=
   operator<               lexicographically compares two strings
   operator>               \fI(function template)\fP 
   operator<=
   operator>=
   substr                  returns a substring
                           \fI(public member function)\fP 
   collate                 defines lexicographical comparison and hashing of strings
                           \fI(class template)\fP 
   strcoll                 compares two strings in accordance to the current locale
                           \fI(function)\fP 
                           returns true if one range is lexicographically less than
   lexicographical_compare another
                           \fI(function template)\fP 

.SH Category:

     * unconditionally noexcept

   Hidden categories:

     * Pages with unreviewed unconditional noexcept template
     * Pages with unreviewed noexcept template
