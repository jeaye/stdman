.TH std::sinh(std::complex) 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::sinh(std::complex) \- std::sinh(std::complex)

.SH Synopsis
   Defined in header <complex>
   template< class T >                      \fI(since C++11)\fP
   complex<T> sinh( const complex<T>& z );

   Computes complex hyperbolic sine of a complex value z.

.SH Parameters

   z - complex value

.SH Return value

   If no errors occur, complex hyperbolic sine of z is returned

   Error handling and special values

   Errors are reported consistent with math_errhandling

   If the implementation supports IEEE floating-point arithmetic,

     * std::sinh(std::conj(z)) == std::conj(std::sinh(z))
     * std::sinh(z) == -std::sinh(-z)
     * If z is (+0,+0), the result is (+0,+0)
     * If z is (+0,+∞), the result is (±0,NaN) (the sign of the real part is
       unspecified) and FE_INVALID is raised
     * If z is (+0,NaN), the result is (±0,NaN)
     * If z is (x,+∞) (for any positive finite x), the result is (NaN,NaN) and
       FE_INVALID is raised
     * If z is (x,NaN) (for any positive finite x), the result is (NaN,NaN) and
       FE_INVALID may be raised
     * If z is (+∞,+0), the result is (+∞,+0)
     * If z is (+∞,y) (for any positive finite y), the result is +∞cis(y)
     * If z is (+∞,+∞), the result is (±∞,NaN) (the sign of the real part is
       unspecified) and FE_INVALID is raised
     * If z is (+∞,NaN), the result is (±∞,NaN) (the sign of the real part is
       unspecified)
     * If z is (NaN,+0), the result is (NaN,+0)
     * If z is (NaN,y) (for any finite nonzero y), the result is (NaN,NaN) and
       FE_INVALID may be raised
     * If z is (NaN,NaN), the result is (NaN,NaN)

   where cis(y) is cos(y) + i sin(y)

.SH Notes

   Mathematical definition of hyperbolic sine is sinh z =

   ez
   -e-z
   2

   Hyperbolic sine is an entire function in the complex plane and has no branch cuts.
   It is periodic with respect to the imaginary component, with period 2πi

.SH Example

   
// Run this code

 #include <iostream>
 #include <cmath>
 #include <complex>
  
 int main()
 {
     std::cout << std::fixed;
     std::complex<double> z(1, 0); // behaves like real sinh along the real line
     std::cout << "sinh" << z << " = " << std::sinh(z)
               << " (sinh(1) = " << std::sinh(1) << ")\\n";
  
     std::complex<double> z2(0, 1); // behaves like sine along the imaginary line
     std::cout << "sinh" << z2 << " = " << std::sinh(z2)
               << " ( sin(1) = " << std::sin(1) << ")\\n";
 }

.SH Output:

 sinh(1.000000,0.000000) = (1.175201,0.000000) (sinh\fB(1)\fP = 1.175201)
 sinh(0.000000,1.000000) = (0.000000,0.841471) ( sin\fB(1)\fP = 0.841471)

.SH See also

   cosh(std::complex)  computes hyperbolic cosine of a complex number (ch(z))
                       \fI(function template)\fP 
   tanh(std::complex)  computes hyperbolic tangent of a complex number
                       \fI(function template)\fP 
   asinh(std::complex) computes area hyperbolic sine of a complex number
   \fI(C++11)\fP             \fI(function template)\fP 
   sinh                computes hyperbolic sine (sh(x))
                       \fI(function)\fP 
   sinh(std::valarray) applies the function std::sinh to each element of valarray
                       \fI(function template)\fP 
   C documentation for
   csinh
