.TH std::hash(std::string,std::wstring,std::u16string,std::u32string,std::pmr::string, 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::hash(std::string,std::wstring,std::u16string,std::u32string,std::pmr::string, \- std::hash(std::string,std::wstring,std::u16string,std::u32string,std::pmr::string,

.SH Synopsis

   Defined in header <string>
   template<> struct hash<std::string>;

   template<> struct hash<std::wstring>;         \fI(since C++11)\fP
   template<> struct hash<std::u16string>;

   template<> struct hash<std::u32string>;
   template<> struct hash<std::pmr::string>;

   template<> struct hash<std::pmr::wstring>;    (since C++20)
   template<> struct hash<std::pmr::u16string>;

   template<> struct hash<std::pmr::u32string>;

   The template specializations of std::hash for the various string classes allow users
   to obtain hashes of strings.

   These hashes equal the hashes of corresponding std::basic_string_view
   classes: If S is one of these string types, SV is the corresponding    \fI(since C++17)\fP
   string view type, and s is an object of type S, then std::hash<S>()(s)
   == std::hash<SV>()(SV(s)).

.SH Example

   The following code shows one possible output of a hash function used on a string:

   
// Run this code

 #include <iostream>
 #include <string>
 #include <functional>
  
 int main()
 {
     std::string s = "Stand back! I've got jimmies!";
     std::hash<std::string> hash_fn;
  
     size_t hash = hash_fn(s);
  
     std::cout << hash << '\\n';
 }

.SH Output:

 325378910

.SH See also

   hash    hash function object
   \fI(C++11)\fP \fI(class template)\fP 
