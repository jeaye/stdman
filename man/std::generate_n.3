.TH std::generate_n 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::generate_n \- std::generate_n

.SH Synopsis
   Defined in header <algorithm>
   template< class OutputIt, class Size, class Generator >                \fI(until C++11)\fP
   void generate_n( OutputIt first, Size count, Generator g );
   template< class OutputIt, class Size, class Generator >                \fI(since C++11)\fP
   OutputIt generate_n( OutputIt first, Size count, Generator g           (until C++20)
   );
   template< class OutputIt, class Size, class Generator >        \fB(1)\fP
   constexpr OutputIt generate_n( OutputIt first, Size count,             (since C++20)
   Generator g );
   template< class ExecutionPolicy, class ForwardIt , class Size,
   class Generator >                                                  \fB(2)\fP \fI(since C++17)\fP
   ForwardIt generate_n( ExecutionPolicy&& policy, ForwardIt
   first, Size count, Generator g );

   1) Assigns values, generated by given function object g, to the first count elements
   in the range beginning at first, if count>0. Does nothing otherwise.
   2) Same as \fB(1)\fP, but executed according to policy. This overload only participates in
   overload resolution if std::is_execution_policy_v<std::decay_t<ExecutionPolicy>> is
   true

.SH Parameters

   first  - the beginning of the range of elements to generate
   count  - number of the elements to generate
   policy - the execution policy to use. See execution policy for details.
            generator function object that will be called.

            The signature of the function should be equivalent to the following:
   g      -
            Ret fun();

            The type Ret must be such that an object of type OutputIt can be
            dereferenced and assigned a value of type Ret. 
.SH Type requirements
   -
   OutputIt must meet the requirements of OutputIterator.
   -
   ForwardIt must meet the requirements of ForwardIterator.

.SH Return value

   \fI(none)\fP                                                                 \fI(until C++11)\fP
   Iterator one past the last element assigned if count>0, first          \fI(since C++11)\fP
   otherwise.

.SH Complexity

   Exactly count invocations of g() and assignments, for count>0.

.SH Exceptions

   The overload with a template parameter named ExecutionPolicy reports errors as
   follows:

     * If execution of a function invoked as part of the algorithm throws an exception
       and ExecutionPolicy is one of the three standard policies, std::terminate is
       called. For any other ExecutionPolicy, the behavior is implementation-defined.
     * If the algorithm fails to allocate memory, std::bad_alloc is thrown.

.SH Possible implementation

   template< class OutputIt, class Size, class Generator >
   OutputIt generate_n( OutputIt first, Size count, Generator g )
   {
       for( Size i = 0; i < count; i++ ) {
           *first++ = g();
       }
       return first;
   }

.SH Example

   The following code fills an array of integers with random numbers.

   
// Run this code

 #include <cstddef>
 #include <cstdlib>
 #include <iostream>
 #include <iterator>
 #include <algorithm>
  
 int main()
 {
     const std::size_t N = 5;
     int ar[N];
     std::generate_n(ar, N, std::rand); // Using the C function rand()
  
     std::cout << "ar: ";
     std::copy(ar, ar+N, std::ostream_iterator<int>(std::cout, " "));
     std::cout << "\\n";
 }

.SH Possible output:

 ar: 52894 15984720 41513563 41346135 51451456

.SH See also

   fill_n   copy-assigns the given value to N elements in a range
            \fI(function template)\fP 
            assigns the results of successive function calls to every element in a
   generate range
            \fI(function template)\fP 
