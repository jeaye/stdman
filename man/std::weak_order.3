.TH std::weak_order 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::weak_order \- std::weak_order

.SH Synopsis
   Defined in header <compare>
   template< class T >                                               \fI(since C++20)\fP
   constexpr std::weak_ordering weak_order(const T& a, const T& b);

   Compares two values using 3-way comparison and produces a result of type
   std::weak_ordering

   Specifically,

     * If the expression a <=> b is well-formed and its result is convertible to
       std::weak_ordering, returns that result.
     * Otherwise, if the expression a <=> b is well-formed, but its result is not
       convertible to std::weak_ordering, then the function is defined as deleted.
     * Otherwise, if the expression a <=> b is ill-formed, but the expressions a == b
       and a < b are both well-formed and convertible to bool,

              * if a == b is true, returns std::weak_ordering::equivalent
              * otherwise, if a < b is true, returns std::weak_ordering::less
              * otherwise, returns std::weak_ordering::greater

     * Otherwise, the function is defined as deleted.

.SH Parameters

   a, b - values to compare

.SH Return value

   A value of type std::weak_ordering, as described above.

.SH Notes

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

   weak_ordering the result type of 3-way comparison that supports all 6 operators and
   (C++20)       is not substitutable
                 \fI(class)\fP 
   strong_order  performs 3-way comparison and produces a result of type
   (C++20)       std::strong_ordering
                 \fI(function template)\fP 
   partial_order performs 3-way comparison and produces a result of type
   (C++20)       std::partial_ordering
                 \fI(function template)\fP 
   weak_equal    performs 3-way comparison and produces a result of type
   (C++20)       std::weak_equality
                 \fI(function template)\fP 

.SH Category:

     * Todo no example
