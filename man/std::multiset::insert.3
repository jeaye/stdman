.TH std::multiset::insert 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::multiset::insert \- std::multiset::insert

.SH Synopsis
   iterator insert( const value_type& value );          \fB(1)\fP
   iterator insert( value_type&& value );               \fB(2)\fP \fI(since C++11)\fP
   iterator insert( iterator hint, const value_type&                      \fI(until C++11)\fP
   value );
   iterator insert( const_iterator hint, const                            \fI(since C++11)\fP
   value_type& value );
   iterator insert( const_iterator hint, value_type&&       \fB(4)\fP           \fI(since C++11)\fP
   value );
   template< class InputIt >                            \fB(3)\fP \fB(5)\fP
   void insert( InputIt first, InputIt last );
   void insert( std::initializer_list<value_type> ilist     \fB(6)\fP           \fI(since C++11)\fP
   );
   iterator insert(node_type&& nh);                         \fB(7)\fP           \fI(since C++17)\fP
   iterator insert(const_iterator hint, node_type&&         \fB(8)\fP           \fI(since C++17)\fP
   nh);

   Inserts element(s) into the container.

   1-2) Inserts value. If the container has elements with equivalent key, inserts at
   the upper bound of that range.\fI(since C++11)\fP.
   3-4) inserts value in the position as close as possible, just prior\fI(since C++11)\fP, to
   hint.
   5) inserts elements from range [first, last).
   6) inserts elements from initializer list ilist.
   7) If nh is an empty node handle, does nothing. Otherwise, inserts the element owned
   by nh into the container and returns an iterator pointing at the inserted element.
   If a range containing elements with keys equivalent to nh.key() exists in the
   container, the element is inserted at the end of that range. The behavior is
   undefined if nh is not empty and get_allocator() != nh.get_allocator().
   8) If nh is an empty node handle, does nothing and returns the end iterator.
   Otherwise, inserts the element owned by nh into the container, and returns the
   iterator pointing to the element with key equivalent to nh.key() The element is
   inserted as close as possible to the position just prior to hint. The behavior is
   undefined if nh is not empty and get_allocator() != nh.get_allocator().

   No iterators or references are invalidated.
   If the insertion is successful, pointers and references to the element obtained
   while it is held in the node handle are invalidated, and pointers and references
   obtained to that element before it was extracted become valid.
   \fI(since C++17)\fP

.SH Parameters

                 iterator, used as a suggestion as to where to start the  \fI(until C++11)\fP
   hint        - search
                 iterator to the position before which the new element    \fI(since C++11)\fP
                 will be inserted
   value       - element value to insert
   first, last - range of elements to insert
   ilist       - initializer list to insert the values from
   nh          - a compatible node handle
.SH Type requirements
   -
   InputIt must meet the requirements of InputIterator.

.SH Return value

   1-4) Returns an iterator to the inserted element.
   5-6) \fI(none)\fP
   7,8) End iterator if nh was empty, iterator pointing to the inserted element
   otherwise.

.SH Exceptions

   1-4) If an exception is thrown by any operation, the insertion has no effect.

    This section is incomplete
    Reason: cases 5-6

.SH Complexity

   1-2) Logarithmic in the size of the container, O(log(size())).

   3-4) Amortized constant if the insertion happens in the position just  \fI(until C++11)\fP
   after the hint, logarithmic in the size of the container otherwise.
   3-4) Amortized constant if the insertion happens in the position just  \fI(since C++11)\fP
   before the hint, logarithmic in the size of the container otherwise.

   5-6) O(N*log(size() + N)), where N is the number of elements to insert.
   7) Logarithmic in the size of the container, O(log(size())).
   8) Amortized constant if the insertion happens in the position just before the hint,
   logarithmic in the size of the container otherwise.

.SH See also

   emplace      constructs element in-place
   \fI(C++11)\fP      \fI(public member function)\fP 
   emplace_hint constructs elements in-place using a hint
   \fI(C++11)\fP      \fI(public member function)\fP 

.SH Category:

     * Todo with reason
