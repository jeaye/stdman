.TH std::queue::queue 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::queue::queue \- std::queue::queue

.SH Synopsis
   explicit queue( const Container& cont = Container() );         \fI(until C++11)\fP
   explicit queue( const Container& cont );                       \fI(since C++11)\fP
   explicit queue( Container&& cont = Container() );          \fB(2)\fP \fI(since C++11)\fP
   queue( const queue& other );                               \fB(3)\fP
   queue( queue&& other );                                    \fB(4)\fP \fI(since C++11)\fP
   template< class Alloc >                                    \fB(5)\fP \fI(since C++11)\fP
   explicit queue( const Alloc& alloc );
   template< class Alloc >                                \fB(1)\fP \fB(6)\fP \fI(since C++11)\fP
   queue( const Container& cont, const Alloc& alloc );
   template< class Alloc >                                    \fB(7)\fP \fI(since C++11)\fP
   queue( Container&& cont, const Alloc& alloc );
   template< class Alloc >                                    \fB(8)\fP \fI(since C++11)\fP
   queue( const queue& other, const Alloc& alloc );
   template< class Alloc >                                    \fB(9)\fP \fI(since C++11)\fP
   queue( queue&& other, const Alloc& alloc );

   Constructs new underlying container of the container adaptor from a variety of data
   sources.

   1) Copy-constructs the underlying container c with the contents of cont.
   This is also the default constructor
   \fI(until C++11)\fP
   2) Move-constructs the underlying container c with std::move(cont).
   This is also the default constructor
   \fI(since C++11)\fP
   3) Copy constructor. The adaptor is copy-constructed with the contents of other.c.
   (implicitly declared)
   4) Move constructor. The adaptor is constructed with std::move(other.c). (implicitly
   declared)
   5-9) The following constructors are only defined if
   std::uses_allocator<container_type, Alloc>::value == true, that is, if the
   underlying container is an allocator-aware container (true for all standard library
   containers).
   5) Constructs the underlying container using alloc as allocator, as if by c(alloc).
   6) Constructs the underlying container with the contents of cont and using alloc as
   allocator, as if by c(cont, alloc).
   7) Constructs the underlying container with the contents of cont using move
   semantics while utilising alloc as allocator, as if by c(std::move(cont), alloc).
   8) Constructs the adaptor with the contents of other.c and using alloc as allocator,
   as if by c(other.c, alloc).
   9) Constructs the adaptor with the contents of other using move semantics while
   utilising alloc as allocator, as if by c(std::move(other.c), alloc).

.SH Parameters

   alloc                -          allocator to use for all memory allocations of the
                                   underlying container
   other                -          another container adaptor to be used as source to
                                   initialize the underlying container
   cont                 -          container to be used as source to initialize the
                                   underlying container
   first, last          -          range of elements to initialize with
.SH Type requirements
   -
   Alloc must meet the requirements of Allocator.
   -
   Container must meet the requirements of Container. The constructors (5-10) are only
   defined if Container meets the requirements of AllocatorAwareContainer
   -
   InputIt must meet the requirements of InputIterator.

.SH Complexity

   1, 3, 5, 6, 8: linear in cont or other

   2, 4, 7, 9: constant

    This section is incomplete

.SH Example

   
// Run this code

 #include <queue>
 #include <deque>
 #include <iostream>
  
 int main()
 {
     std::queue<int> c1;
     c1.push(5);
     std::cout << c1.size() << '\\n';
  
     std::queue<int> c2(c1);
     std::cout << c2.size() << '\\n';
  
     std::deque<int> deq {3, 1, 4, 1, 5};
     std::queue<int> c3(deq);
     std::cout << c3.size() << '\\n';
 }

.SH Output:

 1
 1
 5

.SH See also

   operator= assigns values to the container adaptor
             \fI(public member function)\fP 

.SH Category:

     * Todo without reason
