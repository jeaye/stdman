.TH std::wbuffer_convert::~wbuffer_convert 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::wbuffer_convert::~wbuffer_convert \- std::wbuffer_convert::~wbuffer_convert

.SH Synopsis
   Defined in header <locale>
   ~wbuffer_convert();

   Destroys the wbuffer_convert object and deletes the pointer to the conversion facet.

.SH Notes

   Some implementations are able to delete any facet, including the locale-specific
   facets with protected destructors. Other implementations require the facet to have a
   public destructor, similar to the the locale-independent facets from <codecvt>.

.SH Example

   
// Run this code

 #include <locale>
 #include <utility>
 #include <iostream>
 #include <codecvt>
  
 // utility wrapper to adapt locale-bound facets for wstring/wbuffer convert
 template<class Facet>
 struct deletable_facet : Facet
 {
     template<class ...Args>
     deletable_facet(Args&& ...args) : Facet(std::forward<Args>(args)...) {}
     ~deletable_facet() {}
 };
  
 int main()
 {
     // GB18030 / UCS4 conversion, using locale-based facet directly
     // typedef std::codecvt_byname<char32_t, char, std::mbstate_t> gbfacet_t;
     // Compiler error: "calling a protected destructor of codecvt_byname<> in ~wbuffer_convert"
     // std::wbuffer_convert<gbfacet_t, char32_t> gbto32(std::cout.rdbuf(),
     //                                        new gbfacet_t("zh_CN.gb18030"));
  
     // GB18030 / UCS4 conversion facet using a facet with public destructor
     typedef deletable_facet<std::codecvt_byname<char32_t, char, std::mbstate_t>> gbfacet_t;
     std::wbuffer_convert<gbfacet_t, char32_t> gbto32(std::cout.rdbuf(),
                                            new gbfacet_t("zh_CN.gb18030"));
 } // destructor called here

.SH See also

   destructor   destructs the wstring_convert and its conversion facet
                \fI(public member function of std::wstring_convert)\fP 
