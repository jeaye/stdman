.TH std::log1p 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::log1p \- std::log1p

.SH Synopsis
   Defined in header <cmath>
   float       log1p( float arg );       \fB(1)\fP \fI(since C++11)\fP
   double      log1p( double arg );      \fB(2)\fP \fI(since C++11)\fP
   long double log1p( long double arg ); \fB(3)\fP \fI(since C++11)\fP
   double      log1p( Integral arg );    \fB(4)\fP \fI(since C++11)\fP

   1-3) Computes the natural (base e) logarithm of 1+arg. This function is more precise
   than the expression std::log(1+arg) if arg is close to zero.
   4) A set of overloads or a function template accepting an argument of any integral
   type. Equivalent to 2) (the argument is cast to double).

.SH Parameters

   arg - value of floating-point or Integral type

.SH Return value

   If no errors occur ln(1+arg) is returned.

   If a domain error occurs, an implementation-defined value is returned (NaN where
   supported)

   If a pole error occurs, -HUGE_VAL, -HUGE_VALF, or -HUGE_VALL is returned.

   If a range error occurs due to underflow, the correct result (after rounding) is
   returned.

.SH Error handling

   Errors are reported as specified in math_errhandling

   Domain error occurs if arg is less than -1.

   Pole error may occur if arg is -1.

   If the implementation supports IEEE floating-point arithmetic (IEC 60559),

     * If the argument is ±0, it is returned unmodified
     * If the argument is -1, -∞ is returned and FE_DIVBYZERO is raised.
     * If the argument is less than -1, NaN is returned and FE_INVALID is raised.
     * If the argument is +∞, +∞ is returned
     * If the argument is NaN, NaN is returned

.SH Notes

   The functions std::expm1 and std::log1p are useful for financial calculations, for
   example, when calculating small daily interest rates: (1+x)n
   -1 can be expressed as std::expm1(n * std::log1p(x)). These functions also simplify
   writing accurate inverse hyperbolic functions.

.SH Example

   
// Run this code

 #include <iostream>
 #include <cfenv>
 #include <cmath>
 #include <cerrno>
 #include <cstring>
 #pragma STDC FENV_ACCESS ON
 int main()
 {
     std::cout << "log1p(0) = " << log1p(0) << '\\n'
               << "Interest earned in 2 days on on $100, compounded daily at 1%\\n"
               << " on a 30/360 calendar = "
               << 100*expm1(2*log1p(0.01/360)) << '\\n'
               << "log(1+1e-16) = " << std::log(1+1e-16)
               << " log1p(1e-16) = " << std::log1p(1e-16) << '\\n';
     // special values
     std::cout << "log1p(-0) = " << std::log1p(-0.0) << '\\n'
               << "log1p(+Inf) = " << std::log1p(INFINITY) << '\\n';
     // error handling
     errno=0; std::feclearexcept(FE_ALL_EXCEPT);
     std::cout << "log1p(-1) = " << std::log1p(-1) << '\\n';
     if(errno == ERANGE)
         std::cout << "    errno == ERANGE: " << std::strerror(errno) << '\\n';
     if(std::fetestexcept(FE_DIVBYZERO))
         std::cout << "    FE_DIVBYZERO raised\\n";
 }

.SH Possible output:

 log1p\fB(0)\fP = 0
 Interest earned in 2 days on on $100, compounded daily at 1%
  on a 30/360 calendar = 0.00555563
 log(1+1e-16) = 0 log1p(1e-16) = 1e-16
 log1p(-0) = -0
 log1p(+Inf) = inf
 log1p(-1) = -inf
     errno == ERANGE: Result too large
     FE_DIVBYZERO raised

.SH See also

   log     computes natural (base e) logarithm (ln(x))
           \fI(function)\fP 
   log10   computes common (base 10) logarithm (log[10](x))
           \fI(function)\fP 
   log2    base 2 logarithm of the given number (log[2](x))
   \fI(C++11)\fP \fI(function)\fP 
   expm1   returns e raised to the given power, minus one (e^x-1)
   \fI(C++11)\fP \fI(function)\fP 
   C documentation for
   log1p
