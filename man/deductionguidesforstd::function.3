.TH deductionguidesforstd::function 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
deductionguidesforstd::function \- deductionguidesforstd::function

.SH Synopsis
   Defined in header <functional>
   template<class R, class... ArgTypes>                     \fB(1)\fP \fI(since C++17)\fP
   function(R(*)(ArgTypes...)) -> function<R(ArgTypes...)>;
   template<class F>                                        \fB(2)\fP \fI(since C++17)\fP
   function(F) -> function</*see below*/>;

   1) This deduction guide is provided for std::function to allow deduction from
   functions.
   2) If decltype(&F::operator()) is of the form R(G::*)(A...) (optionally
   cv-qualified, optionally noexcept, optionally lvalue refrence qualified) for some
   class type G, then the deduced type is std::function<R(A...)>. This overload only
   participates in overload resolution if &F::operator() is well-formed when treated as
   an unevaluated operand.

.SH Example

   
// Run this code

 #include <functional>
 int func(double) { return 0; }
 int main() {
   std::function f{func}; // guide #1 deduces function<int(double)>
   int i = 5;
   std::function g = [&](double) { return i; }; // guide #2 deduces function<int(double)>
 }
