.TH std::reduce 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::reduce \- std::reduce

.SH Synopsis
   Defined in header <numeric>
   template<class InputIt>

   typename std::iterator_traits<InputIt>::value_type reduce(         \fB(1)\fP \fI(since C++17)\fP

       InputIt first, InputIt last);
   template<class ExecutionPolicy, class ForwardIt>

   typename std::iterator_traits<ForwardIt>::value_type reduce(       \fB(2)\fP \fI(since C++17)\fP
       ExecutionPolicy&& policy,

       ForwardIt first, ForwardIt last);
   template<class InputIt, class T>                                   \fB(3)\fP \fI(since C++17)\fP
   T reduce(InputIt first, InputIt last, T init);
   template<class ExecutionPolicy, class ForwardIt, class T>

   T reduce(ExecutionPolicy&& policy,                                 \fB(4)\fP \fI(since C++17)\fP

            ForwardIt first, ForwardIt last, T init);
   template<class InputIt, class T, class BinaryOp>                   \fB(5)\fP \fI(since C++17)\fP
   T reduce(InputIt first, InputIt last, T init, BinaryOp binary_op);
   template<class ExecutionPolicy, class ForwardIt, class T, class
   BinaryOp>

   T reduce(ExecutionPolicy&& policy,                                 \fB(6)\fP \fI(since C++17)\fP

            ForwardIt first, ForwardIt last, T init, BinaryOp
   binary_op);

   1) same as reduce(first, last, typename std::iterator_traits<InputIt>::value_type{})
   3) same as reduce(first, last, init, std::plus<>())
   5) Reduces the range [first; last), possibly permuted and aggregated in unspecified
   manner, along with the initial value init over binary_op.
   2,4,6) Same as (1,3,5), but executed according to policy. This overload only
   participates in overload resolution if
   std::is_execution_policy_v<std::decay_t<ExecutionPolicy>> is true

   The behavior is non-deterministic if binary_op is not associative or not
   commutative.

   The behavior is undefined if binary_op modifies any element or invalidates any
   iterator in [first; last], including the end iterator.

.SH Parameters

   first, last    -    the range of elements to apply the algorithm to
   init           -    the initial value of the generalized sum
   policy         -    the execution policy to use. See execution policy for details.
                       binary FunctionObject that will be applied in unspecified order
   binary_op      -    to the result of dereferencing the input iterators, the results
                       of other binary_op and init.
.SH Type requirements
   -
   InputIt must meet the requirements of InputIterator.
   -
   ForwardIt must meet the requirements of ForwardIterator.
   -
   T must meet the requirements of MoveConstructible. and binary_op(init, *first),
   binary_op(*first, init), binary_op(init, init), and binary_op(*first, *first) must
   be convertible to T.

.SH Return value

   Generalized sum of init and *first, *(first+1), ... *(last-1) over binary_op,

   where generalized sum GSUM(op, a
   1, ..., a
   N) is defined as follows:

     * if N=1, a
       1
     * if N > 1, op(GSUM(op, b
       1, ..., b
       K), GSUM(op, b
       M, ..., b
       N)) where

              * b
                1, ..., b
                N may be any permutation of a1, ..., aN and
              * 1 < K+1 = M â‰¤ N

   in other words, reduce behaves like std::accumulate except the elements of the range
   may be grouped and rearranged in arbitrary order

.SH Complexity

   O(last - first) applications of binary_op.

.SH Exceptions

   The overloads with a template parameter named ExecutionPolicy report errors as
   follows:

     * If execution of a function invoked as part of the algorithm throws an exception
       and ExecutionPolicy is one of the three standard policies, std::terminate is
       called. For any other ExecutionPolicy, the behavior is implementation-defined.
     * If the algorithm fails to allocate memory, std::bad_alloc is thrown.

.SH Notes

   If the range is empty, init is returned, unmodified

.SH Example

   side-by-side comparison between reduce and std::accumulate:

   
// Run this code

 #include <iostream>
 #include <chrono>
 #include <vector>
 #include <numeric>
 #include <execution>
  
 int main()
 {
     std::vector<double> v(10'000'007, 0.5);
  
     {
         auto t1 = std::chrono::high_resolution_clock::now();
         double result = std::accumulate(v.begin(), v.end(), 0.0);
         auto t2 = std::chrono::high_resolution_clock::now();
         std::chrono::duration<double, std::milli> ms = t2 - t1;
         std::cout << std::fixed << "std::accumulate result " << result
                   << " took " << ms.count() << " ms\\n";
     }
  
     {
         auto t1 = std::chrono::high_resolution_clock::now();
         double result = std::reduce(std::execution::par, v.begin(), v.end());
         auto t2 = std::chrono::high_resolution_clock::now();
         std::chrono::duration<double, std::milli> ms = t2 - t1;
         std::cout << "std::reduce result "
                   << result << " took " << ms.count() << " ms\\n";
     }
 }

.SH Possible output:

 std::accumulate result 5000003.50000 took 12.7365 ms
 std::reduce result 5000003.50000 took 5.06423 ms

.SH See also

   accumulate       sums up a range of elements
                    \fI(function template)\fP 
   transform        applies a function to a range of elements
                    \fI(function template)\fP 
   transform_reduce applies a functor, then reduces out of order
   \fI(C++17)\fP          \fI(function template)\fP 
