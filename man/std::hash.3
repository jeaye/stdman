.TH std::hash 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::hash \- std::hash

.SH Synopsis
   Defined in header <functional>
   template< class Key >           \fI(since C++11)\fP
   struct hash;

   Each specialization of this template is either enabled ("untainted")
   or disabled ("poisoned"). For every type Key for which neither the
   library nor the user provides an enabled specialization
   std::hash<Key>, that specialization exists and is disabled. Disabled
   specializations do not satisfy Hash, do not satisfy FunctionObject,    \fI(since C++17)\fP
   and std::is_default_constructible_v, std::is_copy_constructible_v,
   std::is_move_constructible_v, std::is_copy_assignable_v,
   std::is_move_assignable_v are all false. In other words, they exist,
   but cannot be used.

   The
   enabled specializations of the
   \fI(since C++17)\fP hash template defines a function object that implements a hash
   function. Instances of this function object satisfy Hash. In particular, they define
   an operator() that:

   1. Accepts a single parameter of type Key.

   2. Returns a value of type size_t that represents the hash value of the parameter.

   3. Does not throw exceptions when called.

   4. For two parameters k1 and k2 that are equal, std::hash<Key>()(k1) ==
   std::hash<Key>()(k2).

   5. For two different parameters k1 and k2 that are not equal, the probability that
   std::hash<Key>()(k1) == std::hash<Key>()(k2) should be very small, approaching
   1.0/std::numeric_limits<size_t>::max().

   All explicit and partial specializations of hash provided by the standard library
   are DefaultConstructible, CopyAssignable, Swappable and Destructible. User-provided
   specializations of hash also must meet those requirements.

   The unordered associative containers std::unordered_set, std::unordered_multiset,
   std::unordered_map, std::unordered_multimap use specializations of the template
   std::hash as the default hash function.

.SH Notes

   The actual hash functions are implementation-dependent and are not required to
   fulfill any other quality criteria except those specified above. Notably, some
   implementations use trivial (identity) hash functions which map an integer to
   itself. In other words, these hash functions are designed to work with unordered
   associative containers, but not as cryptographic hashes, for example.

   Hash functions are only required to produce the same result for the
   same input within a single execution of a program; this allows salted  \fI(since C++14)\fP
   hashes that prevent collision DoS attacks.

   There is no specialization for C strings. std::hash<const char*> produces a hash of
   the value of the pointer (the memory address), it does not examine the contents of
   any character array.

.SH Member types

   Member type                        Definition
   argument_type(deprecated in C++17) Key
   result_type(deprecated in C++17)   std::size_t

.SH Member functions

   constructor   constructs a hash function object
                 \fI(public member function)\fP
   operator()    calculate the hash of the argument
                 \fI(public member function)\fP

.SH Standard specializations for basic types

   Defined in header <functional>
   template<> struct hash<bool>;

   template<> struct hash<char>;
   template<> struct hash<signed char>;
   template<> struct hash<unsigned char>;
   template<> struct hash<char16_t>;
   template<> struct hash<char32_t>;
   template<> struct hash<wchar_t>;
   template<> struct hash<short>;
   template<> struct hash<unsigned short>;
   template<> struct hash<int>;
   template<> struct hash<unsigned int>;
   template<> struct hash<long>;
   template<> struct hash<long long>;
   template<> struct hash<unsigned long>;
   template<> struct hash<unsigned long long>;
   template<> struct hash<float>;
   template<> struct hash<double>;
   template<> struct hash<long double>;

   template< class T > struct hash<T*>;

   In addition to the above, the standard library provides
   specializations for all (scoped and unscoped) enumeration types. These \fI(since C++14)\fP
   may be (but are not required to be) implemented as
   std::hash<std::underlying_type<Enum>::type>)
   Each standard library header that declares the template std::hash
   provides enabled specializations of std::hash for std::nullptr t and
   all cv-unqualified arithmetic types (including any extended integer
   types), all enumeration types, and all pointer types.
                                                                          \fI(since C++17)\fP
   All member functions of all standard library specializations of this
   template are noexcept except for the member functions of
   std::hash<std::optional>, std::hash<std::variant>, and
   std::hash<std::unique_ptr>

.SH Standard specializations for library types

   std::hash<std::string>
   std::hash<std::u16string>
   std::hash<std::u32string>
   std::hash<std::wstring>
   std::hash<std::pmr::string>
   std::hash<std::pmr::u16string>
   std::hash<std::pmr::u32string>
   std::hash<std::pmr::wstring>    hash support for strings
   \fI(C++11)\fP                         \fI(class template specialization)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   \fI(C++11)\fP
   (C++20)
   (C++20)
   (C++20)
   (C++20)
   std::hash<std::error_code>      hash support for std::error_code
   \fI(C++11)\fP                         \fI(class template specialization)\fP 
   std::hash<std::bitset>          hash support for std::bitset
   \fI(C++11)\fP                         \fI(class template specialization)\fP 
   std::hash<std::unique_ptr>      hash support for std::unique_ptr
   \fI(C++11)\fP                         \fI(class template specialization)\fP 
   std::hash<std::shared_ptr>      hash support for std::shared_ptr
   \fI(C++11)\fP                         \fI(class template specialization)\fP 
   std::hash<std::type_index>      hash support for std::type_index
   \fI(C++11)\fP                         \fI(class template specialization)\fP 
   std::hash<std::vector<bool>>    hash support for std::vector<bool>
   \fI(C++11)\fP                         \fI(class template specialization)\fP
   std::hash<std::thread::id>      hash support for std::thread::id
   \fI(C++11)\fP                         \fI(class template specialization)\fP
   std::hash<std::optional>        specializes the std::hash algorithm
   \fI(C++17)\fP                         \fI(class template specialization)\fP 
   std::hash<std::variant>         specializes the std::hash algorithm
   \fI(C++17)\fP                         \fI(class template specialization)\fP 
   std::hash<std::string_view>
   std::hash<std::wstring_view>    hash support for string views
   std::hash<std::u16string_view>  \fI(class template specialization)\fP 
   std::hash<std::u32string_view>
   \fI(C++17)\fP
   std::hash<std::error_condition> hash support for std::error_condition
   \fI(C++17)\fP                         \fI(class template specialization)\fP 

   Note: additional specializations for std::pair and the standard container types, as
   well as utility functions to compose hashes are available in boost.hash

.SH Example

   
// Run this code

 #include <iostream>
 #include <iomanip>
 #include <functional>
 #include <string>
 #include <unordered_set>
  
 struct S {
     std::string first_name;
     std::string last_name;
 };
 bool operator==(const S& lhs, const S& rhs) {
     return lhs.first_name == rhs.first_name && lhs.last_name == rhs.last_name;
 }
  
 // custom hash can be a standalone function object:
 struct MyHash
 {
     std::size_t operator()(S const& s) const noexcept
     {
         std::size_t h1 = std::hash<std::string>{}(s.first_name);
         std::size_t h2 = std::hash<std::string>{}(s.last_name);
         return h1 ^ (h2 << 1); // or use boost::hash_combine (see Discussion)
     }
 };
  
 // custom specialization of std::hash can be injected in namespace std
 namespace std
 {
     template<> struct hash<S>
     {
         typedef S argument_type;
         typedef std::size_t result_type;
         result_type operator()(argument_type const& s) const noexcept
         {
             result_type const h1 ( std::hash<std::string>{}(s.first_name) );
             result_type const h2 ( std::hash<std::string>{}(s.last_name) );
             return h1 ^ (h2 << 1); // or use boost::hash_combine (see Discussion)
         }
     };
 }
  
 int main()
 {
  
     std::string str = "Meet the new boss...";
     std::size_t str_hash = std::hash<std::string>{}(str);
     std::cout << "hash(" << std::quoted(str) << ") = " << str_hash << '\\n';
  
     S obj = { "Hubert", "Farnsworth"};
     // using the standalone function object
     std::cout << "hash(" << std::quoted(obj.first_name) << ','
                << std::quoted(obj.last_name) << ") = "
                << MyHash{}(obj) << " (using MyHash)\\n                           or "
                << std::hash<S>{}(obj) << " (using injected std::hash<S> specialization)\\n"
  
     // custom hash makes it possible to use custom types in unordered containers
     // The example will use the injected std::hash<S> specialization above,
     // to use MyHash instead, pass it as a second template argument
     std::unordered_set<S> names = {obj, {"Bender", "Rodriguez"}, {"Leela", "Turanga"} };
     for(auto& s: names)
         std::cout << std::quoted(s.first_name) << ' ' << std::quoted(s.last_name) << '\\n';
 }

.SH Possible output:

 hash("Meet the new boss...") = 1861821886482076440
 hash("Hubert","Farnsworth") = 17622465712001802105 (using MyHash)
                            or 17622465712001802105 (using injected std::hash<S> specialization)
 "Leela" "Turanga"
 "Bender" "Rodriguez"
 "Hubert" "Farnsworth"
