.TH std::experimental::filesystem::directory_entry::status, 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::experimental::filesystem::directory_entry::status, \- std::experimental::filesystem::directory_entry::status,

.SH Synopsis

   file_status status() const;                         \fB(1)\fP (filesystem TS)
   file_status status( error_code& ec ) const;
   file_status symlink_status() const;                 \fB(2)\fP (filesystem TS)
   file_status symlink_status( error_code& ec ) const;

   1) Returns the potentially cached status of the entry, as if determined by a status
   call (symlinks are followed to their targets)
   2) Returns the potentially cached status of the entry, as if determined by a
   symlink_status call (symlinks are not followed)

.SH Parameters

   ec - out-parameter for error reporting in the non-throwing overload

.SH Return value

   The status of the file referred to by the entry.

.SH Exceptions

   The overload that does not take a error_code& parameter throws filesystem_error on
   underlying OS API errors, constructed with p as the first argument and the OS error
   code as the error code argument. std::bad_alloc may be thrown if memory allocation
   fails. The overload taking a error_code& parameter sets it to the OS API error code
   if an OS API call fails, and executes ec.clear() if no errors occur. This overload
   has
   noexcept specification:  
   noexcept
     

.SH Notes

   The file status information is usually provided as a byproduct of directory
   iteration, in which case it is cached and may be obtained by these member functions
   without the cost of an additional system call. During directory iteration, calling
   status is unnecessary and accessors such as is_directory should be called with the
   cached status value, not with a path.

.SH Example

   
// Run this code

 #include <iostream>
 #include <fstream>
 #include <cstdio>
 #include <cstring>
 #include <experimental/filesystem>
 #include <unistd.h>
 #include <sys/socket.h>
 #include <sys/un.h>
 #include <sys/stat.h>
  
 namespace fs = std::experimental::filesystem;
  
 void demo_status(const fs::path& p, fs::file_status s)
 {
     std::cout << p;
     // alternative: switch(s.type()) { case fs::file_type::regular: ...}
     if(fs::is_regular_file(s)) std::cout << " is a regular file\\n";
     if(fs::is_directory(s)) std::cout << " is a directory\\n";
     if(fs::is_block_file(s)) std::cout << " is a block device\\n";
     if(fs::is_character_file(s)) std::cout << " is a character device\\n";
     if(fs::is_fifo(s)) std::cout << " is a named IPC pipe\\n";
     if(fs::is_socket(s)) std::cout << " is a named IPC socket\\n";
     if(fs::is_symlink(s)) std::cout << " is a symlink\\n";
     if(!fs::exists(s)) std::cout << " does not exist\\n";
 }
 int main()
 {
     // create files of different kinds
     fs::create_directory("sandbox");
     std::ofstream("sandbox/file"); // create regular file
     fs::create_directory("sandbox/dir");
     mkfifo("sandbox/pipe", 0644);
     struct sockaddr_un addr;
     addr.sun_family = AF_UNIX;
     std::strcpy(addr.sun_path, "sandbox/sock");
     int fd = socket(PF_UNIX, SOCK_STREAM, 0);
     bind(fd, (struct sockaddr*)&addr, sizeof addr);
     fs::create_symlink("file", "sandbox/symlink");
  
     // demo different status accessors
     for(auto it = fs::directory_iterator("sandbox"); it != fs::directory_iterator(); ++it)
         demo_status(*it, it->symlink_status()); // use cached status from directory entry
     demo_status("dev/null", fs::status("/dev/null")); // direct calls to status
     demo_status("dev/sda", fs::status("/dev/sda"));
     demo_status("sandbox/no", fs::status("/sandbox/no"));
  
     // cleanup
     close(fd);
     fs::remove_all("sandbox");
 }

.SH Possible output:

 "sandbox/file" is a regular file
 "sandbox/dir" is a directory
 "sandbox/pipe" is a named IPC pipe
 "sandbox/sock" is a named IPC socket
 "sandbox/symlink" is a symlink
 "dev/null" is a character device
 "dev/sda" is a block device
 "sandbox/no" does not exist

.SH See also

   file_status       represents file type and permissions
                     \fI(class)\fP 
   status            determines file attributes
   symlink_status    determines file attributes, checking the symlink target
                     \fI(function)\fP 
   status_known      checks whether file status is known
                     \fI(function)\fP 
   is_block_file     checks whether the given path refers to block device
                     \fI(function)\fP 
   is_character_file checks whether the given path refers to a character device
                     \fI(function)\fP 
   is_directory      checks whether the given path refers to a directory
                     \fI(function)\fP 
   is_fifo           checks whether the given path refers to a named pipe
                     \fI(function)\fP 
   is_other          checks whether the argument refers to an other file
                     \fI(function)\fP 
   is_regular_file   checks whether the argument refers to a regular file
                     \fI(function)\fP 
   is_socket         checks whether the argument refers to a named IPC socket
                     \fI(function)\fP 
   is_symlink        checks whether the argument refers to a symbolic link
                     \fI(function)\fP 

.SH Category:

     * unconditionally noexcept

   Hidden categories:

     * Pages with unreviewed unconditional noexcept template
     * Pages with unreviewed noexcept template
