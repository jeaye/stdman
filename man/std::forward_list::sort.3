.TH std::forward_list::sort 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::forward_list::sort \- std::forward_list::sort

.SH Synopsis
   void sort();               \fB(1)\fP \fI(since C++11)\fP
   template< class Compare >  \fB(2)\fP \fI(since C++11)\fP
   void sort( Compare comp );

   Sorts the elements in ascending order. The order of equal elements is preserved. The
   first version uses operator< to compare the elements, the second version uses the
   given comparison function comp.

   If an exception is thrown, the order of elements in *this is unspecified.

.SH Parameters

          comparison function object (i.e. an object that satisfies the requirements of
          Compare) which returns true if the first argument is less than (i.e. is
          ordered before) the second.

          The signature of the comparison function should be equivalent to the
          following:
   comp -
           bool cmp(const Type1 &a, const Type2 &b);

          The signature does not need to have const &, but the function object must not
          modify the objects passed to it.
          The types Type1 and Type2 must be such that an object of type
          forward_list<T,Allocator>::const_iterator can be dereferenced and then
          implicitly converted to both of them. 

.SH Return value

   \fI(none)\fP

.SH Complexity

   Approximately N log N comparisons, where N is the number of elements in the list.

.SH Notes

   std::sort requires random access iterators and so cannot be used with forward_list .
   This function also differs from std::sort in that it does not require the element
   type of the forward_list to be swappable, preserves the values of all iterators, and
   performs a stable sort.

.SH Example

   
// Run this code

 #include <iostream>
 #include <functional>
 #include <forward_list>
  
 std::ostream& operator<<(std::ostream& ostr, const std::forward_list<int>& list)
 {
     for (auto &i : list) {
         ostr << " " << i;
     }
     return ostr;
 }
  
 int main()
 {
     std::forward_list<int> list = { 8,7,5,9,0,1,3,2,6,4 };
  
     std::cout << "before:     " << list << "\\n";
     list.sort();
     std::cout << "ascending:  " << list << "\\n";
     list.sort(std::greater<int>());
     std::cout << "descending: " << list << "\\n";
 }

.SH Output:

 before:      8 7 5 9 0 1 3 2 6 4
 ascending:   0 1 2 3 4 5 6 7 8 9
 descending:  9 8 7 6 5 4 3 2 1 0
