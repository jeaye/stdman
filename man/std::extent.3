.TH std::extent 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::extent \- std::extent

.SH Synopsis
   Defined in header <type_traits>
   template< class T, unsigned N = 0>  \fI(since C++11)\fP
   struct extent;

   If T is an array type, provides the member constant value equal to the number of
   elements along the Nth dimension of the array, if N is in [0, std::rank<T>::value).
   For any other type, or if T is array of unknown bound along its first dimension and
   N is 0, value is 0.

.SH Member constants

   value    the number of elements along the Nth dimension of T
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator std::size_t converts the object to std::size_t, returns value
                        \fI(public member function)\fP
   operator()           returns value
   \fI(C++14)\fP              \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type std::size_t
   type       std::integral_constant<std::size_t, value>

.SH Possible implementation

   template<class T, unsigned N = 0>
   struct extent : std::integral_constant<std::size_t, 0> {};
    
   template<class T>
   struct extent<T[], 0> : std::integral_constant<std::size_t, 0> {};
    
   template<class T, unsigned N>
   struct extent<T[], N> : std::extent<T, N-1> {};
    
   template<class T, std::size_t I>
   struct extent<T[I], 0> : std::integral_constant<std::size_t, I> {};
    
   template<class T, std::size_t I, unsigned N>
   struct extent<T[I], N> : std::extent<T, N-1> {};

.SH Example

   
// Run this code

 #include <iostream>
 #include <type_traits>
  
 int main()
 {
     std::cout << std::extent<int[3]>::value << '\\n'; //< default dimension is 0
     std::cout << std::extent<int[3][4], 0>::value << '\\n';
     std::cout << std::extent<int[3][4], 1>::value << '\\n';
     std::cout << std::extent<int[3][4], 2>::value << '\\n';
     std::cout << std::extent<int[]>::value << '\\n';
  
     const auto ext = std::extent<int[9]>{};
     std::cout << ext << '\\n'; //< implicit conversion to std::size_t
  
     const int ints[] = {1,2,3,4};
     std::cout << std::extent<decltype(ints)>::value << '\\n'; //< array size
 }

.SH Output:

 3
 3
 4
 0
 0
 9
 4

.SH See also

   is_array           checks if a type is an array type
   \fI(C++11)\fP            \fI(class template)\fP 
   rank               obtains the number of dimensions of an array type
   \fI(C++11)\fP            \fI(class template)\fP 
   remove_extent      removes one extent from the given array type
   \fI(C++11)\fP            \fI(class template)\fP 
   remove_all_extents removes all extents from the given array type
   \fI(C++11)\fP            \fI(class template)\fP 
