.TH std::reverse_copy 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::reverse_copy \- std::reverse_copy

.SH Synopsis
   Defined in header <algorithm>
   template< class BidirIt, class OutputIt >
   OutputIt reverse_copy( BidirIt first, BidirIt last, OutputIt           (until C++20)
   d_first );
   template< class BidirIt, class OutputIt >
   constexpr OutputIt reverse_copy( BidirIt first, BidirIt last,  \fB(1)\fP     (since C++20)
   OutputIt d_first );
   template< class ExecutionPolicy, class BidirIt, class
   ForwardIt >                                                        \fB(2)\fP \fI(since C++17)\fP
   ForwardIt reverse_copy( ExecutionPolicy&& policy, BidirIt
   first, BidirIt last, ForwardIt d_first );

   1) Copies the elements from the range [first, last) to another range beginning at
   d_first in such a way that the elements in the new range are in reverse order.
   Behaves as if by executing the assignment *(d_first + (last - first) - 1 - i) =
   *(first + i) once for each non-negative i < (last - first)
   If the source and destination ranges (that is, [first, last) and [d_first,
   d_first+(last-first)) respectively) overlap, the behavior is undefined.
   2) Same as \fB(1)\fP, but executed according to policy. This overload does not participate
   in overload resolution unless
   std::is_execution_policy_v<std::decay_t<ExecutionPolicy>> is true

.SH Parameters

   first, last    -    the range of elements to copy
   d_first        -    the beginning of the destination range
.SH Type requirements
   -
   BidirIt must meet the requirements of BidirectionalIterator.
   -
   OutputIt must meet the requirements of OutputIterator.
   -
   ForwardIt must meet the requirements of ForwardIterator.

.SH Return value

   Output iterator to the element past the last element copied.

.SH Exceptions

   The overload with a template parameter named ExecutionPolicy reports errors as
   follows:

     * If execution of a function invoked as part of the algorithm throws an exception
       and ExecutionPolicy is one of the three standard policies, std::terminate is
       called. For any other ExecutionPolicy, the behavior is implementation-defined.
     * If the algorithm fails to allocate memory, std::bad_alloc is thrown.

.SH Possible implementation

   template<class BidirIt, class OutputIt>
   OutputIt reverse_copy(BidirIt first, BidirIt last, OutputIt d_first)
   {
       while (first != last) {
           *(d_first++) = *(--last);
       }
       return d_first;
   }

.SH Example

   
// Run this code

 #include <vector>
 #include <iostream>
 #include <algorithm>
  
 int main()
 {
     std::vector<int> v({1,2,3});
     for (const auto& value : v) {
         std::cout << value << " ";
     }
     std::cout << '\\n';
  
     std::vector<int> destination(3);
     std::reverse_copy(std::begin(v), std::end(v), std::begin(destination));
     for (const auto& value : destination) {
         std::cout << value << " ";
     }
     std::cout << '\\n';
 }

.SH Output:

 1 2 3
 3 2 1

.SH Complexity

   Linear in the distance between first and last

.SH See also

   reverse reverses the order of elements in a range
           \fI(function template)\fP 
