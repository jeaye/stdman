.TH std::numeric_limits::is_signed 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::numeric_limits::is_signed \- std::numeric_limits::is_signed

.SH Synopsis
   static const bool is_signed;      \fI(until C++11)\fP
   static constexpr bool is_signed;  \fI(since C++11)\fP

   The value of std::numeric_limits<T>::is_signed is true for all signed arithmetic
   types T and false for the unsigned types. This constant is meaningful for all
   specializations.

.SH Standard specializations

   T                     value of std::numeric_limits<T>::is_signed
   /* non-specialized */ false
   bool                  false
   char                  implementation-defined
   signed char           true
   unsigned char         false
   wchar_t               implementation-defined
   char16_t              false
   char32_t              false
   short                 true
   unsigned short        false
   int                   true
   unsigned int          false
   long                  true
   unsigned long         false
   long long             true
   unsigned long long    false
   float                 true
   double                true
   long double           true

.SH See also

   is_signed  checks if a type is signed integer type
   \fI(C++11)\fP    \fI(class template)\fP
   is_integer identifies integer types
   \fB[static]\fP   \fI(public static member constant)\fP 
   is_exact   identifies exact types
   \fB[static]\fP   \fI(public static member constant)\fP 
   is_bounded identifies types that represent a finite set of values
   \fB[static]\fP   \fI(public static member constant)\fP 
