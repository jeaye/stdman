.TH std::promise::set_exception 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::promise::set_exception \- std::promise::set_exception

.SH Synopsis
   void set_exception( std::exception_ptr p );  \fI(since C++11)\fP

   Atomically stores the exception pointer p into the shared state and makes the state
   ready.

   The operation behaves as though set_value, set_exception, set_value_at_thread_exit,
   and set_exception_at_thread_exit acquire a single mutex associated with the promise
   object while updating the promise object.

   An exception is thrown if there is no shared state or the shared state already
   stores a value or exception.

.SH Parameters

   p - exception pointer to store. The behavior is undefined if p is null.

.SH Return value

   \fI(none)\fP

.SH Exceptions

   std::future_error on the following conditions:

     * *this has no shared state. The error category is set to no_state.

     * The shared state already stores a value or exception. The error category is set
       to promise_already_satisfied.

.SH Example

   
// Run this code

 #include <thread>
 #include <iostream>
 #include <future>
  
 int main()
 {
     std::promise<int> p;
     std::future<int> f = p.get_future();
  
     std::thread t([&p]{
         try {
             // code that may throw
             throw std::runtime_error("Example");
         } catch(...) {
             try {
                 // store anything thrown in the promise
                 p.set_exception(std::current_exception());
             } catch(...) {} // set_exception() may throw too
         }
     });
  
     try {
         std::cout << f.get();
     } catch(const std::exception& e) {
         std::cout << "Exception from the thread: " << e.what() << '\\n';
     }
     t.join();
 }

.SH Output:

 Exception from the thread: Example

.SH See also

                                sets the result to indicate an exception while
   set_exception_at_thread_exit delivering the notification only at thread exit
                                \fI(public member function)\fP 
