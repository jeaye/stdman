.TH std::is_scalar 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_scalar \- std::is_scalar

.SH Synopsis
   Defined in header <type_traits>
   template< class T >              \fI(since C++11)\fP
   struct is_scalar;

   If T is a scalar type (that is a possibly cv-qualified arithmetic, pointer, pointer
   to member, enumeration, or std::nullptr_t type), provides the member constant value
   equal true. For any other type, value is false.

.SH Template parameters

   T - a type to check

   Helper variable template

   template< class T >                                       \fI(since C++17)\fP
   inline constexpr bool is_scalar_v = is_scalar<T>::value;

   

Inherited from std::integral_constant

.SH Member constants

   value    true if T is a scalar type , false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP
   operator()    returns value
   \fI(C++14)\fP       \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Notes

   Each individual memory location in the C++ memory model, including the hidden memory
   locations used by language features (e.g virtual table pointer), has scalar type (or
   is a sequence of adjacent bit-fields of non-zero length). Sequencing of side-effects
   in expression evaluation, interthread synchronization, and dependency ordering are
   all defined in terms of individual scalar objects.

.SH Possible implementation

   template< class T >
   struct is_scalar : std::integral_constant<bool,
                        std::is_arithmetic<T>::value     ||
                        std::is_enum<T>::value           ||
                        std::is_pointer<T>::value        ||
                        std::is_member_pointer<T>::value ||
                        std::is_null_pointer<T>::value> {};

.SH Example

   
// Run this code

 #include <iostream>
 #include <type_traits>
  
 int main() {
     class cls {};
     std::cout << (std::is_scalar<int>::value
                      ? "T is a scalar"
                      : "T is not a scalar") << '\\n';
     std::cout << (std::is_scalar<cls>::value
                      ? "T is a scalar"
                      : "T is not a scalar") << '\\n';
 }

.SH Output:

 T is a scalar
 T is not a scalar

.SH See also

   is_arithmetic     checks if a type is arithmetic type
   \fI(C++11)\fP           \fI(class template)\fP 
   is_enum           checks if a type is an enumeration type
   \fI(C++11)\fP           \fI(class template)\fP 
   is_pointer        checks if a type is a pointer type
   \fI(C++11)\fP           \fI(class template)\fP 
   is_member_pointer checks if a type is a pointer to a non-static member function or
   \fI(C++11)\fP           object
                     \fI(class template)\fP 
