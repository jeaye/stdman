.TH std::tuple_cat 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::tuple_cat \- std::tuple_cat

.SH Synopsis
   Defined in header <tuple>
   template< class... Tuples >                                   \fI(since C++11)\fP
   std::tuple<CTypes...> tuple_cat(Tuples&&... args);            \fI(until C++14)\fP
   template< class... Tuples >                                   \fI(since C++14)\fP
   constexpr std::tuple<CTypes...> tuple_cat(Tuples&&... args);

   Constructs a tuple that is a concatenation of all tuples in args.

.SH Parameters

   args - zero or more tuples to concatenate

.SH Return value

   A std::tuple object composed of all elements of all argument tuples constructed from
   std::get<i>(std::forward<Ti>(arg)) for each individual element.

.SH Example

   
// Run this code

 #include <iostream>
 #include <tuple>
 #include <string>
  
 // helper function to print a tuple of any size
 template<class Tuple, std::size_t N>
 struct TuplePrinter {
     static void print(const Tuple& t)
     {
         TuplePrinter<Tuple, N-1>::print(t);
         std::cout << ", " << std::get<N-1>(t);
     }
 };
  
 template<class Tuple>
 struct TuplePrinter<Tuple, 1> {
     static void print(const Tuple& t)
     {
         std::cout << std::get<0>(t);
     }
 };
  
 template<class... Args>
 void print(const std::tuple<Args...>& t)
 {
     std::cout << "(";
     TuplePrinter<decltype(t), sizeof...(Args)>::print(t);
     std::cout << ")\\n";
 }
 // end helper function
  
 int main()
 {
     std::tuple<int, std::string, float> t1(10, "Test", 3.14);
     int n = 7;
     auto t2 = std::tuple_cat(t1, std::make_pair("Foo", "bar"), t1, std::tie(n));
     n = 10;
     print(t2);
 }

.SH Output:

 (10, Test, 3.14, Foo, bar, 10, Test, 3.14, 10)

.SH See also

   make_tuple       creates a tuple object of the type defined by the argument types
                    \fI(function template)\fP 
                    creates a tuple of lvalue references or unpacks a tuple into
   tie              individual objects
                    \fI(function template)\fP 
   forward_as_tuple creates a tuple of rvalue references
                    \fI(function template)\fP 
