.TH std::push_heap 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::push_heap \- std::push_heap

.SH Synopsis
   Defined in header <algorithm>
   template< class RandomIt >                       \fB(1)\fP
   void push_heap( RandomIt first, RandomIt last );
   template< class RandomIt, class Compare >

   void push_heap( RandomIt first, RandomIt last,   \fB(2)\fP

                   Compare comp );

   Inserts the element at the position last-1 into the max heap defined by the range
   [first, last-1). The first version of the function uses operator< to compare the
   elements, the second uses the given comparison function comp.

.SH Parameters

   first, last - the range of elements defining the heap to modify
                 comparison function object (i.e. an object that satisfies the
                 requirements of Compare) which returns true if the first argument is
                 less than the second.

                 The signature of the comparison function should be equivalent to the
                 following:
   comp        -
                  bool cmp(const Type1 &a, const Type2 &b);

                 The signature does not need to have const &, but the function object
                 must not modify the objects passed to it.
                 The types Type1 and Type2 must be such that an object of type RandomIt
                 can be dereferenced and then implicitly converted to both of them. 
.SH Type requirements
   -
   RandomIt must meet the requirements of RandomAccessIterator.
   -
   The type of dereferenced RandomIt must meet the requirements of MoveAssignable and
   MoveConstructible.

.SH Return value

   \fI(none)\fP

.SH Complexity

   At most log(N) comparisons where N=std::distance(first, last).

.SH Notes

   A max heap is a range of elements [f,l) that has the following properties:

              * With N = l - f, for all 0 < i < N, f[floor(

                i-1
                2

                )] does not compare less than f[i].
              * a new element can be added using std::push_heap()
              * the first element can be removed using std::pop_heap()

.SH Example

   
// Run this code

 #include <iostream>
 #include <algorithm>
 #include <vector>
  
 int main()
 {
     std::vector<int> v { 3, 1, 4, 1, 5, 9 };
  
     std::make_heap(v.begin(), v.end());
  
     std::cout << "v: ";
     for (auto i : v) std::cout << i << ' ';
     std::cout << '\\n';
  
     v.push_back(6);
  
     std::cout << "before push_heap: ";
     for (auto i : v) std::cout << i << ' ';
     std::cout << '\\n';
  
     std::push_heap(v.begin(), v.end());
  
     std::cout << "after push_heap: ";
     for (auto i : v) std::cout << i << ' ';
     std::cout << '\\n';
 }

.SH Output:

 v: 9 5 4 1 1 3
 before push_heap: 9 5 4 1 1 3 6
 after push_heap:  9 5 6 1 1 3 4

.SH See also

   pop_heap  removes the largest element from a max heap
             \fI(function template)\fP 
   make_heap creates a max heap out of a range of elements
             \fI(function template)\fP 
