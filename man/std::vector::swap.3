.TH std::vector::swap 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::vector::swap \- std::vector::swap

.SH Synopsis
   void swap( vector& other );                            \fI(until C++17)\fP
   void swap( vector& other ) noexcept(/* see below */);  \fI(since C++17)\fP

   Exchanges the contents of the container with those of other. Does not invoke any
   move, copy, or swap operations on individual elements.

   All iterators and references remain valid. The past-the-end iterator is invalidated.

   If std::allocator_traits<allocator_type>::propagate_on_container_swap::value
   is true, then the allocators are exchanged using an unqualified call to       (since
   non-member swap. Otherwise, they are not swapped (and if get_allocator() !=   C++11)
   other.get_allocator(), the behavior is undefined).

.SH Parameters

   other - container to exchange the contents with

.SH Return value

   \fI(none)\fP

.SH Exceptions

   \fI(none)\fP                                                                        (until
                                                                                 C++17)
   noexcept specification:                                                       (since
   noexcept(std::allocator_traits<Allocator>::propagate_on_container_swap::value C++17)
   || std::allocator_traits<Allocator>::is_always_equal::value)

.SH Complexity

   Constant.

.SH See also

   std::swap(std::vector) specializes the std::swap algorithm
                          \fI(function template)\fP 

.SH Example

   
// Run this code

 #include <vector>
 #include <iostream>
  
 void printVector(std::vector<int>& vec)
 {
     for (int a : vec)
     {
         std::cout << a << " ";
     }
 }
  
 int main()
 {
     std::vector<int> v1{1, 2, 3};
     std::vector<int> v2{7, 8, 9};
  
     std::cout << "v1: ";
     printVector(v1);
  
     std::cout << "\\nv2: ";
     printVector(v2);
  
     std::cout << "\\n-- SWAP\\n";
     v2.swap(v1);
  
     std::cout << "v1: ";
     printVector(v1);
  
     std::cout << "\\nv2: ";
     printVector(v2);
 }

.SH Output:

 v1: 1 2 3
 v2: 7 8 9
 -- SWAP
 v1: 7 8 9
 v2: 1 2 3

.SH Category:

     * conditionally noexcept
