.TH std::basic_string::rfind 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::basic_string::rfind \- std::basic_string::rfind

.SH Synopsis
   size_type rfind( const basic_string& str, size_type pos = npos )   \fB(1)\fP
   const;
   size_type rfind( const CharT* s, size_type pos, size_type count )  \fB(2)\fP
   const;
   size_type rfind( const CharT* s, size_type pos = npos ) const;     \fB(3)\fP
   size_type rfind( CharT ch, size_type pos = npos ) const;           \fB(4)\fP
   size_type rfind( std::basic_string_view<CharT, Traits> sv,         \fB(5)\fP \fI(since C++17)\fP
                    size_type pos = npos) const;

   Finds the last substring equal to the given character sequence. Search begins at
   pos, i.e. the found substring must not begin in a position following pos. If npos or
   any value not smaller than size()-1 is passed as pos, whole string will be searched.

   1) Finds the last substring equal to str (equality is checked by calling Traits::eq)
   , as if by rfind(std::basic_string_view<CharT, Traits>(str), pos)
   \fI(since C++17)\fP
   2) Finds the last substring equal to the first count characters of the character
   string pointed to by s. s can include null characters. Equivalent to
   rfind(std::basic_string(s, count), pos)
   \fI(until C++17)\fP
   rfind(std::basic_string_view<CharT, Traits>(s, count), pos)
   \fI(since C++17)\fP
   3) Finds the last substring equal to the character string pointed to by s. The
   length of the string is determined by the first null character. Equivalent to
   rfind(std::basic_string(s), pos)
   \fI(until C++17)\fP
   rfind(std::basic_string_view<CharT, Traits>(s), pos)
   \fI(since C++17)\fP
   4) Finds the last character ch. Equivalent to rfind(std::basic_string(1,c),pos)
   5) Finds the last substring equal to the contents of sv

.SH Parameters

   str   - string to search for
   pos   - position at which to begin searching
   count - length of substring to search for
   s     - pointer to a character string to search for
   ch    - character to search for
   sv    - std::basic_string_view to search for

.SH Return value

   Position of the first character of the found substring or npos if no such substring
   is found. Note that this is an offset from the start of the string, not the end.

   If searching for an empty string (str.size(), count, or strlen(s) is zero) returns
   pos (the empty string is found immediately) unless pos > size() (including the case
   where pos == npos), in which case returns size().

   Otherwise, if size() is zero, npos is always returned.

.SH Exceptions

   1-4) \fI(none)\fP               \fI(until C++11)\fP
   1,4)
   noexcept specification:   \fI(since C++11)\fP
   noexcept                  \fI(until C++14)\fP
     
   2,3) \fI(none)\fP
   1)
   noexcept specification:  
   noexcept                  \fI(since C++14)\fP
     
   2,3,4) \fI(none)\fP
   5)
   noexcept specification:   \fI(since C++17)\fP
   noexcept
     

.SH Example

   
// Run this code

 #include <string>
 #include <iostream>
  
 void print(std::string::size_type n, std::string const &s)
 {
     if (n == std::string::npos) {
         std::cout << "not found\\n";
     } else {
         std::cout << "found: \\"" << s.substr(n) << "\\" at " << n << '\\n';
     }
 }
  
 int main()
 {
     std::string::size_type n;
     std::string const s = "This is a string";
  
     // search backwards from end of string
     n = s.rfind("is");
     print(n, s);
     // search backwards from position 4
     n = s.rfind("is", 4);
     print(n, s);
     // find a single character
     n = s.rfind('s');
     print(n, s);
     // find a single character
     n = s.rfind('q');
     print(n, s);
 }

.SH Output:

 found: "is a string" at 5
 found: "is is a string" at 2
 found: "string" at 10
 not found

.SH See also

   find              find characters in the string
                     \fI(public member function)\fP 
   find_first_of     find first occurrence of characters
                     \fI(public member function)\fP 
   find_first_not_of find first absence of characters
                     \fI(public member function)\fP 
   find_last_of      find last occurrence of characters
                     \fI(public member function)\fP 
   find_last_not_of  find last absence of characters
                     \fI(public member function)\fP 

.SH Category:

     * unconditionally noexcept

   Hidden categories:

     * Pages with unreviewed unconditional noexcept template
     * Pages with unreviewed noexcept template
