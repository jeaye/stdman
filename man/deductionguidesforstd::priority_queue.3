.TH deductionguidesforstd::priority_queue 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
deductionguidesforstd::priority_queue \- deductionguidesforstd::priority_queue

.SH Synopsis
   Defined in header <queue>
   template <class Compare, class Container>

   priority_queue(Compare, Container)                                 \fB(1)\fP \fI(since C++17)\fP

    -> priority_queue<typename Container::value_type, Container,
   Compare>;
   template<class InputIt,

            class Comp = std::less<typename
   std::iterator_traits<InputIt>::value_type>,
            class Container = std::vector<typename
   iterator_traits<InputIt>::value_type>>                             \fB(2)\fP \fI(since C++17)\fP
   priority_queue(InputIt, InputIt, Comp = Comp(), Container =
   Container())

     -> priority_queue<typename
   std::iterator_traits<InputIt>::value_type, Container, Comp>;
   template<class Comp, class Container, class Alloc>

   priority_queue(Comp, Container, Alloc)                             \fB(2)\fP \fI(since C++17)\fP

     -> priority_queue<typename Container::value_type, Container,
   Comp>;

   These deduction guides are provided for std::priority_queue to allow deduction from
   underlying container type (overloads (1,3)) and from an iterator range (overload
   \fB(2)\fP) This overload only participates in overload resolution if InputIt satisfies
   InputIterator, Alloc satisfies Allocator, Comp does not satisfy Allocator, Container
   does not satisfy Allocator and, for overload \fB(3)\fP, if
   std::uses_allocator_v<Container, Alloc> is true

   Note: the extent to which the library determines that a type does not satisfy
   InputIterator is unspecified, except that as a minimum integral types do not qualify
   as input iterators. Likewise, the extent to which it determines that a type does not
   satisfy Allocator is unspecified, except that as a minimum the member type
   Alloc::value_type must exist and the expression
   std::declval<Alloc&>().allocate(std::size_t{}) must be well-formed when treated as
   an unevaluated operand.

.SH Example

   
// Run this code

 #include <vector>
 #include <queue>
 int main() {
    std::vector<int> v = {1,2,3,4};
    std::priority_queue pq1{v};                  // deduces std::priority_queue<int>
    std::priority_queue pq2{v.begin(), v.end()}; // deduces std::priority_queue<int>
 }
