.TH std::rank 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::rank \- std::rank

.SH Synopsis
   Defined in header <type_traits>
   template< class T >              \fI(since C++11)\fP
   struct rank;

   If T is an array type, provides the member constant value equal to the number of
   dimensions of the array. For any other type, value is 0.

.SH Member constants

   value    the number of dimensions of T or zero
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator std::size_t converts the object to std::size_t, returns value
                        \fI(public member function)\fP
   operator()           returns value
   \fI(C++14)\fP              \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type std::size_t
   type       std::integral_constant<std::size_t, value>

.SH Possible implementation

   template<class T>
   struct rank : public std::integral_constant<std::size_t, 0> {};
    
   template<class T>
   struct rank<T[]> : public std::integral_constant<std::size_t, rank<T>::value + 1> {};
    
   template<class T, std::size_t N>
   struct rank<T[N]> : public std::integral_constant<std::size_t, rank<T>::value + 1> {};

.SH Example

   
// Run this code

 #include <iostream>
 #include <type_traits>
  
 int main()
 {
     std::cout << std::rank<int[1][2][3]>::value << '\\n';
     std::cout << std::rank<int[][2][3][4]>::value << '\\n';
     std::cout << std::rank<int>::value << '\\n';
 }

.SH Output:

 3
 4
 0

.SH See also

   is_array           checks if a type is an array type
   \fI(C++11)\fP            \fI(class template)\fP 
   extent             obtains the size of an array type along a specified dimension
   \fI(C++11)\fP            \fI(class template)\fP 
   remove_extent      removes one extent from the given array type
   \fI(C++11)\fP            \fI(class template)\fP 
   remove_all_extents removes all extents from the given array type
   \fI(C++11)\fP            \fI(class template)\fP 
