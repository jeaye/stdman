.TH std::beta,std::betaf,std::betal 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::beta,std::betaf,std::betal \- std::beta,std::betaf,std::betal

.SH Synopsis
   double      beta( double x, double y );

   float       betaf( float x, float y );             \fB(1)\fP \fI(since C++17)\fP

   long double betal( long double x, long double y );
   Promoted    beta( Arithmetic x, Arithmetic y );    \fB(2)\fP \fI(since C++17)\fP

   1) Computes the beta function of x and y.
   2) A set of overloads or a function template for all combinations of arguments of
   arithmetic type not covered by \fB(1)\fP. If any argument has integral type, it is cast to
   double. If any argument is long double, then the return type Promoted is also long
   double, otherwise the return type is always double.

.SH Parameters

   x, y - values of a floating-point or integral type

.SH Return value

   If no errors occur, value of the beta function of x and y, that is ∫1
   0tx-1
   (1-t)(y-1)
   dt, or, equivalently,

   Γ(x)Γ(y)
   Γ(x+y)

   is returned.

.SH Error handling

   Errors may be reported as specified in math_errhandling

     * If any argument is NaN, NaN is returned and domain error is not reported
     * The function is only required to be defined where both x and y are greater than
       zero, and is allowed to report a domain error otherwise.

.SH Notes

   Implementations that do not support C++17, but support ISO 29124:2010, provide this
   function if __STDCPP_MATH_SPEC_FUNCS__ is defined by the implementation to a value
   at least 201003L and if the user defines __STDCPP_WANT_MATH_SPEC_FUNCS__ before
   including any standard library headers.

   Implementations that do not support ISO 29124:2010 but support TR 19768:2007 (TR1),
   provide this function in the header tr1/cmath and namespace std::tr1

   An implementation of this function is also available in boost.math

   beta(x, y) equals beta(y, x)

   When x and y are positive integers, beta(x,y) equals
   \\(\\frac{(x-1)!(y-1)!}{(x+y-1)!}\\)

   (x-1)!(y-1)!
   (x+y-1)!

   .

   Binomial coefficients can be expressed in terms of the beta function: \\(\\binom{n}{k}
   = \\frac{1}{(n+1)B(n-k+1,k+1)}\\)⎛
   ⎜
   ⎝n
   k⎞
   ⎟
   ⎠=

   1
   (n+1)Β(n-k+1,k+1)

.SH Example

   
// Run this code

 #include <cmath>
 #include <string>
 #include <iostream>
 #include <iomanip>
 double binom(int n, int k) { return 1/((n+1)*std::beta(n-k+1,k+1)); }
 int main()
 {
     std::cout << "Pascal's triangle:\\n";
     for(int n = 1; n < 10; ++n) {
         std::cout << std::string(20-n*2, ' ');
         for(int k = 1; k < n; ++k)
             std::cout << std::setw(3) << binom(n,k) << ' ';
         std::cout << '\\n';
     }
 }

.SH Output:

 Pascal's triangle:
  
                   2
                 3   3
               4   6   4
             5  10  10   5
           6  15  20  15   6
         7  21  35  35  21   7
       8  28  56  70  56  28   8
     9  36  84 126 126  84  36   9

.SH See also

   tgamma  gamma function
   \fI(C++11)\fP \fI(function)\fP 

.SH External links

   Weisstein, Eric W. "Beta Function." From MathWorld--A Wolfram Web Resource.
