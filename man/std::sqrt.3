.TH std::sqrt 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::sqrt \- std::sqrt

.SH Synopsis
   Defined in header <cmath>
   float       sqrt( float arg );       \fB(1)\fP
   double      sqrt( double arg );      \fB(2)\fP
   long double sqrt( long double arg ); \fB(3)\fP
   double      sqrt( Integral arg );    \fB(4)\fP \fI(since C++11)\fP

   Computes the square root of arg.

   4) A set of overloads or a function template accepting an argument of any integral
   type. Equivalent to 2) (the argument is cast to double).

.SH Parameters

   arg - Value of a floating-point or Integral type

.SH Return value

   If no errors occur, square root of arg (
   √
   arg), is returned.

   If a domain error occurs, an implementation-defined value is returned (NaN where
   supported)

   If a range error occurs due to underflow, the correct result (after rounding) is
   returned.

.SH Error handling

   Errors are reported as specified in math_errhandling

   Domain error occurs if arg is less than zero.

   If the implementation supports IEEE floating-point arithmetic (IEC 60559),

     * If the argument is less than -0, FE_INVALID is raised and NaN is returned.
     * If the argument is +∞ or ±0, it is returned, unmodified.
     * If the argument is NaN, NaN is returned

.SH Notes

   std::sqrt is required by the IEEE standard to be exact. The only other operations
   required to be exact are the arithmetic operators and the function std::fma. After
   rounding to the return type (using default rounding mode), the result of std::sqrt
   is indistinguishable from the infinitely precise result. In other words, the error
   is less than 0.5 ulp. Other functions, including std::pow, are not so constrained.

.SH Example

   
// Run this code

 #include <iostream>
 #include <cmath>
 #include <cerrno>
 #include <cfenv>
 #include <cstring>
  
 #pragma STDC FENV_ACCESS ON
  
 int main()
 {
     // normal use
     std::cout << "sqrt(100) = " << std::sqrt(100) << '\\n'
               << "sqrt(2) = " << std::sqrt(2) << '\\n'
               << "golden ratio = " << (1+std::sqrt(5))/2 << '\\n';
     // special values
     std::cout << "sqrt(-0) = " << std::sqrt(-0.0) << '\\n';
     // error handling
     errno = 0; std::feclearexcept(FE_ALL_EXCEPT);
     std::cout << "sqrt(-1.0) = " << std::sqrt(-1) << '\\n';
     if(errno == EDOM)
         std::cout << "    errno = EDOM " << std::strerror(errno) << '\\n';
     if(std::fetestexcept(FE_INVALID))
         std::cout << "    FE_INVALID raised\\n";
 }

.SH Possible output:

 sqrt(100) = 10
 sqrt\fB(2)\fP = 1.41421
 golden ratio = 1.61803
 sqrt(-0) = -0
 sqrt(-1.0) = -nan
     errno = EDOM Numerical argument out of domain
     FE_INVALID raised

.SH See also

   pow                 raises a number to the given power (x^y)
                       \fI(function)\fP 
                       computes cubic root (
   cbrt                3
   \fI(C++11)\fP             √
                       x)
                       \fI(function)\fP 
                       computes square root of the sum of the squares of two given
                       numbers (
   hypot               √
   \fI(C++11)\fP             x2
                       +y2
                       )
                       \fI(function)\fP 
   sqrt(std::complex)  complex square root in the range of the right half-plane
                       \fI(function template)\fP 
   sqrt(std::valarray) applies the function std::sqrt to each element of valarray
                       \fI(function template)\fP 
   C documentation for
   sqrt
