.TH std::type_info::name 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::type_info::name \- std::type_info::name

.SH Synopsis
   const char* name() const;

   Returns an implementation defined null-terminated character string containing the
   name of the type. No guarantees are given; in particular, the returned string can be
   identical for several types and change between invocations of the same program.

.SH Parameters

   \fI(none)\fP

.SH Return value

   null-terminated character string containing the name of the type.

.SH Notes

   The lifetime of the array pointed to by the returned pointer is not specified, but
   in practice it persist as long as the RTTI data structure for the given type exists,
   which has application lifetime unless loaded from a dynamic library (that can be
   unloaded).

   Some implementations (such as MSVC, IBM, Oracle) produce a human-readable type name.
   Others, most notably gcc and clang, return the mangled name. The mangled name can be
   converted to human-readable form using implementation-specific API such as
   abi::__cxa_demangle directly or through boost::core::demangle. It can also be piped
   through the commandline utility c++filt -t.

.SH Example

   
// Run this code

 #include <iostream>
 #include <typeinfo>
  
 struct Base { virtual ~Base() = default; };
 struct Derived : Base {};
  
 int main() {
         Base b1;
         Derived d1;
  
         const Base *pb = &b1;
         std::cout << typeid(*pb).name() << '\\n';
         pb = &d1;
         std::cout << typeid(*pb).name() << '\\n';
 }

.SH Possible output:

 4Base
 7Derived

.SH See also

   hash_code returns a value which is identical for the same types
   \fI(C++11)\fP   \fI(public member function)\fP 
