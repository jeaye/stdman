.TH std::add_pointer 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::add_pointer \- std::add_pointer

.SH Synopsis
   Defined in header <type_traits>
   template< class T >              \fI(since C++11)\fP
   struct add_pointer;

   If T is a reference type, then provides the member typedef type which is a pointer
   to the referred type.

   Otherwise, if T names an object type, a function type
   that is not cv- or ref-qualified
   \fI(since C++17)\fP, or a (possibly cv-qualified) void type, provides the member typedef
   type which is the type T*.

   Otherwise (if T is a cv- or ref-qualified function type), provides the \fI(since C++17)\fP
   member typedef type which is the type T

.SH Member types

   Name Definition
   type pointer to T or to the type referenced by T

.SH Helper types

   template< class T >                                   \fI(since C++14)\fP
   using add_pointer_t = typename add_pointer<T>::type;

.SH Possible implementation

   namespace detail {
   template< class T, bool is_function_type = false >
   struct add_pointer {
       using type = typename std::remove_reference<T>::type*;
   };
    
   template< class T >
   struct add_pointer<T, true> {
       using type = T;
   };
    
   template< class T, class... Args >
   struct add_pointer<T(Args...), true> {
       using type = T(*)(Args...);
   };
    
   template< class T, class... Args >
   struct add_pointer<T(Args..., ...), true> {
       using type = T(*)(Args..., ...);
   };
    
   } // namespace detail
    
   template< class T >
   struct add_pointer : detail::add_pointer<T, std::is_function<T>::value> {};

.SH Example

   
// Run this code

 #include <iostream>
 #include <type_traits>
  
 int main()
 {
     int i = 123;
     int& ri = i;
     typedef std::add_pointer<decltype(i)>::type IntPtr;
     typedef std::add_pointer<decltype(ri)>::type IntPtr2;
     IntPtr pi = &i;
     std::cout << "i = " << i << "\\n";
     std::cout << "*pi = " << *pi << "\\n";
  
     static_assert(std::is_pointer<IntPtr>::value, "IntPtr should be a pointer");
     static_assert(std::is_same<IntPtr, int*>::value, "IntPtr should be a pointer to int");
     static_assert(std::is_same<IntPtr2, IntPtr>::value, "IntPtr2 should be equal to IntPtr");
  
     typedef std::remove_pointer<IntPtr>::type IntAgain;
     IntAgain j = i;
     std::cout << "j = " << j << "\\n";
  
     static_assert(!std::is_pointer<IntAgain>::value, "IntAgain should not be a pointer");
     static_assert(std::is_same<IntAgain, int>::value, "IntAgain should be equal to int");
 }

.SH Output:

 i = 123
 *pi = 123
 j = 123

.SH See also

   is_pointer     checks if a type is a pointer type
   \fI(C++11)\fP        \fI(class template)\fP 
   remove_pointer removes pointer from the given type
   \fI(C++11)\fP        \fI(class template)\fP 
