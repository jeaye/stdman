.TH std::cout,std::wcout 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::cout,std::wcout \- std::cout,std::wcout

.SH Synopsis
   Defined in header <iostream>
   extern std::ostream cout;    \fB(1)\fP
   extern std::wostream wcout;  \fB(2)\fP

   The global objects std::cout and std::wcout control output to a stream buffer of
   implementation-defined type (derived from std::streambuf), associated with the
   standard C output stream stdout.

   These objects are guaranteed to be initialized during or before the first time an
   object of type std::ios_base::Init is constructed and are available for use in the
   constructors and destructors of static objects with ordered initialization (as long
   as <iostream> is included before the object is defined).

   Unless sync_with_stdio(false) has been issued, it is safe to concurrently access
   these objects from multiple threads for both formatted and unformatted output.

   Once initialized, std::cout is tie()'d to std::cin and std::wcout is tie()'d to
   std::wcin, meaning that any input operation on std::cin executes std::cout.flush()
   (via std::basic_istream::sentry's constructor).

   Once initialized, std::cout is also tie()'d to std::cerr and std::wcout is tie()'d
   to std::wcerr, meaning that any output operation on std::cerr executes
   std::cout.flush() (via std::basic_ostream::sentry's constructor) \fI(since C++11)\fP

.SH Notes

   The 'c' in the name refers to "character" (stroustrup.com FAQ); cout means
   "character output" and wcout means "wide character output"

.SH Example

   
// Run this code

 #include <iostream>
 struct Foo {
     int n;
     Foo() {
        std::cout << "static constructor\\n";
     }
     ~Foo() {
        std::cout << "static destructor\\n";
     }
 };
 Foo f; // static object
 int main()
 {
     std::cout << "main function\\n";
 }

.SH Output:

 static constructor
 main function
 static destructor

.SH See also

   Init  initializes standard stream objects
         \fI(public member class of std::ios_base)\fP 
   cerr  writes to the standard C error stream stderr, unbuffered
   wcerr (global object) 
   clog  writes to the standard C error stream stderr
   wclog (global object) 
