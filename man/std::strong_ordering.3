.TH std::strong_ordering 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::strong_ordering \- std::strong_ordering

.SH Synopsis
   Defined in header <compare>
   class strong_ordering;       (since C++20)

   The class type std::strong_ordering is the result type of a three-way comparison
   that

     * admits all six relational operators (==, !=, <, <=, >, >=)

     * implies substitutability: if a is equivalent to b, f(a) is also equivalent to
       f(b), where f denotes a function that reads only comparison-salient state that
       is accessible via the argument's public const members. In other words,
       equivalent values are indistinguishable.
     * does not allow incomparable values: at least one of a < b, a == b, and a > b
       must be true

.SH Constants

   The type std::strong_ordering has four valid values, implemented as const static
   data members of its type:

   Member constant              Definition
   less(inline constexpr)       a valid value of the type std::strong_ordering
   \fB[static]\fP                     indicating less-than (ordered before) relationship
                                \fI(public static member constant)\fP
                                a valid value of the type std::strong_ordering
   equivalent(inline constexpr) indicating equivalence (neither ordered before nor
   \fB[static]\fP                     ordered after)
                                \fI(public static member constant)\fP
                                a valid value of the type std::strong_ordering
   equal(inline constexpr)      indicating equivalence (neither ordered before nor
   \fB[static]\fP                     ordered after)
                                \fI(public static member constant)\fP
   greater(inline constexpr)    a valid value of the type std::strong_ordering
   \fB[static]\fP                     indicating greater-than (ordered after) relationship
                                \fI(public static member constant)\fP

.SH Conversions

   std::strong_ordering is the strongest of the five comparison categories: it is not
   implicitly-convertible from any other category and is implicitly-convertible to the
   other four.

   operator strong_equality implicit conversion to std::strong_equality
                            \fI(public member function)\fP

std::strong_ordering::operator strong_equality

   constexpr operator strong_equality() const noexcept;

.SH Return value

   std::strong_equality::equal if v is equivalent or equal,
   std::strong_equality::nonequal if v is less or greater.

   operator weak_equality implicit conversion to std::weak_equality
                          \fI(public member function)\fP

std::strong_ordering::operator weak_equality

   constexpr operator weak_equality() const noexcept;

.SH Return value

   std::weak_equality::equivalent if v is equal or equivalent,
   std::weak_equality::nonequivalent if v is less or greater.

   operator partial_ordering implicit conversion to std::partial_ordering
                             \fI(public member function)\fP

std::strong_ordering::operator partial_ordering

   constexpr operator partial_ordering() const noexcept;

.SH Return value

   std::partial_ordering::less if v is less, std::partial_ordering::greater if v is
   greater, std::partial_ordering::equivalent if v is equal or equivalent.

   operator weak_ordering implicit conversion to std::weak_ordering
                          \fI(public member function)\fP

std::strong_ordering::operator weak_ordering

   constexpr operator weak_ordering() const noexcept;

.SH Return value

   std::weak_ordering::less if v is less, std::weak_ordering::greater if v is greater,
   std::weak_ordering::equivalent if v is equal or equivalent.

.SH Comparisons

   Comparison operators are defined between values of this type and literal zero. This
   supports the expressions a <=> b == 0 or a <=> b < 0 that can be used to convert the
   result of a three-way comparison operator to a boolean relationship; see std::is_eq,
   std::is_lt, etc

   operator==
   operator!=
   operator<  compares with zero
   operator>  \fI(function)\fP
   operator<=
   operator>=

operator==

   friend constexpr bool operator==(strong_ordering v, /*unspecified*/ u) noexcept;
   friend constexpr bool operator==(/*unspecified*/ u, strong_ordering v) noexcept;

.SH Parameters

   v - a std::strong_ordering value to check
   u - an unused parameter of any type that accepts literal zero argument

.SH Return value

   true if v is equivalent or equal, false if v is less or greater

operator!=

   friend constexpr bool operator!=(strong_ordering v, /*unspecified*/ u) noexcept;
   friend constexpr bool operator!=(/*unspecified*/ u, strong_ordering v) noexcept;

.SH Parameters

   v - a std::strong_ordering value to check
   u - an unused parameter of any type that accepts literal zero argument

.SH Return value

   true if v is less or greater, and false if v is equivalent or equal

operator<

   friend constexpr bool operator<(strong_ordering v, /*unspecified*/ u) noexcept;
   friend constexpr bool operator<(/*unspecified*/ u, strong_ordering v) noexcept;

.SH Parameters

   v - a std::strong_ordering value to check
   u - an unused parameter of any type that accepts literal zero argument

.SH Return value

   true if v is less, and false if v is greater, equivalent, or equal

operator<=

   friend constexpr bool operator<=(strong_ordering v, /*unspecified*/ u) noexcept;
   friend constexpr bool operator<=(/*unspecified*/ u, strong_ordering v) noexcept;

.SH Parameters

   v - a std::strong_ordering value to check
   u - an unused parameter of any type that accepts literal zero argument

.SH Return value

   true if v is less, equivalent, or equal, and false if v is greater

operator>

   friend constexpr bool operator>(strong_ordering v, /*unspecified*/ u) noexcept;
   friend constexpr bool operator>(/*unspecified*/ u, strong_ordering v) noexcept;

.SH Parameters

   v - a std::strong_ordering value to check
   u - an unused parameter of any type that accepts literal zero argument

.SH Return value

   true if v is greater, and false if v is less, equivalent, or equal

operator>=

   friend constexpr bool operator>=(strong_ordering v, /*unspecified*/ u) noexcept;
   friend constexpr bool operator>=(/*unspecified*/ u, strong_ordering v) noexcept;

.SH Parameters

   v - a std::strong_ordering value to check
   u - an unused parameter of any type that accepts literal zero argument

.SH Return value

   true if v is greater, equivalent, or equal, and false if v is less

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

   weak_ordering    the result type of 3-way comparison that supports all 6 operators
   (C++20)          and is not substitutable
                    \fI(class)\fP 
   partial_ordering the result type of 3-way comparison that supports all 6 operators,
   (C++20)          is not substitutable, and allows incomparable values
                    \fI(class)\fP 
   strong_equality  the result type of 3-way comparison that supports only
   (C++20)          equality/inequality and is substitutable
                    \fI(class)\fP 
   weak_equality    the result type of 3-way comparison that supports only
   (C++20)          equality/inequality and is not substitutable
                    \fI(class)\fP 

.SH Category:

     * Todo no example
