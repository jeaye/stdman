.TH std::erfc 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::erfc \- std::erfc

.SH Synopsis
   Defined in header <cmath>
   float       erfc( float arg );       \fB(1)\fP \fI(since C++11)\fP
   double      erfc( double arg );      \fB(2)\fP \fI(since C++11)\fP
   long double erfc( long double arg ); \fB(3)\fP \fI(since C++11)\fP
   double      erfc( Integral arg );    \fB(4)\fP \fI(since C++11)\fP

   1-3) Computes the complementary error function of arg, that is 1.0-erf(arg), but
   without loss of precision for large arg
   4) A set of overloads or a function template accepting an argument of any integral
   type. Equivalent to 2) (the argument is cast to double).

.SH Parameters

   arg - value of a floating-point or Integral type

.SH Return value

   If no errors occur, value of the complementary error function of arg, that is

   2
   √
   π

   ∫∞
   arge^-t2
   dt or 1-erf(arg), is returned.

   If a range error occurs due to underflow, the correct result (after rounding) is
   returned

.SH Error handling

   Errors are reported as specified in math_errhandling

   If the implementation supports IEEE floating-point arithmetic (IEC 60559),

     * If the argument is +∞, +0 is returned
     * If the argument is -∞, 2 is returned
     * If the argument is NaN, NaN is returned

.SH Notes

   For the IEEE-compatible type double, underflow is guaranteed if arg > 26.55.

.SH Example

   
// Run this code

 #include <iostream>
 #include <cmath>
 #include <iomanip>
 double normalCDF(double x) // Phi(-∞, x) aka N(x)
 {
     return std::erfc(-x/std::sqrt(2))/2;
 }
 int main()
 {
     std::cout << "normal cumulative distribution function:\\n"
               << std::fixed << std::setprecision(2);
     for(double n=0; n<1; n+=0.1)
         std::cout << "normalCDF(" << n << ") " << 100*normalCDF(n) << "%\\n";
  
     std::cout << "special values:\\n"
               << "erfc(-Inf) = " << std::erfc(-INFINITY) << '\\n'
               << "erfc(Inf) = " << std::erfc(INFINITY) << '\\n';
 }

.SH Output:

 normal cumulative distribution function:
 normalCDF(0.00) 50.00%
 normalCDF(0.10) 53.98%
 normalCDF(0.20) 57.93%
 normalCDF(0.30) 61.79%
 normalCDF(0.40) 65.54%
 normalCDF(0.50) 69.15%
 normalCDF(0.60) 72.57%
 normalCDF(0.70) 75.80%
 normalCDF(0.80) 78.81%
 normalCDF(0.90) 81.59%
 normalCDF(1.00) 84.13%
 special values:
 erfc(-Inf) = 2.00
 erfc(Inf) = 0.00

.SH See also

   erf     error function
   \fI(C++11)\fP \fI(function)\fP 
   C documentation for
   erfc

.SH External links

   Weisstein, Eric W. "Erfc." From MathWorld--A Wolfram Web Resource.
