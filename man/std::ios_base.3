.TH std::ios_base 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::ios_base \- std::ios_base

.SH Synopsis
   Defined in header <ios>
   class ios_base;

   The class ios_base is a multipurpose class that serves as the base class for all I/O
   stream classes. It maintains several kinds of data:

   1) state information: stream status flags
   2) control information: flags that control formatting of both input and output
   sequences and the imbued locale
   3) private storage: indexed extensible data structure that allows both long and
   void* members, which may be implemented as two arbitrary-length arrays or a single
   array of two-element structs or another container.
   4) callbacks: arbitrary number of user-defined functions to be called from imbue(),
   copyfmt(), and ~ios_base()

   Typical implementation holds member constants corresponding to all values of
   fmtflags, iostate, openmode, and seekdir shown below, member variables to maintain
   current precision, width, and formatting flags, the exception mask, the buffer error
   state, a resizeable container holding the callbacks, the currently imbued locale,
   the private storage, and a static integer variable for xalloc().

.SH Member functions

   constructor       constructs the object
                     \fI(protected member function)\fP 
   destructor        destructs the object
   \fB[virtual]\fP         \fI(virtual public member function)\fP 
.SH Formatting
   flags             manages format flags
                     \fI(public member function)\fP 
   setf              sets specific format flag
                     \fI(public member function)\fP 
   unsetf            clears specific format flag
                     \fI(public member function)\fP 
   precision         manages decimal precision of floating point operations
                     \fI(public member function)\fP 
   width             manages field width
                     \fI(public member function)\fP 
.SH Locales
   imbue             sets locale
                     \fI(public member function)\fP 
   getloc            returns current locale
                     \fI(public member function)\fP 
.SH Internal extensible array
   xalloc            returns a program-wide unique integer that is safe to use as index
   \fB[static]\fP          to pword() and iword()
                     \fI(public static member function)\fP 
                     resizes the private storage if necessary and access to the long
   iword             element at the given index
                     \fI(public member function)\fP 
                     resizes the private storage if necessary and access to the void*
   pword             element at the given index
                     \fI(public member function)\fP 
.SH Miscellaneous
   register_callback registers event callback function
                     \fI(public member function)\fP 
   sync_with_stdio   sets whether C++ and C IO libraries are interoperable
   \fB[static]\fP          \fI(public static member function)\fP 
.SH Member classes
   failure           stream exception
                     \fI(public member class)\fP 
   Init              initializes standard stream objects
                     \fI(public member class)\fP 

.SH Member types and constants
   Type           Explanation
                  stream open mode type

                  The following constants are also defined:

                  Constant Explanation
                  app      seek to the end of stream before each write
   openmode       binary   open in binary mode
                  in       open for reading
                  out      open for writing
                  trunc    discard the contents of the stream when opening
                  ate      seek to the end of stream immediately after open

                  \fI(typedef)\fP 
                  formatting flags type

                  The following constants are also defined:

                  Constant    Explanation
                  dec         use decimal base for integer I/O: see std::dec
                  oct         use octal base for integer I/O: see std::oct
                  hex         use hexadecimal base for integer I/O: see std::hex
                  basefield   dec|oct|hex|0. Useful for masking operations
                  left        left adjustment (adds fill characters to the right): see
                              std::left 
                  right       right adjustment (adds fill characters to the left): see
                              std::right 
                  internal    internal adjustment (adds fill characters to the internal
                              designated point): see std::internal 
                  adjustfield left|right|internal. Useful for masking operations 
                              generate floating point types using scientific notation,
                  scientific  or hex notation if combined with fixed: see
                              std::scientific 
                              generate floating point types using fixed notation, or
   fmtflags       fixed       hex notation if combined with scientific: see std::fixed
                              
                  floatfield  scientific|fixed|(scientific|fixed)|0. Useful for masking
                              operations 
                  boolalpha   insert and extract bool type in alphanumeric format: see
                              std::boolalpha 
                              generate a prefix indicating the numeric base for integer
                  showbase    output, require the currency indicator in monetary I/O:
                              see std::showbase 
                  showpoint   generate a decimal-point character unconditionally for
                              floating-point number output: see std::showpoint 
                  showpos     generate a + character for non-negative numeric output:
                              see std::showpos 
                  skipws      skip leading whitespace before certain input operations:
                              see std::skipws 
                  unitbuf     flush the output after each output operation: see
                              std::unitbuf 
                              replace certain lowercase letters with their uppercase
                  uppercase   equivalents in certain output operations: see
                              std::uppercase 

                  \fI(typedef)\fP 
                  state of the stream type

                  The following constants are also defined:

                  Constant Explanation
   iostate        goodbit  no error 
                  badbit   irrecoverable stream error 
                  failbit  input/output operation failed (formatting or extraction
                           error) 
                  eofbit   associated input sequence has reached end-of-file 

                  \fI(typedef)\fP 
                  seeking direction type

                  The following constants are also defined:

   seekdir        Constant Explanation
                  beg      the beginning of a stream 
                  end      the ending of a stream 
                  cur      the current position of stream position indicator 

                  \fI(typedef)\fP 
   event          specifies event type
                  \fI(enum)\fP 
   event_callback callback function type
                  \fI(typedef)\fP 

.SH Deprecated member types
   Type                  Explanation
   io_state\fB(deprecated)\fP  integer type that may be used like iostate
   open_mode\fB(deprecated)\fP integer type that may be used like openmode
   seek_dir\fB(deprecated)\fP  integer type that may be used like seekdir       \fI(until C++17)\fP
   streamoff\fB(deprecated)\fP unspecified type that may be used like off_type,
                         not necessarily std::streamoff
   streampos\fB(deprecated)\fP unspecified type that may be used like pos_type,
                         not necessarily std::streampos
