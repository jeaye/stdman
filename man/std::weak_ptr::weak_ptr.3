.TH std::weak_ptr::weak_ptr 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::weak_ptr::weak_ptr \- std::weak_ptr::weak_ptr

.SH Synopsis
   constexpr weak_ptr() noexcept;                    \fB(1)\fP \fI(since C++11)\fP
   weak_ptr( const weak_ptr& r ) noexcept;           \fB(2)\fP \fI(since C++11)\fP
   template< class Y >                               \fB(2)\fP \fI(since C++11)\fP
   weak_ptr( const weak_ptr<Y>& r ) noexcept;
   template< class Y >                               \fB(2)\fP \fI(since C++11)\fP
   weak_ptr( const std::shared_ptr<Y>& r ) noexcept;
   weak_ptr( weak_ptr&& r ) noexcept;                \fB(3)\fP \fI(since C++14)\fP
   template< class Y >                               \fB(3)\fP \fI(since C++14)\fP
   weak_ptr( weak_ptr<Y>&& r ) noexcept;

   Constructs new weak_ptr that potentially shares an object with r.

   1) Default constructor. Constructs empty weak_ptr.
   2) Constructs new weak_ptr which shares an object managed by r. If r manages no
   object, *this manages no object too. The templated overloads don't participate in
   the overload resolution unless Y* is implicitly convertible to T*
   , or Y is the type "array of N U" for some type U and some number N, and T is the
   type "array of unknown bound of (possibly cv-qualified) U".
   \fI(since C++17)\fP
   3) Move constructors. Moves a weak_ptr instance from r into *this. After this, r is
   empty and r.use_count()==0. The templated overload doesn't participate in the
   overload resolution unless Y* is implicitly convertible to T*

.SH Parameters

   r - a std::shared_ptr or std::weak_ptr that will be viewed by this std::weak_ptr

.SH Notes

   Because the default constructor is constexpr, static weak_ptrs are initialized as
   part of static non-local initialization, before any dynamic non-local initialization
   begins. This makes it safe to use a weak_ptr in a constructor of any static object.

.SH Example

   
// Run this code

 #include <memory>
 #include <iostream>
  
 struct Foo {};
  
 int main()
 {
    std::weak_ptr<Foo> w_ptr;
  
    {
       auto ptr = std::make_shared<Foo>();
       w_ptr = ptr;
       std::cout << "w_ptr.use_count() inside scope: " << w_ptr.use_count() << '\\n';
    }
  
    std::cout << "w_ptr.use_count() out of scope: " << w_ptr.use_count() << '\\n';
    std::cout << "w_ptr.expired() out of scope: " << std::boolalpha << w_ptr.expired() << '\\n';
 }

.SH Output:

 w_ptr.use_count() inside scope: 1
 w_ptr.use_count() out of scope: 0
 w_ptr.expired() out of scope: true

.SH See also

   operator= assigns the weak_ptr
             \fI(public member function)\fP 
