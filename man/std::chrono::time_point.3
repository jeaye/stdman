.TH std::chrono::time_point 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::chrono::time_point \- std::chrono::time_point

.SH Synopsis
   Defined in header <chrono>
   template<

       class Clock,                               \fI(since C++11)\fP
       class Duration = typename Clock::duration

   > class time_point;

   Class template std::chrono::time_point represents a point in time. It is implemented
   as if it stores a value of type Duration indicating the time interval from the start
   of the Clock's epoch.

.SH Member types

   Member type Definition
   clock       Clock, the clock on which this time point is measured
   duration    Duration, a std::chrono::duration type used to measure the time since
               epoch
   rep         Rep, an arithmetic type representing the number of ticks of the duration
   period      Period, a std::ratio type representing the tick period of the duration

.SH Member functions

   constructor      constructs a new time point
                    \fI(public member function)\fP 
   time_since_epoch returns the time point as duration since the start of its clock
                    \fI(public member function)\fP 
   operator+=       modifies the time point by the given duration
   operator-=       \fI(public member function)\fP 
   min              returns the time point corresponding to the smallest duration
   \fB[static]\fP         \fI(public static member function)\fP 
   max              returns the time point corresponding to the largest duration
   \fB[static]\fP         \fI(public static member function)\fP 

.SH Non-member functions

   std::common_type<std::chrono::time_point> specializes the std::common_type trait
                                             \fI(class template specialization)\fP 
   operator+                                 performs add and subtract operations
   operator-                                 involving a time point
                                             \fI(function template)\fP 
   operator==
   operator!=
   operator<                                 compares two time points
   operator<=                                \fI(function template)\fP 
   operator>
   operator>=
                                             converts a time point to another time
   time_point_cast                           point on the same clock, with a different
                                             duration
                                             \fI(function template)\fP 
   floor(std::chrono::time_point)            converts a time_point to another, rounding
   \fI(C++17)\fP                                   down
                                             \fI(function template)\fP 
   ceil(std::chrono::time_point)             converts a time_point to another, rounding
   \fI(C++17)\fP                                   up
                                             \fI(function template)\fP 
   round(std::chrono::time_point)            converts a time_point to another, rounding
   \fI(C++17)\fP                                   to nearest, ties to even
                                             \fI(function template)\fP 

.SH Example

   
// Run this code

 #include <iostream>
 #include <iomanip>
 #include <ctime>
 #include <chrono>
  
 int main()
 {
     std::chrono::system_clock::time_point now = std::chrono::system_clock::now();
     std::time_t now_c = std::chrono::system_clock::to_time_t(now - std::chrono::hours(24));
     std::cout << "24 hours ago, the time was "
               << std::put_time(std::localtime(&now_c), "%F %T") << '\\n';
  
     std::chrono::steady_clock::time_point start = std::chrono::steady_clock::now();
     std::cout << "Hello World\\n";
     std::chrono::steady_clock::time_point end = std::chrono::steady_clock::now();
     std::cout << "Printing took "
               << std::chrono::duration_cast<std::chrono::microseconds>(end - start).count()
               << "us.\\n";
 }

.SH Possible output:

 24 hours ago, the time was 2011-10-25 12:00:08
 Hello World
 Printing took 84us.

.SH See also

   duration a time interval
   \fI(C++11)\fP  \fI(class template)\fP
