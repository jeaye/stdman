.TH std::basic_osyncstream 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::basic_osyncstream \- std::basic_osyncstream

.SH Synopsis
   Defined in header <syncstream>
   template<

       class CharT,
       class Traits = std::char_traits<CharT>,                          (since C++20)
       class Allocator = std::allocator<CharT>

   > class basic_osyncstream: public std::basic_ostream<CharT, Traits>

   The class template std::basic_osyncstream is a convenience wrapper for
   std::basic_syncbuf. It provides a mechanism to synchronize threads writing to the
   same stream.

   It can be used with a named variable:

 {
   std::osyncstream bout(std::cout); // synchronized wrapper for std::cout
   bout << "Hello, ";
   bout << "World!";
   bout << std::endl; // flush is noted, but not yet performed
   bout << "and more!\\n";
 } // characters are transferred and std::cout is flushed

   as well as with a temporary:

 std::osyncstream(std::cout) << "Hello, " << "World!" << ’\\n’;

   It provides the guarantee that all output made to the same final destination buffer
   (std::cout in the examples above) will be free of data races and will not be
   interleaved or garbled in any way, as long as every write to the that final
   destination buffer is made through (possibly different) instances of
   std::basic_osyncstream.

   Typical implementation of std::basic_osyncstream holds only one member: the wrapped
   std::basic_syncbuf

   Two specializations for common character types are also defined:

   Defined in header <syncstream>
   Type         Definition
   osyncstream  basic_osyncstream<char>
   wosyncstream basic_osyncstream<wchar_t>

.SH Member types

   Member type    Definition
   char_type      CharT
   traits_type    Traits
   int_type       Traits::int_type
   pos_type       Traits::pos_type
   off_type       Traits::off_type
   allocator_type Allocator
   streambuf_type std::basic_streambuf<CharT, Traits>
   syncbuf_type   std::basic_syncbuf<CharT, Traits, Allocator>

.SH Member functions

   constructor   constructs a basic_osyncstream
                 \fI(public member function)\fP 
   operator=     assigns a basic_osyncstream
                 \fI(public member function)\fP 
   destructor    destroys the basic_osyncstream and emits its internal buffer
                 \fI(public member function)\fP 
   rdbuf         obtains a pointer to the underlying basic_syncbuf
                 \fI(public member function)\fP 
   get_wrapped   obtains a pointer to the final destination stream buffer
                 \fI(public member function)\fP 
                 calls emit on the underlying basic_syncbuf to transmit its internal
   emit          data to the final destination
                 \fI(public member function)\fP 

Inherited from std::basic_ostream

.SH Member functions

.SH Formatted input
   operator<< inserts formatted data
              \fI(public member function of std::basic_ostream)\fP 
.SH Unformatted input
   put        inserts a character
              \fI(public member function of std::basic_ostream)\fP 
   write      inserts blocks of characters
              \fI(public member function of std::basic_ostream)\fP 
.SH Positioning
   tellp      returns the output position indicator
              \fI(public member function of std::basic_ostream)\fP 
   seekp      sets the output position indicator
              \fI(public member function of std::basic_ostream)\fP 
.SH Miscellaneous
   flush      synchronizes with the underlying storage device
              \fI(public member function of std::basic_ostream)\fP 

.SH Member classes

   sentry implements basic logic for preparation of the stream for output operations
          \fI(public member class of std::basic_ostream)\fP 

Inherited from std::basic_ios

.SH Member types

   Member type Definition
   char_type   CharT
   traits_type Traits
   int_type    Traits::int_type
   pos_type    Traits::pos_type
   off_type    Traits::off_type

.SH Member functions

.SH State functions
   good           checks if no error has occurred i.e. I/O operations are available
                  \fI(public member function of std::basic_ios)\fP 
   eof            checks if end-of-file has been reached
                  \fI(public member function of std::basic_ios)\fP 
   fail           checks if an error has occurred
                  \fI(public member function of std::basic_ios)\fP 
   bad            checks if a non-recoverable error has occurred
                  \fI(public member function of std::basic_ios)\fP 
   operator!      checks if an error has occurred (synonym of fail())
                  \fI(public member function of std::basic_ios)\fP 
   operator void*
   operator bool  checks if no error has occurred (synonym of !fail())
   \fI(until C++11)\fP  \fI(public member function of std::basic_ios)\fP 
   \fI(since C++11)\fP
   rdstate        returns state flags
                  \fI(public member function of std::basic_ios)\fP 
   setstate       sets state flags
                  \fI(public member function of std::basic_ios)\fP 
   clear          modifies state flags
                  \fI(public member function of std::basic_ios)\fP 
.SH Formatting
   copyfmt        copies formatting information
                  \fI(public member function of std::basic_ios)\fP 
   fill           manages the fill character
                  \fI(public member function of std::basic_ios)\fP 
.SH Miscellaneous
   exceptions     manages exception mask
                  \fI(public member function of std::basic_ios)\fP 
   imbue          sets the locale
                  \fI(public member function of std::basic_ios)\fP 
   rdbuf          manages associated stream buffer
                  \fI(public member function of std::basic_ios)\fP 
   tie            manages tied stream
                  \fI(public member function of std::basic_ios)\fP 
   narrow         narrows characters
                  \fI(public member function of std::basic_ios)\fP 
   widen          widens characters
                  \fI(public member function of std::basic_ios)\fP 

Inherited from std::ios_base

.SH Member functions

.SH Formatting
   flags             manages format flags
                     \fI(public member function of std::ios_base)\fP 
   setf              sets specific format flag
                     \fI(public member function of std::ios_base)\fP 
   unsetf            clears specific format flag
                     \fI(public member function of std::ios_base)\fP 
   precision         manages decimal precision of floating point operations
                     \fI(public member function of std::ios_base)\fP 
   width             manages field width
                     \fI(public member function of std::ios_base)\fP 
.SH Locales
   imbue             sets locale
                     \fI(public member function of std::ios_base)\fP 
   getloc            returns current locale
                     \fI(public member function of std::ios_base)\fP 
.SH Internal extensible array
   xalloc            returns a program-wide unique integer that is safe to use as index
   \fB[static]\fP          to pword() and iword()
                     \fI(public static member function of std::ios_base)\fP 
                     resizes the private storage if necessary and access to the long
   iword             element at the given index
                     \fI(public member function of std::ios_base)\fP 
                     resizes the private storage if necessary and access to the void*
   pword             element at the given index
                     \fI(public member function of std::ios_base)\fP 
.SH Miscellaneous
   register_callback registers event callback function
                     \fI(public member function of std::ios_base)\fP 
   sync_with_stdio   sets whether C++ and C IO libraries are interoperable
   \fB[static]\fP          \fI(public static member function of std::ios_base)\fP 
.SH Member classes
   failure           stream exception
                     \fI(public member class of std::ios_base)\fP 
   Init              initializes standard stream objects
                     \fI(public member class of std::ios_base)\fP 

.SH Member types and constants
   Type           Explanation
                  stream open mode type

                  The following constants are also defined:

                  Constant Explanation
                  app      seek to the end of stream before each write
   openmode       binary   open in binary mode
                  in       open for reading
                  out      open for writing
                  trunc    discard the contents of the stream when opening
                  ate      seek to the end of stream immediately after open

                  \fI(typedef)\fP 
                  formatting flags type

                  The following constants are also defined:

                  Constant    Explanation
                  dec         use decimal base for integer I/O: see std::dec
                  oct         use octal base for integer I/O: see std::oct
                  hex         use hexadecimal base for integer I/O: see std::hex
                  basefield   dec|oct|hex|0. Useful for masking operations
                  left        left adjustment (adds fill characters to the right): see
                              std::left 
                  right       right adjustment (adds fill characters to the left): see
                              std::right 
                  internal    internal adjustment (adds fill characters to the internal
                              designated point): see std::internal 
                  adjustfield left|right|internal. Useful for masking operations 
                              generate floating point types using scientific notation,
                  scientific  or hex notation if combined with fixed: see
                              std::scientific 
                              generate floating point types using fixed notation, or
   fmtflags       fixed       hex notation if combined with scientific: see std::fixed
                              
                  floatfield  scientific|fixed|(scientific|fixed)|0. Useful for masking
                              operations 
                  boolalpha   insert and extract bool type in alphanumeric format: see
                              std::boolalpha 
                              generate a prefix indicating the numeric base for integer
                  showbase    output, require the currency indicator in monetary I/O:
                              see std::showbase 
                  showpoint   generate a decimal-point character unconditionally for
                              floating-point number output: see std::showpoint 
                  showpos     generate a + character for non-negative numeric output:
                              see std::showpos 
                  skipws      skip leading whitespace before certain input operations:
                              see std::skipws 
                  unitbuf     flush the output after each output operation: see
                              std::unitbuf 
                              replace certain lowercase letters with their uppercase
                  uppercase   equivalents in certain output operations: see
                              std::uppercase 

                  \fI(typedef)\fP 
                  state of the stream type

                  The following constants are also defined:

                  Constant Explanation
   iostate        goodbit  no error 
                  badbit   irrecoverable stream error 
                  failbit  input/output operation failed (formatting or extraction
                           error) 
                  eofbit   associated input sequence has reached end-of-file 

                  \fI(typedef)\fP 
                  seeking direction type

                  The following constants are also defined:

   seekdir        Constant Explanation
                  beg      the beginning of a stream 
                  end      the ending of a stream 
                  cur      the current position of stream position indicator 

                  \fI(typedef)\fP 
   event          specifies event type
                  \fI(enum)\fP 
   event_callback callback function type
                  \fI(typedef)\fP 
