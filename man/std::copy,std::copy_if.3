.TH std::copy,std::copy_if 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::copy,std::copy_if \- std::copy,std::copy_if

.SH Synopsis
   Defined in header <algorithm>
   template< class InputIt, class OutputIt >
   OutputIt copy( InputIt first, InputIt last,              \fI(until C++20)\fP
   OutputIt d_first );
   template< class InputIt, class OutputIt >
   constexpr OutputIt copy( InputIt first, InputIt          \fI(since C++20)\fP
   last, OutputIt d_first );
   template< class ExecutionPolicy, class
   ForwardIt1, class ForwardIt2 >
   ForwardIt2 copy( ExecutionPolicy&& policy,           \fB(2)\fP \fI(since C++17)\fP
   ForwardIt1 first, ForwardIt1 last, ForwardIt2
   d_first );
   template< class InputIt, class OutputIt, class
   UnaryPredicate >
                                                                          \fI(since C++11)\fP
   OutputIt copy_if( InputIt first, InputIt last,                         \fI(until C++20)\fP
                     OutputIt d_first,

                     UnaryPredicate pred );         \fB(1)\fP
   template< class InputIt, class OutputIt, class
   UnaryPredicate >

   constexpr OutputIt copy_if( InputIt first,
   InputIt last,                                                          \fI(since C++20)\fP
                               OutputIt d_first,        \fB(3)\fP

                               UnaryPredicate pred
   );
   template< class ExecutionPolicy, class
   ForwardIt1, class ForwardIt2, class
   UnaryPredicate >

   ForwardIt2 copy_if( ExecutionPolicy&& policy,            \fB(4)\fP           \fI(since C++17)\fP
   ForwardIt1 first, ForwardIt1 last,
                     ForwardIt2 d_first,

                     UnaryPredicate pred );

   Copies the elements in the range, defined by [first, last), to another range
   beginning at d_first.

   1) Copies all elements in the range [first, last). The behavior is undefined if
   d_first is within the range [first, last). In this case, std::copy_backward may be
   used instead.
   3) Only copies the elements for which the predicate pred returns true. The relative
   order of the elements that are copied is preserved. The behavior is undefined if the
   source and the destination ranges overlap.
   2,4) Same as (1,3), but executed according to policy. This overload only
   participates in overload resolution if
   std::is_execution_policy_v<std::decay_t<ExecutionPolicy>> is true

.SH Parameters

   first, last - the range of elements to copy
   d_first     - the beginning of the destination range.
   policy      - the execution policy to use. See execution policy for details.
                 unary predicate which returns true for the required elements.

                 The signature of the predicate function should be equivalent to the
                 following:

   pred        -  bool pred(const Type &a);

                 The signature does not need to have const &, but the function must not
                 modify the objects passed to it.
                 The type Type must be such that an object of type InputIt can be
                 dereferenced and then implicitly converted to Type. 
.SH Type requirements
   -
   InputIt must meet the requirements of InputIterator.
   -
   OutputIt must meet the requirements of OutputIterator.
   -
   ForwardIt1, ForwardIt2 must meet the requirements of ForwardIterator.
   -
   UnaryPredicate must meet the requirements of Predicate.

.SH Return value

   Output iterator to the element in the destination range, one past the last element
   copied.

.SH Complexity

     * 1-2) Exactly (last - first) assignments

     * 3-4) Exactly (last - first) applications of the predicate, between 0 and (last
       - first) assignments (assignment for every element for which predicate is equal
       to true, dependent on predicate and input data)

   For the overloads with an ExecutionPolicy, there may be a performance cost if
   ForwardIt1's value_type is not MoveConstructible.

.SH Exceptions

   The overloads with a template parameter named ExecutionPolicy report errors as
   follows:

     * If execution of a function invoked as part of the algorithm throws an exception
       and ExecutionPolicy is one of the three standard policies, std::terminate is
       called. For any other ExecutionPolicy, the behavior is implementation-defined.
     * If the algorithm fails to allocate memory, std::bad_alloc is thrown.

.SH Notes

   In practice, implementations of std::copy avoid multiple assignments and use bulk
   copy functions such as std::memmove if the value type is TriviallyCopyable

   When copying overlapping ranges, std::copy is appropriate when copying to the left
   (beginning of the destination range is outside the source range) while
   std::copy_backward is appropriate when copying to the right (end of the destination
   range is outside the source range).

.SH Possible implementation

.SH First version
   template<class InputIt, class OutputIt>
   OutputIt copy(InputIt first, InputIt last,
                 OutputIt d_first)
   {
       while (first != last) {
           *d_first++ = *first++;
       }
       return d_first;
   }
.SH Second version
   template<class InputIt, class OutputIt, class UnaryPredicate>
   OutputIt copy_if(InputIt first, InputIt last,
                    OutputIt d_first, UnaryPredicate pred)
   {
       while (first != last) {
           if (pred(*first))
               *d_first++ = *first;
           first++;
       }
       return d_first;
   }

.SH Example

   The following code uses copy to both copy the contents of one vector to another and
   to display the resulting vector:

   
// Run this code

 #include <algorithm>
 #include <iostream>
 #include <vector>
 #include <iterator>
 #include <numeric>
  
 int main()
 {
     std::vector<int> from_vector(10);
     std::iota(from_vector.begin(), from_vector.end(), 0);
  
     std::vector<int> to_vector;
     std::copy(from_vector.begin(), from_vector.end(),
               std::back_inserter(to_vector));
 // or, alternatively,
 //  std::vector<int> to_vector(from_vector.size());
 //  std::copy(from_vector.begin(), from_vector.end(), to_vector.begin());
 // either way is equivalent to
 //  std::vector<int> to_vector = from_vector;
  
     std::cout << "to_vector contains: ";
  
     std::copy(to_vector.begin(), to_vector.end(),
               std::ostream_iterator<int>(std::cout, " "));
     std::cout << '\\n';
 }

.SH Output:

 to_vector contains: 0 1 2 3 4 5 6 7 8 9

.SH See also

   copy_backward  copies a range of elements in backwards order
                  \fI(function template)\fP 
   reverse_copy   creates a copy of a range that is reversed
                  \fI(function template)\fP 
   copy_n         copies a number of elements to a new location
   \fI(C++11)\fP        \fI(function template)\fP 
   fill           copy-assigns the given value to every element in a range
                  \fI(function template)\fP 
   remove_copy    copies a range of elements omitting those that satisfy specific
   remove_copy_if criteria
                  \fI(function template)\fP 
