.TH std::basic_string::operator[] 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::basic_string::operator[] \- std::basic_string::operator[]

.SH Synopsis
   reference       operator[]( size_type pos );       \fB(1)\fP
   const_reference operator[]( size_type pos ) const; \fB(2)\fP

   Returns a reference to the character at specified location pos. No bounds checking
   is performed. If pos > size(), the behavior is undefined.

   1) If pos == size(), the behavior is undefined.
   2) If pos == size(), a reference to the character with value CharT()   \fI(until C++11)\fP
   (the null character) is returned.
   If pos == size(), a reference to the character with value CharT() (the
   null character) is returned.
                                                                          \fI(since C++11)\fP
   For the first (non-const) version, the behavior is undefined if this
   character is modified to any value other than CharT() .

.SH Parameters

   pos - position of the character to return

.SH Return value

   Reference to the requested character.

.SH Complexity

   Constant.

.SH Example

   
// Run this code

 #include <iostream>
 #include <string>
  
 int main()
 {
     std::string const e("Exemplar");
     for (unsigned i = e.length() - 1; i != 0; i /= 2)
         std::cout << e[i];
     std::cout << '\\n';
  
     const char* c = &e[0];
     std::cout << c << '\\n'; // print as a C string
  
     //Change the last character of s into a 'y'
     std::string s("Exemplar ");
     s[s.size()-1] = 'y';
     std::cout << s << '\\n';
 }

.SH Output:

 rmx
 Exemplar
 Exemplary

.SH See also

   at accesses the specified character with bounds checking
      \fI(public member function)\fP 

   Hidden category:

     * Pages with unreviewed LWG DR marker
