.TH std::experimental::ranges::Same 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::experimental::ranges::Same \- std::experimental::ranges::Same

.SH Synopsis
   Defined in header <experimental/ranges/concepts>
   template < class T, class U >                                (ranges TS)
   concept bool Same = std::is_same<T, U>::value; // see below

   The concept Same<T, U> is satisfied if and only if T and U denote the same type.

   Despite being specified using it, there need not be any subsumption relationship
   between Same<T, U> and std::is_same<T, U>::value.

   For the purposes of constraint checking, Same<T, U> implies Same<U, T>.

.SH Notes

   The additional requirement on constraint checking differentiates Same from
   std::is_same, and will typically require a compiler intrinsic to implement.

.SH See also

   is_same checks if two types are the same
   \fI(C++11)\fP \fI(class template)\fP 
