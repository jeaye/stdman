.TH std::wstring_convert::converted 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::wstring_convert::converted \- std::wstring_convert::converted

.SH Synopsis
   Defined in header <locale>
   std::size_t converted() const;

   Returns the number of source characters that were processed by the most recent
   from_bytes() or to_bytes().

.SH Return value

   The number of characters consumed by the most recent conversion operation.

.SH Exceptions

   \fI(none)\fP                    \fI(until C++14)\fP
   noexcept specification:  
   noexcept                  \fI(since C++14)\fP
     

.SH Example

   
// Run this code

 #include <iostream>
 #include <string>
 #include <locale>
 #include <codecvt>
 int main()
 {
     std::string utf8 =  u8"z\\u00df\\u6c34\\U0001d10b"; // or u8"z√üÊ∞¥ùÑã"
                         // or "\\x7a\\xc3\\x9f\\xe6\\xb0\\xb4\\xf0\\x9d\\x84\\x8b";
     std::cout << "original UTF-8 string size: " << utf8.size() << '\\n';
  
     // the UTF-8 - UTF-32 standard conversion facet
     std::wstring_convert<std::codecvt_utf8<char32_t>, char32_t> cvt;
  
     // UTF-8 to UTF-32
     std::u32string utf32 = cvt.from_bytes(utf8);
     std::cout << "UTF-32 string size: " << utf32.size() << '\\n';
     std::cout << "converted() == " << cvt.converted() << '\\n';
     // UTF-32 to UTF-8
     utf8 = cvt.to_bytes(utf32);
     std::cout << "new UTF-8 string size: " << utf8.size() << '\\n';
     std::cout << "converted() == " << cvt.converted() << '\\n';
 }

.SH Output:

 original UTF-8 string size: 10
 UTF-32 string size: 4
 converted() == 10
 new UTF-8 string size: 10
 converted() == 4

.SH See also

   to_bytes   converts a wide string into a byte string
              \fI(public member function)\fP 
   from_bytes converts a byte string into a wide string
              \fI(public member function)\fP 

.SH Category:

     * unconditionally noexcept

   Hidden categories:

     * Pages with unreviewed unconditional noexcept template
     * Pages with unreviewed noexcept template
