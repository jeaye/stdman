.TH std::atomic::operator+=,-=,&=,|=,^= 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::atomic::operator+=,-=,&=,|=,^= \- std::atomic::operator+=,-=,&=,|=,^=

.SH Synopsis
   member only of atomic<Integral>\fI(C++11)\fP and
   atomic<Floating>(C++20) template specializations
   T operator+=( T arg ) noexcept;
   T operator+=( T arg ) volatile noexcept;
   member only of atomic<T*> template specialization
   T* operator+=( std::ptrdiff_t arg ) noexcept;
   T* operator+=( std::ptrdiff_t arg ) volatile noexcept;
   member only of atomic<Integral>\fI(C++11)\fP and
   atomic<Floating>(C++20) template specializations
   T operator-=( T arg ) noexcept;
   T operator-=( T arg ) volatile noexcept;
   member only of atomic<T*> template specialization      \fB(1)\fP
   T* operator-=( std::ptrdiff_t arg ) noexcept;
   T* operator-=( std::ptrdiff_t arg ) volatile noexcept;     \fB(1)\fP
   member only of atomic<Integral> template
   specialization                                                 \fB(2)\fP
   T operator&=( T arg ) noexcept;                                    \fB(2)\fP
   T operator&=( T arg ) volatile noexcept;
   T operator|=( T arg ) noexcept;                                        \fB(3)\fP
   T operator|=( T arg ) volatile noexcept;                                   \fB(4)\fP
   T operator^=( T arg ) noexcept;                                                \fB(5)\fP
   T operator^=( T arg ) volatile noexcept;

   Atomically replaces the current value with the result of computation involving the
   previous value and arg. The operation is read-modify-write operation.

   1) Performs atomic addition. Equivalent to fetch_add(arg) + arg.
   2) Performs atomic subtraction. Equivalent to fetch_sub(arg) - arg.
   3) Performs atomic bitwise and. Equivalent to fetch_and(arg) & arg.
   4) Performs atomic bitwise or. Equivalent to fetch_or(arg) | arg.
   5) Performs atomic bitwise exclusive or. Equivalent to fetch_xor(arg) ^ arg.

   For signed Integral types, arithmetic is defined to use twoâ€™s complement
   representation. There are no undefined results.

   For floating-point types, the floating-point environment in effect may
   be different from the calling thread's floating-point environment. The
   operation need not be conform to the corresponding std::numeric_limits (since C++20)
   traits but is encouraged to do so. If the result is not a
   representable value for its type, the result is unspecified but the
   operation otherwise has no undefined behavior.

   For T* types, the result may be an undefined address, but the operations otherwise
   have no undefined behavior. The program is ill-formed if T is not an object type.

.SH Parameters

   arg - the argument for the arithmetic operation

.SH Return value

   The resulting value (that is, the result of applying the corresponding binary
   operator to the value immediately preceding the effects of the corresponding member
   function in the modification order of *this).

.SH Notes

   Unlike most compound assignment operators, the compound assignment operators for
   atomic types do not return a reference to their left-hand arguments. They return a
   copy of the stored value instead.

   Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

     DR    Applied to              Behavior as published               Correct behavior
   P0558R1 C++11      arithmetic permitted on pointers to cv void or   made ill-formed
                      function

.SH See also

   operator++
   operator++(int) increments or decrements the atomic value by one
   operator--      \fI(public member function)\fP 
   operator--(int)
