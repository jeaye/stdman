.TH std::numeric_limits::epsilon 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::numeric_limits::epsilon \- std::numeric_limits::epsilon

.SH Synopsis
   static T epsilon();            \fI(until C++11)\fP
   static constexpr T epsilon();  \fI(since C++11)\fP

   Returns the machine epsilon, that is, the difference between 1.0 and the next value
   representable by the floating-point type T. It is only meaningful if
   std::numeric_limits<T>::is_integer == false.

.SH Return value

   T                     std::numeric_limits<T>::epsilon()
   /* non-specialized */ T();
   bool                  false
   char                  0
   signed char           0
   unsigned char         0
   wchar_t               0
   char16_t              0
   char32_t              0
   short                 0
   unsigned short        0
   int                   0
   unsigned int          0
   long                  0
   unsigned long         0
   long long             0
   unsigned long long    0
   float                 FLT_EPSILON
   double                DBL_EPSILON
   long double           LDBL_EPSILON

.SH Exceptions

   \fI(none)\fP                    \fI(until C++11)\fP
   noexcept specification:  
   noexcept                  \fI(since C++11)\fP
     

.SH Example

   Demonstrates the use of machine epsilon to compare floating-point values for
   equality

   
// Run this code

 #include <cmath>
 #include <limits>
 #include <iomanip>
 #include <iostream>
 #include <type_traits>
 #include <algorithm>
  
 template<class T>
 typename std::enable_if<!std::numeric_limits<T>::is_integer, bool>::type
     almost_equal(T x, T y, int ulp)
 {
     // the machine epsilon has to be scaled to the magnitude of the values used
     // and multiplied by the desired precision in ULPs (units in the last place)
     return std::abs(x-y) <= std::numeric_limits<T>::epsilon() * std::abs(x+y) * ulp
     // unless the result is subnormal
            || std::abs(x-y) < std::numeric_limits<T>::min();
 }
 int main()
 {
     double d1 = 0.2;
     double d2 = 1 / std::sqrt(5) / std::sqrt(5);
  
     if(d1 == d2)
             std::cout << "d1 == d2\\n";
     else
             std::cout << "d1 != d2\\n";
  
     if(almost_equal(d1, d2, 2))
             std::cout << "d1 almost equals d2\\n";
     else
             std::cout << "d1 does not almost equal d2\\n";
 }

.SH Output:

 d1 != d2
 d1 almost equals d2

.SH See also

   nextafter
   nexttoward next representable floating point value towards the given value
   \fI(C++11)\fP    \fI(function)\fP 
   \fI(C++11)\fP

.SH Category:

     * unconditionally noexcept

   Hidden categories:

     * Pages with unreviewed unconditional noexcept template
     * Pages with unreviewed noexcept template
