.TH std::is_error_code_enum<std::io_errc> 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_error_code_enum<std::io_errc> \- std::is_error_code_enum<std::io_errc>

.SH Synopsis
   Defined in header <ios>
   template< >                                                           \fI(since C++11)\fP
   struct is_error_code_enum<std::io_errc> : public std::true_type { };

   This specialization of std::is_error_code_enum informs other library components that
   values of type std::io_errc are enumerations that hold error codes, which makes them
   implicitly convertible and assignable to objects of type std::error_code.

.SH Member constants

   value    true
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP
   operator()    returns value
   \fI(C++14)\fP       \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Example

   The comparison between e.code() and std::io_errc::stream compiles because
   std::is_error_code_enum<std::io_errc>::value == true

   
// Run this code

 #include <iostream>
 #include <fstream>
 int main()
 {
     std::ifstream f("doesn't exist");
     try {
         f.exceptions(f.failbit);
     } catch (const std::ios_base::failure& e) {
         std::cout << "Caught an ios_base::failure.\\n";
         if(e.code() == std::io_errc::stream)
             std::cout << "The error code is std::io_errc::stream\\n";
     }
 }

.SH Output:

 Caught an ios_base::failure.
 The error code is std::io_errc::stream

.SH See also

   is_error_code_enum identifies a class as an error_code enumeration
   \fI(C++11)\fP            \fI(class template)\fP 
   error_code         holds a platform-dependent error code
   \fI(C++11)\fP            \fI(class)\fP 
   io_errc            the IO stream error codes
   \fI(C++11)\fP            \fI(enum)\fP 
