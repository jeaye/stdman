.TH std::experimental::optional 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::experimental::optional \- std::experimental::optional

.SH Synopsis
   Defined in header <experimental/optional>
   template< class T >                        (library fundamentals TS)
   class optional;

   The class template std::experimental::optional manages an optional contained value,
   i.e. a value that may or may not be present.

   A common use case for optional is the return value of a function that may fail. As
   opposed to other approaches, such as std::pair<T,bool>, optional handles expensive
   to construct objects well and is more readable, as the intent is expressed
   explicitly.

   Any instance of optional<T> at any given point in time either contains a value or
   does not contain a value.

   If an optional<T> contains a value, the value is guaranteed to be allocated as part
   of the optional object footprint, i.e. no dynamic memory allocation ever takes
   place. Thus, an optional object models an object, not a pointer, even though the
   operator*() and operator->() are defined.

   When an object of type optional<T> is contextually converted to bool, the conversion
   returns true if the object contains a value and false if it does not contain a
   value.

   The optional object contains a value in the following conditions:

     * The object is initialized with a value of type T
     * The object is assigned from another optional that contains a value.

   The object does not contain a value in the following conditions:

     * The object is default-initialized.
     * The object is initialized with a value of std::experimental::nullopt_t or an
       optional object that does not contain a value.
     * The object is assigned from a value of std::experimental::nullopt_t or from an
       optional that does not contain a value

.SH Template parameters

   T - the type of the value to manage initialization state for. The type must meet the
       requirements of Destructible

.SH Member types

   Member type Definition
   value_type  T

.SH Member functions

   constructor   constructs the optional object
                 \fI(public member function)\fP 
   destructor    destroys the contained value, if there is one
                 \fI(public member function)\fP 
   operator=     assigns contents
                 \fI(public member function)\fP 
.SH Observers
   operator->    accesses the contained value
   operator*     \fI(public member function)\fP 
   operator bool checks whether the object contains a value
                 \fI(public member function)\fP 
   value         returns the contained value
                 \fI(public member function)\fP 
   value_or      returns the contained value if available, another value otherwise
                 \fI(public member function)\fP 
.SH Modifiers
   swap          exchanges the contents
                 \fI(public member function)\fP 
   emplace       constructs the contained value in-place
                 \fI(public member function)\fP 

.SH Member objects

   Member name   Definition
   val (private) pointer to the contained value (which points at a data member of the
                 same object), the name is for exposition only

.SH Non-member functions

   operator==
   operator!=
   operator<                              compares optional objects
   operator<=                             \fI(function template)\fP 
   operator>
   operator>=
   make_optional                          creates an optional object
                                          \fI(function template)\fP 
   std::swap(std::experimental::optional) specializes the std::swap algorithm
                                          \fI(function)\fP 

.SH Helper classes

   std::hash<std::experimental::optional> specializes the std::hash algorithm
                                          \fI(class template specialization)\fP 
   nullopt_t                              indicator of optional type with uninitialized
   (library fundamentals TS)              state
                                          \fI(class)\fP 
   in_place_t                             disambiguation tag type for in-place
   (library fundamentals TS)              construction of optional types
                                          \fI(class)\fP 
   bad_optional_access                    exception indicating checked access to an
   (library fundamentals TS)              optional that doesn't contain a value
                                          \fI(class)\fP 

   Helper objects

   nullopt                   an object of type nullopt_t
   (library fundamentals TS) \fI(function)\fP 
   in_place                  an object of type std::experimental::in_place_t
   (library fundamentals TS) \fI(function)\fP 
