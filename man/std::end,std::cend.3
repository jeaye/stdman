.TH std::end,std::cend 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::end,std::cend \- std::end,std::cend

.SH Synopsis
   Defined in header <iterator>
   template< class C >                                    \fI(since C++11)\fP
   auto end( C& c ) -> decltype(c.end());                 \fI(until C++17)\fP
   template< class C >
   constexpr auto end( C& c ) ->                          \fI(since C++17)\fP
   decltype(c.end());
                                                                        (since
   template< class C >                                                  C++11)
   auto end( const C& c ) -> decltype(c.end());                         (until
                                                                        C++17)
   template< class C >                                                  (since
   constexpr auto end( const C& c ) ->                                  C++17)
   decltype(c.end());                             \fB(1)\fP
                                                                                (since
   template< class T, std::size_t N >                                           C++11)
   T* end( T (&array)[N] );                           \fB(1)\fP                       (until
                                                                                C++14)
   template< class T, std::size_t N >                                           (since
   constexpr T* end( T (&array)[N] ) noexcept;            \fB(2)\fP                   C++14)
   template< class C >

   constexpr auto cend( const C& c ) noexcept(/*                        \fB(3)\fP     (since
   see below */)                                                                C++14)

       -> decltype(std::end(c));

   Returns an iterator to the end (i.e. the element after the last element) of the
   given container c or array array. These templates rely on C::end() having a
   reasonable implementation.

   1) Returns exactly c.end(), which is typically an iterator one past the end of the
   sequence represented by c. If C is a standard Container, this returns a C::iterator
   when c is not const-qualified, and a C::const_iterator otherwise.
   2) Returns a pointer to the end of the array array.
   3) Returns exactly std::end(c), with c always treated as const-qualified. If C is a
   standard Container, this always returns a C::const_iterator.

   range-begin-end.svg

.SH Parameters

   c     - a container with an end method
   array - an array of arbitrary type

.SH Return value

   An iterator to the end of c or array. Note that the end of a container or array is
   defined as the element following the last valid element.

.SH Exceptions

   3)
   noexcept specification:  
   noexcept(noexcept(std::end(c)))

.SH Notes

   In addition to being included in <iterator>, std::end and std::cend are guaranteed
   to become available if any of the following headers are included: <array>, <deque>,
   <forward_list>, <list>, <map>, <regex>, <set>, <string>
   , <string_view>
   \fI(since C++17)\fP, <unordered_map>, <unordered_set>, and <vector>.

   User-defined overloads

   Custom overloads of end may be provided for classes that do not expose a suitable
   end() member function, yet can be iterated. The following overloads are already
   provided by the standard library:

   std::end(std::initializer_list)                      specializes std::end
   \fI(C++11)\fP                                              \fI(function template)\fP 
   std::end(std::valarray)                              specializes std::end
   \fI(C++11)\fP                                              \fI(function template)\fP 
   begin(std::filesystem::directory_iterator)           range-based for loop support
   end(std::filesystem::directory_iterator)             \fI(function)\fP 
   begin(std::filesystem::recursive_directory_iterator) range-based for loop support
   end(std::filesystem::recursive_directory_iterator)   \fI(function)\fP 

   Similar to the use of swap (described in Swappable), typical use of the end function
   in generic context is an equivalent of using std::end; end(arg);, which lets both
   the ADL-selected overloads for user-defined types and the standard library function
   templates to appear in the same overload set.

 template<typename Container, typename Function>
 void for_each(Container&& cont, Function f) {
     using std::begin;
     auto it = begin(cont);
     using std::end;
     auto end_it = end(cont);
     while (it != end_it) {
         f(*it);
         ++it;
     }
 }

.SH Example

   
// Run this code

 #include <iostream>
 #include <vector>
 #include <iterator>
 #include <algorithm>
  
 int main()
 {
     std::vector<int> v = { 3, 1, 4 };
     if (std::find(std::begin(v), std::end(v), 5) != std::end(v)) {
         std::cout << "found a 5 in vector v!\\n";
     }
  
     int a[] = { 5, 10, 15 };
     if (std::find(std::begin(a), std::end(a), 5) != std::end(a)) {
         std::cout << "found a 5 in array a!\\n";
     }
 }

.SH Output:

 found a 5 in array a!

.SH See also

   begin
   cbegin  returns an iterator to the beginning of a container or array
   \fI(C++11)\fP \fI(function)\fP 
   \fI(C++14)\fP

.SH Category:

     * conditionally noexcept
