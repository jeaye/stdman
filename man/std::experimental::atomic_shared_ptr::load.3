.TH std::experimental::atomic_shared_ptr::load 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::experimental::atomic_shared_ptr::load \- std::experimental::atomic_shared_ptr::load

.SH Synopsis
   shared_ptr<T> load( std::memory_order order = std::memory_order_seq_cst ) const
   noexcept;

   Atomically loads and returns the current value of the atomic_shared_ptr. Memory is
   affected according to the value of order.

   order must be one of std::memory_order_relaxed, std::memory_order_consume,
   std::memory_order_acquire or std::memory_order_seq_cst. Otherwise the behavior is
   undefined.

.SH Parameters

   order - memory order constraints to enforce

   Remarks

   All associated use_count increments are guaranteed to be performed as part of the
   atomic operation.

.SH Return value

   The current value of the atomic_shared_ptr.

.SH See also

                                                                 loads a value from an
   operator shared_ptr<T>                                        atomic object
                                                                 \fI\fI(public member\fP\fP
                                                                 function) 
   std::atomic_is_lock_free(std::shared_ptr)
   std::atomic_load(std::shared_ptr)
   std::atomic_load_explicit(std::shared_ptr)
   std::atomic_store(std::shared_ptr)                            specializes atomic
   std::atomic_store_explicit(std::shared_ptr)                   operations for
   std::atomic_exchange(std::shared_ptr)                         std::shared_ptr
   std::atomic_exchange_explicit(std::shared_ptr)                \fI(function template)\fP
   std::atomic_compare_exchange_weak(std::shared_ptr)            
   std::atomic_compare_exchange_strong(std::shared_ptr)
   std::atomic_compare_exchange_weak_explicit(std::shared_ptr)
   std::atomic_compare_exchange_strong_explicit(std::shared_ptr)
   (deprecated in C++20)
