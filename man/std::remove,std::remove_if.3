.TH std::remove,std::remove_if 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::remove,std::remove_if \- std::remove,std::remove_if

.SH Synopsis
   Defined in header <algorithm>
   template< class ForwardIt, class T >
   ForwardIt remove( ForwardIt first, ForwardIt             \fI(until C++20)\fP
   last, const T& value );
   template< class ForwardIt, class T >
   constexpr ForwardIt remove( ForwardIt first,             \fI(since C++20)\fP
   ForwardIt last, const T& value );
   template< class ExecutionPolicy, class
   ForwardIt, class T >
   ForwardIt remove( ExecutionPolicy&& policy,          \fB(2)\fP \fI(since C++17)\fP
   ForwardIt first, ForwardIt last, const T& value
   );
   template< class ForwardIt, class UnaryPredicate  \fB(1)\fP
   >                                                                      \fI(until C++20)\fP
   ForwardIt remove_if( ForwardIt first, ForwardIt
   last, UnaryPredicate p );
   template< class ForwardIt, class UnaryPredicate
   >                                                                      \fI(since C++20)\fP
   constexpr ForwardIt remove_if( ForwardIt first,      \fB(3)\fP
   ForwardIt last, UnaryPredicate p );
   template< class ExecutionPolicy, class
   ForwardIt, class UnaryPredicate >
   ForwardIt remove_if( ExecutionPolicy&& policy,           \fB(4)\fP           \fI(since C++17)\fP
   ForwardIt first, ForwardIt last, UnaryPredicate
   p );

   Removes all elements satisfying specific criteria from the range [first, last) and
   returns a past-the-end iterator for the new end of the range.

   1) Removes all elements that are equal to value.
   3) Removes all elements for which predicate p returns true.
   2,4) Same as (1,3), but executed according to policy. These overloads do not
   participate in overload resolution unless
   std::is_execution_policy_v<std::decay_t<ExecutionPolicy>> is true

   Removing is done by shifting (by means of move assignment) the elements in the range
   in such a way that the elements that are not to be removed appear in the beginning
   of the range. Relative order of the elements that remain is preserved and the
   physical size of the container is unchanged. Iterators pointing to an element
   between the new logical end and the physical end of the range are still
   dereferenceable, but the elements themselves have unspecified values (as per
   MoveAssignable post-condition). A call to remove is typically followed by a call to
   a container's erase method, which erases the unspecified values and reduces the
   physical size of the container to match its new logical size.

.SH Parameters

   first, last - the range of elements to process
   value       - the value of elements to remove
   policy      - the execution policy to use. See execution policy for details.
                 unary predicate which returns true if the element should be removed.

                 The signature of the predicate function should be equivalent to the
                 following:

   p           -  bool pred(const Type &a);

                 The signature does not need to have const &, but the function must not
                 modify the objects passed to it.
                 The type Type must be such that an object of type ForwardIt can be
                 dereferenced and then implicitly converted to Type. 
.SH Type requirements
   -
   ForwardIt must meet the requirements of ForwardIterator.
   -
   The type of dereferenced ForwardIt must meet the requirements of MoveAssignable.
   -
   UnaryPredicate must meet the requirements of Predicate.

.SH Return value

   Past-the-end iterator for the new range of values (if this is not end, then it
   points to an unspecified value, and so do iterators to any values between this
   iterator and end)

.SH Complexity

   Exactly std::distance(first, last) applications of the predicate.

.SH Exceptions

   The overloads with a template parameter named ExecutionPolicy report errors as
   follows:

     * If execution of a function invoked as part of the algorithm throws an exception
       and ExecutionPolicy is one of the three standard policies, std::terminate is
       called. For any other ExecutionPolicy, the behavior is implementation-defined.
     * If the algorithm fails to allocate memory, std::bad_alloc is thrown.

.SH Notes

   The similarly-named container member functions list::remove, list::remove_if,
   forward_list::remove, and forward_list::remove_if erase the removed elements.

   These algorithms cannot be used with associative containers such as std::set and
   std::map because ForwardIt does not dereference to a MoveAssignable type (the keys
   in these containers are not modifiable)

   The standard library also defines an overload of std::remove taking const char*,
   used to delete files: std::remove.

   Because std::remove takes value by reference, it can have unexpected behavior if it
   is a reference to an element of the range [first, last).

.SH Possible implementation

.SH First version
   template< class ForwardIt, class T >
   ForwardIt remove(ForwardIt first, ForwardIt last, const T& value)
   {
       first = std::find(first, last, value);
       if (first != last)
           for(ForwardIt i = first; ++i != last; )
               if (!(*i == value))
                   *first++ = std::move(*i);
       return first;
   }
.SH Second version
   template<class ForwardIt, class UnaryPredicate>
   ForwardIt remove_if(ForwardIt first, ForwardIt last, UnaryPredicate p)
   {
       first = std::find_if(first, last, p);
       if (first != last)
           for(ForwardIt i = first; ++i != last; )
               if (!p(*i))
                   *first++ = std::move(*i);
       return first;
   }

.SH Examples

   The following code removes all spaces from a string by shifting all non-space
   characters to the left and then erasing the extra. This is an example of
   erase-remove idiom.

   
// Run this code

 #include <algorithm>
 #include <string>
 #include <iostream>
 #include <cctype>
  
 int main()
 {
     std::string str1 = "Text with some   spaces";
     str1.erase(std::remove(str1.begin(), str1.end(), ' '),
                str1.end());
     std::cout << str1 << '\\n';
  
     std::string str2 = "Text\\n with\\tsome \\t  whitespaces\\n\\n";
     str2.erase(std::remove_if(str2.begin(),
                               str2.end(),
                               [](unsigned char x){return std::isspace(x);}),
                str2.end());
     std::cout << str2 << '\\n';
 }

.SH Output:

 Textwithsomespaces
 Textwithsomewhitespaces

.SH See also

   remove_copy    copies a range of elements omitting those that satisfy specific
   remove_copy_if criteria
                  \fI(function template)\fP 
   unique         removes consecutive duplicate elements in a range
                  \fI(function template)\fP 
