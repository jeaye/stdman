.TH std::pair::operator= 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::pair::operator= \- std::pair::operator=

.SH Synopsis
   pair& operator=( const pair& other );                      \fB(1)\fP
   template< class U1, class U2 >                             \fB(2)\fP
   pair& operator=( const pair<U1,U2>& other );
   pair& operator=( pair&& other ) noexcept(/* see below */); \fB(3)\fP \fI(since C++11)\fP
   template< class U1, class U2 >                             \fB(4)\fP \fI(since C++11)\fP
   pair& operator=( pair<U1,U2>&& other );

   Replaces the contents of the pair.

   1) Copy assignment operator. Replaces the contents with a copy of the contents of
   other.
   2) Assigns other.first to first and other.second to second
   3) Move assignment operator. Replaces the contents with those of other using move
   semantics.
   4) Assigns std::forward<U1>(p.first) to first and std::forward<U2>(p.second) to
   second.

   The behavior of these functions is undefined unless:

     * For \fB(1)\fP,std::is_copy_assignable<first_type>::value and
       std::is_copy_assignable<second_type>::value are both true.
     * For \fB(2)\fP,std::is_assignable<first_type&, const U1&>::value and             (until
       std::is_assignable<second_type&, const U2&>::value are both true.         C++17)
     * For \fB(3)\fP,std::is_move_assignable<first_type>::value and
       std::is_move_assignable<second_type>::value are both true.
     * For \fB(4)\fP,std::is_assignable<first_type&, U1&&>::value and
       std::is_assignable<second_type&, U2&&>::value are both true.
   These functions do not participate in overload resolution (or, for the copy
   assignment operator, is defined as deleted) if any required assignment
   operation is invalid. Specifically:

     * \fB(1)\fP is defined as deleted unless std::is_copy_assignable_v<first_type>
       and std::is_copy_assignable_v<second_type> are both true.
     * \fB(2)\fP does not participate in overload resolution unless                    (since
       std::is_assignable_v<first_type&, const U1&> and                          C++17)
       std::is_assignable_v<second_type&, const U2&> are both true.
     * \fB(3)\fP does not participate in overload resolution unless
       std::is_move_assignable_v<first_type> and
       std::is_move_assignable_v<second_type> are both true.
     * \fB(4)\fP does not participate in overload resolution unless
       std::is_assignable_v<first_type&, U1&&> and
       std::is_assignable_v<second_type&, U2&&> are both true.

.SH Parameters

   other - pair of values to replace the contents of this pair

.SH Return value

   *this

.SH Exceptions

   1-2) \fI(none)\fP
   3)
   noexcept specification:  
   noexcept(

       is_nothrow_move_assignable<T1>::value &&
       is_nothrow_move_assignable<T2>::value

   )
   4) \fI(none)\fP

.SH Example

    This section is incomplete
    Reason: no example

.SH See also


   Categories:

     * conditionally noexcept
     * Todo no example
