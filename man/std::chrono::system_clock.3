.TH std::chrono::system_clock 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::chrono::system_clock \- std::chrono::system_clock

.SH Synopsis
   Defined in header <chrono>
   class system_clock;         \fI(since C++11)\fP

   Class std::chrono::system_clock represents the system-wide real time wall clock.

   It may not be monotonic: on most systems, the system time can be adjusted at any
   moment. It is the only C++ clock that has the ability to map its time points to
   C-style time, and, therefore, to be displayed.

   std::chrono::system_clock meets the requirements of TrivialClock.

   The epoch of system_clock is unspecified, but most implementations use Unix Time
   (i.e., time since 00:00:00 Coordinated Universal Time (UTC), Thursday, 1 January
   1970, not counting leap seconds).

.SH Member types

   Member type Definition
   rep         signed arithmetic type representing the number of ticks in the clock's
               duration
   period      a std::ratio type representing the tick period of the clock, in seconds
   duration    std::chrono::duration<rep, period>, capable of representing negative
               durations
   time_point  std::chrono::time_point<std::chrono::system_clock>

.SH Member constants

                            true if the time between ticks is always constant, i.e.
   constexpr bool is_steady calls to now() return values that increase monotonically
   \fB[static]\fP                 even in case of some external clock adjustment, otherwise
                            false
                            \fI(public static member constant)\fP

.SH Member functions

   now         returns a std::chrono::time_point representing the current point in time
   \fB[static]\fP    \fI(public static member function)\fP 
   to_time_t   converts a system clock time point to std::time_t
   \fB[static]\fP    \fI(public static member function)\fP 
   from_time_t converts std::time_t to a system clock time point
   \fB[static]\fP    \fI(public static member function)\fP 

.SH See also

   steady_clock          monotonic clock that will never be adjusted
   \fI(C++11)\fP               \fI(class)\fP
   high_resolution_clock the clock with the shortest tick period available
   \fI(C++11)\fP               \fI(class)\fP
