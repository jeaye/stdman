.TH deductionguidesforstd::map 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
deductionguidesforstd::map \- deductionguidesforstd::map

.SH Synopsis
   Defined in header <map>
   template <class InputIt,

             class Comp = std::less<iter_key_t<InputIt>>,
             class Alloc = std::allocator<iter_to_alloc_t<InputIt>>>  \fB(1)\fP \fI(since C++17)\fP
   map(InputIt, InputIt, Comp = Comp(), Alloc = Alloc())

     -> map<iter_key_t<InputIt>, iter_val_t<InputIt>, Comp, Alloc>;
   template<class Key,

            class T,
            class Comp = std::less<Key>,
            class Alloc = std::allocator<std::pair<const Key, T>>>    \fB(2)\fP \fI(since C++17)\fP
   map(std::initializer_list<std::pair<const Key, T>>, Comp = Comp(),
   Alloc = Alloc())

     -> map<Key, T, Comp, Alloc>;
   template<class InputIt, class Alloc>

   map(InputIt, InputIt, Alloc)                                       \fB(3)\fP \fI(since C++17)\fP
     -> map<iter_key_t<InputIt>, iter_val_t<InputIt>,

                 std::less<iter_key_t<InputIt>>, Alloc>;
   template<class Key, class T, class Allocator>

   map(std::initializer_list<std::pair<const Key, T>>, Allocator)     \fB(4)\fP \fI(since C++17)\fP

     -> map<Key, T, std::less<Key>, Allocator>;

   where the type aliases iter_key_t, iter_val_t, iter_to_alloc_t are defined as if as
   follows

   template<class InputIt>

   using iter_key_t = std::remove_const_t<                                  (exposition
                                                                            only)
                        typename
   std::iterator_traits<InputIt>::value_type::first_type>;
   template<class InputIt>                                                  (exposition
   using iter_val_t = typename                                              only)
   std::iterator_traits<InputIt>::value_type::second_type;
   template<class InputIterator>

   using iter_to_alloc_t = std::pair<
     std::add_const_t<typename                                              (exposition
   std::iterator_traits<InputIt>::value_type::first_type>,                  only)
     typename std::iterator_traits<InputIt>::value_type::second_type

   >

   This deduction guide is provided for map to allow deduction from an iterator range
   (overloads (1,3)) and std::initializer_list (overloads (2,4)). These overloads only
   participate in overload resolution if InputIt satisfies InputIterator, Alloc
   satisfies Allocator, and Comp does not satisfy Allocator.

   Note: the extent to which the library determines that a type does not satisfy
   InputIterator is unspecified, except that as a minimum integral types do not qualify
   as input iterators. Likewise, the extent to which it determines that a type does not
   satisfy Allocator is unspecified, except that as a minimum the member type
   Alloc::value_type must exist and the expression
   std::declval<Alloc&>().allocate(std::size_t{}) must be well-formed when treated as
   an unevaluated operand.

.SH Example

   
// Run this code

 #include <map>
 int main() {
 // std::map m1 = {{"foo", 1}, {"bar", 2}}; // Error: braced-init-list has no type;
                                            // cannot deduce pair<const Key, T> from
                                            // {"foo", 1} or {"bar", 2}
  
    std::map m1 = std::initializer_list<
                         std::pair<char const* const, int>>({{"foo", 2}, {"bar", 3}}); // guide #2
    std::map m2(m1.begin(), m1.end()); // guide #1
 }
