.TH std::deque::push_back 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::deque::push_back \- std::deque::push_back

.SH Synopsis
   void push_back( const T& value ); \fB(1)\fP
   void push_back( T&& value );      \fB(2)\fP \fI(since C++11)\fP

   Appends the given element value to the end of the container.

   1) The new element is initialized as a copy of value.
   2) value is moved into the new element.

   All iterators, including the past-the-end iterator, are invalidated. No references
   are invalidated.

.SH Parameters

   value             -            the value of the element to append
.SH Type requirements
   -
   T must meet the requirements of CopyInsertable in order to use overload \fB(1)\fP.
   -
   T must meet the requirements of MoveInsertable in order to use overload \fB(2)\fP.

.SH Return value

   \fI(none)\fP

.SH Complexity

   Constant.

.SH Exceptions

   If an exception is thrown (which can be due to Allocator::allocate() or element
   copy/move constructor/assignment), this function has no effect (strong exception
   guarantee).

.SH Example

   
// Run this code

 #include <deque>
 #include <iostream>
 #include <iomanip>
  
 int main()
 {
     std::deque<std::string> numbers;
  
     numbers.push_back("abc");
     std::string s = "def";
     numbers.push_back(std::move(s));
  
     std::cout << "deque holds: ";
     for (auto&& i : numbers) std::cout << std::quoted(i) << ' ';
     std::cout << "\\nMoved-from string holds " << std::quoted(s) << '\\n';
 }

.SH Output:

 deque holds: "abc" "def"
 Moved-from string holds ""

.SH See also

   emplace_back constructs an element in-place at the end
   \fI(C++11)\fP      \fI(public member function)\fP 
   push_front   inserts an element to the beginning
                \fI(public member function)\fP 
   pop_back     removes the last element
                \fI(public member function)\fP 
