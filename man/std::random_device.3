.TH std::random_device 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::random_device \- std::random_device

.SH Synopsis
   Defined in header <random>
   class random_device;        \fI(since C++11)\fP

   std::random_device is a uniformly-distributed integer random number generator that
   produces non-deterministic random numbers.

   std::random_device may be implemented in terms of an implementation-defined
   pseudo-random number engine if a non-deterministic source (e.g. a hardware device)
   is not available to the implementation. In this case each std::random_device object
   may generate the same number sequence.

.SH Member types

   Member type Definition
   result_type unsigned int

.SH Member functions

.SH Construction
   constructor   constructs the engine
                 \fI(public member function)\fP 
   operator=     the assignment operator is deleted
   (deleted)     \fI(public member function)\fP
.SH Generation
   operator()    advances the engine's state and returns the generated value
                 \fI(public member function)\fP 
.SH Characteristics
                 obtains the entropy estimate for the non-deterministic random number
   entropy       generator
                 \fI(public member function)\fP 
   min           gets the smallest possible value in the output range
   \fB[static]\fP      \fI(public static member function)\fP 
   max           gets the largest possible value in the output range
   \fB[static]\fP      \fI(public static member function)\fP 

.SH Example

   
// Run this code

 #include <iostream>
 #include <string>
 #include <map>
 #include <random>
  
 int main()
 {
     std::random_device rd;
     std::map<int, int> hist;
     std::uniform_int_distribution<int> dist(0, 9);
     for (int n = 0; n < 20000; ++n) {
         ++hist[dist(rd)]; // note: demo only: the performance of many
                           // implementations of random_device degrades sharply
                           // once the entropy pool is exhausted. For practical use
                           // random_device is generally only used to seed
                           // a PRNG such as mt19937
     }
     for (auto p : hist) {
         std::cout << p.first << " : " << std::string(p.second/100, '*') << '\\n';
     }
 }

.SH Possible output:

 0 : ********************
 1 : *******************
 2 : ********************
 3 : ********************
 4 : ********************
 5 : *******************
 6 : ********************
 7 : ********************
 8 : *******************
 9 : ********************
