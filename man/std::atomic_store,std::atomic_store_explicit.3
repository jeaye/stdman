.TH std::atomic_store,std::atomic_store_explicit 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::atomic_store,std::atomic_store_explicit \- std::atomic_store,std::atomic_store_explicit

.SH Synopsis
   Defined in header <atomic>
   template< class T >

   void atomic_store( std::atomic<T>* obj,

                      typename
   std::atomic<T>::value_type desr ) noexcept;
   template< class T >

   void atomic_store( volatile std::atomic<T>*
   obj,

                      typename
   std::atomic<T>::value_type desr ) noexcept;
   template< class T >

   void atomic_store_explicit( std::atomic<T>*    \fB(1)\fP \fI(since C++11)\fP
   obj,
                               typename
   std::atomic<T>::value_type desr,

                               std::memory_order
   order) noexcept;                                                 \fB(2)\fP \fI(since C++11)\fP
   template< class T >

   void atomic_store_explicit( volatile
   std::atomic<T>* obj,
                               typename
   std::atomic<T>::value_type desr,

                               std::memory_order
   order) noexcept;

   1) Atomically replaces the value pointed to by obj with the value of desr as if by
   obj->store(desr)
   2) Atomically replaces the value pointed to by obj with the value of desr as if by
   obj->store(desr, order)

.SH Parameters

   obj   - pointer to the atomic object to modify
   desr  - the value to store in the atomic object
           the memory synchronization ordering for this operation: only
   order - std::memory_order_relaxed, std::memory_order_release and
           std::memory_order_seq_cst are permitted.

.SH Return value

   none.

   Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

     DR    Applied to            Behavior as published              Correct behavior
   P0558R1 C++11      exact type match required because T is      T is deduced from the
                      deduced from multiple arguments             atomic argument only

.SH See also

                                               atomically replaces the value of the
   store                                       atomic object with a non-atomic argument
                                               \fI(public member function of std::atomic)\fP
                                               
   atomic_load                                 atomically obtains the value stored in
   atomic_load_explicit                        an atomic object
   \fI(C++11)\fP                                     \fI(function template)\fP 
   \fI(C++11)\fP
   memory_order                                defines memory ordering constraints for
   \fI(C++11)\fP                                     the given atomic operation
                                               \fI(enum)\fP 
   std::atomic_store(std::shared_ptr)          specializes atomic operations for
   std::atomic_store_explicit(std::shared_ptr) std::shared_ptr
                                               \fI(function template)\fP
   C documentation for
   atomic_store,
   atomic_store_explicit

.SH Category:

     * Uses of dcl rev begin with nonempty note
