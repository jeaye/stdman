.TH std::basic_string 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::basic_string \- std::basic_string

.SH Synopsis
   Defined in header <string>
   template<

       class CharT,
       class Traits = std::char_traits<CharT>,                        \fB(1)\fP
       class Allocator = std::allocator<CharT>

   > class basic_string;
   namespace pmr {

       template <class CharT, class Traits = std::char_traits<CharT>>
       using basic_string = std::basic_string< CharT, Traits,         \fB(2)\fP \fI(since C++17)\fP
                                              
   std::polymorphic_allocator<CharT>>

   }

   The class template basic_string stores and manipulates sequences of char-like
   objects, which are non-array objects of trivial type. The class is dependent neither
   on the character type nor on the nature of operations on that type. The definitions
   of the operations are supplied via the Traits template parameter - a specialization
   of std::char_traits or a compatible traits class. Traits::char_type and CharT must
   name the same type; otherwise the behavior is undefined.

   The elements of a basic_string are stored contiguously, that is, for a
   basic_string s, &*(s.begin() + n) == &*s.begin() + n for any n in [0,
   s.size()), or, equivalently, a pointer to s[0] can be passed to        \fI(since C++11)\fP
   functions that expect a pointer to the first element of a CharT[]
   array.

   std::basic_string satisfies the requirements of AllocatorAwareContainer,
   SequenceContainer
   and ContiguousContainer
   \fI(since C++17)\fP

   Several typedefs for common character types are provided:

   Defined in header <string>
   Type                        Definition
   std::string                 std::basic_string<char>
   std::wstring                std::basic_string<wchar_t>
   std::u16string \fI(C++11)\fP      std::basic_string<char16_t>
   std::u32string \fI(C++11)\fP      std::basic_string<char32_t>
   std::pmr::string \fI(C++17)\fP    std::pmr::basic_string<char>
   std::pmr::wstring \fI(C++17)\fP   std::pmr::basic_string<wchar_t>
   std::pmr::u16string \fI(C++17)\fP std::pmr::basic_string<char16_t>
   std::pmr::u32string \fI(C++17)\fP std::pmr::basic_string<char32_t>

.SH Template parameters

   CharT     - character type
   Traits    - traits class specifying the operations on the character type
   Allocator - Allocator type used to allocate internal storage

.SH Member types

   Member type            Definition
   traits_type            Traits
   value_type             CharT
   allocator_type         Allocator 
                          Allocator::size_type                        \fI(until C++11)\fP
   size_type              std::allocator_traits<Allocator>::size_type \fI(since C++11)\fP

                          
                          Allocator::difference_type                        (until
                                                                            C++11)
   difference_type        std::allocator_traits<Allocator>::difference_type (since
                                                                            C++11)

                          
                          Allocator::reference \fI(until C++11)\fP
   reference              value_type&          \fI(since C++11)\fP

                          
                          Allocator::const_reference \fI(until C++11)\fP
   const_reference        const value_type&          \fI(since C++11)\fP

                          
                          Allocator::pointer                        \fI(until C++11)\fP
   pointer                std::allocator_traits<Allocator>::pointer \fI(since C++11)\fP

                          
                          Allocator::const_pointer                        \fI(until C++11)\fP
   const_pointer          std::allocator_traits<Allocator>::const_pointer \fI(since C++11)\fP

                          
   iterator               RandomAccessIterator 
   const_iterator         Constant RandomAccessIterator 
   reverse_iterator       std::reverse_iterator<iterator> 
   const_reverse_iterator std::reverse_iterator<const_iterator> 

.SH Member functions

   constructor                constructs a basic_string
                              \fI(public member function)\fP 
                              destroys the string, deallocating internal storage if
   destructor                 used
                              \fI(public member function)\fP
   operator=                  assigns values to the string
                              \fI(public member function)\fP 
   assign                     assign characters to a string
                              \fI(public member function)\fP 
   get_allocator              returns the associated allocator
                              \fI(public member function)\fP 
.SH Element access
   at                         accesses the specified character with bounds checking
                              \fI(public member function)\fP 
   operator[]                 accesses the specified character
                              \fI(public member function)\fP 
   front                      accesses the first character
   \fI(C++11)\fP                    \fI(public member function)\fP 
   back                       accesses the last character
   \fI(C++11)\fP                    \fI(public member function)\fP 
   data                       returns a pointer to the first character of a string
                              \fI(public member function)\fP 
                              returns a non-modifiable standard C character array
   c_str                      version of the string
                              \fI(public member function)\fP 
   operator basic_string_view returns a non-modifiable string_view into the entire
   \fI(C++17)\fP                    string
                              \fI(public member function)\fP 
.SH Iterators
   begin                      returns an iterator to the beginning
   cbegin                     \fI(public member function)\fP 
   \fI(C++11)\fP
   end                        returns an iterator to the end
   cend                       \fI(public member function)\fP 
   \fI(C++11)\fP
   rbegin                     returns a reverse iterator to the beginning
   crbegin                    \fI(public member function)\fP 
   \fI(C++11)\fP
   rend                       returns a reverse iterator to the end
   crend                      \fI(public member function)\fP 
   \fI(C++11)\fP
.SH Capacity
   empty                      checks whether the string is empty
                              \fI(public member function)\fP 
   size                       returns the number of characters
   length                     \fI(public member function)\fP 
   max_size                   returns the maximum number of characters
                              \fI(public member function)\fP 
   reserve                    reserves storage
                              \fI(public member function)\fP 
                              returns the number of characters that can be held in
   capacity                   currently allocated storage
                              \fI(public member function)\fP 
   shrink_to_fit              reduces memory usage by freeing unused memory
   \fI(C++11)\fP                    \fI(public member function)\fP 
.SH Operations
   clear                      clears the contents
                              \fI(public member function)\fP 
   insert                     inserts characters
                              \fI(public member function)\fP 
   erase                      removes characters
                              \fI(public member function)\fP 
   push_back                  appends a character to the end
                              \fI(public member function)\fP 
   pop_back                   removes the last character
   \fI(C++11)\fP                    \fI(public member function)\fP 
   append                     appends characters to the end
                              \fI(public member function)\fP 
   operator+=                 appends characters to the end
                              \fI(public member function)\fP 
   compare                    compares two strings
                              \fI(public member function)\fP 
   starts_with                checks if the string starts with the given prefix
   (C++20)                    \fI(public member function)\fP 
   ends_with                  checks if the string ends with the given suffix
   (C++20)                    \fI(public member function)\fP 
   replace                    replaces specified portion of a string
                              \fI(public member function)\fP 
   substr                     returns a substring
                              \fI(public member function)\fP 
   copy                       copies characters
                              \fI(public member function)\fP 
   resize                     changes the number of characters stored
                              \fI(public member function)\fP 
   swap                       swaps the contents
                              \fI(public member function)\fP 
.SH Search
   find                       find characters in the string
                              \fI(public member function)\fP 
   rfind                      find the last occurrence of a substring
                              \fI(public member function)\fP 
   find_first_of              find first occurrence of characters
                              \fI(public member function)\fP 
   find_first_not_of          find first absence of characters
                              \fI(public member function)\fP 
   find_last_of               find last occurrence of characters
                              \fI(public member function)\fP 
   find_last_not_of           find last absence of characters
                              \fI(public member function)\fP 
.SH Constants
   npos                       special value. The exact meaning depends on the context
   \fB[static]\fP                   \fI(public static member constant)\fP 

.SH Non-member functions

   operator+                    concatenates two strings or a string and a char
                                \fI(function template)\fP 
   operator==
   operator!=
   operator<                    lexicographically compares two strings
   operator>                    \fI(function template)\fP 
   operator<=
   operator>=
   std::swap(std::basic_string) specializes the std::swap algorithm
                                \fI(function template)\fP 
.SH Input/output
   operator<<                   performs stream input and output on strings
   operator>>                   \fI(function template)\fP 
   getline                      read data from an I/O stream into a string
                                \fI(function template)\fP 
.SH Numeric conversions
   stoi
   stol
   stoll                        converts a string to a signed integer
   \fI(C++11)\fP                      \fI(function)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   stoul
   stoull                       converts a string to an unsigned integer
   \fI(C++11)\fP                      \fI(function)\fP 
   \fI(C++11)\fP
   stof
   stod
   stold                        converts a string to a floating point value
   \fI(C++11)\fP                      \fI(function)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   to_string                    converts an integral or floating point value to string
   \fI(C++11)\fP                      \fI(function)\fP 
   to_wstring                   converts an integral or floating point value to wstring
   \fI(C++11)\fP                      \fI(function)\fP 

.SH Literals

   Defined in inline namespace std::literals::string_literals
   operator""s   Converts a character array literal to basic_string
   \fI(C++14)\fP       \fI(function)\fP 

.SH Helper classes

   std::hash<std::string>
   std::hash<std::u16string>
   std::hash<std::u32string>
   std::hash<std::wstring>
   std::hash<std::pmr::string>
   std::hash<std::pmr::u16string>
   std::hash<std::pmr::u32string>
   std::hash<std::pmr::wstring>   hash support for strings
   \fI(C++11)\fP                        \fI(class template specialization)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   \fI(C++11)\fP
   (C++20)
   (C++20)
   (C++20)
   (C++20)

   Deduction guides\fI(since C++17)\fP

   Hidden category:

     * Pages with unreviewed LWG DR marker
