.TH std::unordered_multiset::erase 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::unordered_multiset::erase \- std::unordered_multiset::erase

.SH Synopsis
   iterator erase( const_iterator pos );                        \fB(1)\fP \fI(since C++11)\fP
   iterator erase( const_iterator first, const_iterator last ); \fB(2)\fP \fI(since C++11)\fP
   size_type erase( const key_type& key );                      \fB(3)\fP \fI(since C++11)\fP

   Removes specified elements from the container.

   1) Removes the element at pos.
   2) Removes the elements in the range [first; last), which must be a valid range in
   *this.
   3) Removes all elements with the key equivalent to key.

   References and iterators to the erased elements are invalidated. Other iterators and
   references are not invalidated.

   The iterator pos must be valid and dereferenceable. Thus the end() iterator (which
   is valid, but is not dereferencable) cannot be used as a value for pos.

   The order of the elements that are not erased is preserved (this makes
   it possible to erase individual elements while iterating through the   \fI(since C++14)\fP
   container)

.SH Parameters

   pos         - iterator to the element to remove
   first, last - range of elements to remove
   key         - key value of the elements to remove

.SH Return value

   1-2) Iterator following the last removed element.
   3) Number of elements removed.

.SH Exceptions

   1,2) \fI(none)\fP
   3) Any exceptions thrown by the Compare object.

.SH Complexity

   Given an instance c of unordered_multiset:

   1) Average case: constant, worst case: c.size()
   2) Average case: std::distance(first, last), worst case: c.size()
   3) Average case: c.count(key), worst case: c.size()

.SH Example

   
// Run this code

 #include <unordered_set>
 #include <iostream>
 int main()
 {
     std::unordered_multiset<int> c = {1, 2, 3, 4, 5, 6, 7, 8, 9};
     // erase all odd numbers from c
     for(auto it = c.begin(); it != c.end(); )
         if(*it % 2 == 1)
             it = c.erase(it);
         else
             ++it;
     for(int n : c)
         std::cout << n << ' ';
 }

.SH Possible output:

 2 4 6 8

.SH See also

   clear clears the contents
         \fI(public member function)\fP 
