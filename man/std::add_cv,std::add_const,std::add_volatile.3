.TH std::add_cv,std::add_const,std::add_volatile 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::add_cv,std::add_const,std::add_volatile \- std::add_cv,std::add_const,std::add_volatile

.SH Synopsis
   Defined in header <type_traits>
   template< class T >             \fB(1)\fP \fI(since C++11)\fP
   struct add_cv;
   template< class T >             \fB(2)\fP \fI(since C++11)\fP
   struct add_const;
   template< class T >             \fB(3)\fP \fI(since C++11)\fP
   struct add_volatile;

   Provides the member typedef type which is the same as T, except it has a
   cv-qualifier added (unless T is a function, a reference, or already has this
   cv-qualifier)

   1) adds both const and volatile

   2) adds const

   3) adds volatile

.SH Member types

   Name Definition
   type the type T with the cv-qualifier

.SH Helper types

   template< class T >                                     \fI(since C++14)\fP
   using add_cv_t       = typename add_cv<T>::type;
   template< class T >                                     \fI(since C++14)\fP
   using add_const_t    = typename add_const<T>::type;
   template< class T >                                     \fI(since C++14)\fP
   using add_volatile_t = typename add_volatile<T>::type;

.SH Possible implementation

   template< class T >
   struct add_cv { typedef const volatile T type; };
    
   template< class T> struct add_const { typedef const T type; };
    
   template< class T> struct add_volatile { typedef volatile T type; };

.SH Example

   
// Run this code

 #include <iostream>
 #include <type_traits>
  
 struct foo
 {
     void m() { std::cout << "Non-cv\\n"; }
     void m() const { std::cout << "Const\\n"; }
 };
  
 template <class T>
 void call_m()
 {
     T().m();
 }
  
 int main()
 {
     call_m<foo>();
     call_m<std::add_const<foo>::type>();
 }

.SH Output:

 Non-cv
 Const

.SH See also

   is_const        checks if a type is const-qualified
   \fI(C++11)\fP         \fI(class template)\fP 
   is_volatile     checks if a type is volatile-qualified
   \fI(C++11)\fP         \fI(class template)\fP 
   remove_cv
   remove_const
   remove_volatile removes const or/and volatile specifiers from the given type
   \fI(C++11)\fP         \fI(class template)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   as_const        obtains a reference to const to its argument
   \fI(C++17)\fP         \fI(function template)\fP 
