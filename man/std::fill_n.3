.TH std::fill_n 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::fill_n \- std::fill_n

.SH Synopsis
   Defined in header <algorithm>
   template< class OutputIt, class Size, class T >                        \fI(until C++11)\fP
   void fill_n( OutputIt first, Size count, const T& value );
   template< class OutputIt, class Size, class T >                        \fI(since C++11)\fP
   OutputIt fill_n( OutputIt first, Size count, const T& value );         (until C++20)
   template< class OutputIt, class Size, class T >
   constexpr OutputIt fill_n( OutputIt first, Size count, const   \fB(1)\fP     (since C++20)
   T& value );
   template< class ExecutionPolicy, class ForwardIt, class Size,
   class T >                                                          \fB(2)\fP \fI(since C++17)\fP
   ForwardIt fill_n( ExecutionPolicy&& policy, ForwardIt first,
   Size count, const T& value );

   1) Assigns the given value to the first count elements in the range beginning at
   first if count > 0. Does nothing otherwise.
   2) Same as \fB(1)\fP, but executed according to policy. This overload only participates in
   overload resolution if std::is_execution_policy_v<std::decay_t<ExecutionPolicy>> is
   true

.SH Parameters

   first  - the beginning of the range of elements to modify
   count  - number of elements to modify
   value  - the value to be assigned
   policy - the execution policy to use. See execution policy for details.
.SH Type requirements
   -
   OutputIt must meet the requirements of OutputIterator.
   -
   ForwardIt must meet the requirements of ForwardIterator.

.SH Return value

   \fI(none)\fP                                                                 \fI(until C++11)\fP
   Iterator one past the last element assigned if count > 0, first        \fI(since C++11)\fP
   otherwise.

.SH Complexity

   Exactly count assignments, for count > 0.

.SH Exceptions

   The overload with a template parameter named ExecutionPolicy reports errors as
   follows:

     * If execution of a function invoked as part of the algorithm throws an exception
       and ExecutionPolicy is one of the three standard policies, std::terminate is
       called. For any other ExecutionPolicy, the behavior is implementation-defined.
     * If the algorithm fails to allocate memory, std::bad_alloc is thrown.

.SH Possible implementation

   template<class OutputIt, class Size, class T>
   OutputIt fill_n(OutputIt first, Size count, const T& value)
   {
       for (Size i = 0; i < count; i++) {
           *first++ = value;
       }
       return first;
   }

.SH Example

   The following code uses fill_n() to assign -1 to the first half of a vector of
   integers:

   
// Run this code

 #include <algorithm>
 #include <vector>
 #include <iostream>
 #include <iterator>
  
 int main()
 {
     std::vector<int> v1{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
  
     std::fill_n(v1.begin(), 5, -1);
  
     std::copy(begin(v1), end(v1), std::ostream_iterator<int>(std::cout, " "));
     std::cout << "\\n";
 }

.SH Output:

 -1 -1 -1 -1 -1 5 6 7 8 9

.SH See also

   fill copy-assigns the given value to every element in a range
        \fI(function template)\fP 
