.TH std::vprintf,std::vfprintf,std::vsprintf,std::vsnprintf 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::vprintf,std::vfprintf,std::vsprintf,std::vsnprintf \- std::vprintf,std::vfprintf,std::vsprintf,std::vsnprintf

.SH Synopsis
   Defined in header <cstdio>
   int vprintf( const char* format, va_list vlist );                  \fB(1)\fP
   int vfprintf( std::FILE* stream, const char* format, va_list vlist \fB(2)\fP
   );
   int vsprintf( char* buffer, const char* format, va_list vlist );   \fB(3)\fP
   int vsnprintf( char* buffer, std::size_t buf_size, const char*     \fB(4)\fP \fI(since C++11)\fP
   format, va_list vlist );

   Loads the data from the locations, defined by vlist, converts them to character
   string equivalents and writes the results to a variety of sinks.

   1) Writes the results to stdout.
   2) Writes the results to a file stream stream.
   3) Writes the results to a character string buffer.
   4) Writes the results to a character string buffer. At most buf_size characters are
   written. The resulting character string will be terminated with a null character,
   unless buf_size is zero. If buf_size is zero, nothing is written and buffer may be a
   null pointer, however the return value (number of bytes that would be written) is
   still calculated and returned.

.SH Parameters

stream   - output file stream to write to
buffer   - pointer to a character string to write to
buf_size - maximum number of characters to write
           pointer to a null-terminated character string specifying how to interpret the data.

           The format string consists of ordinary multibyte characters (except %), which are copied unchanged into the
           output stream, and conversion specifications. Each conversion specification has the following format:

                 * introductory % character

                 * (optional) one or more flags that modify the behavior of the conversion:

                         * -: the result of the conversion is left-justified within the field (by default it is
                           right-justified)
                         * +: the sign of signed conversions is always prepended to the result of the conversion (by
                           default the result is preceded by minus only when it is negative)
                         * space: if the result of a signed conversion does not start with a sign character, or is
                           empty, space is prepended to the result. It is ignored if + flag is present.
                         * # : alternative form of the conversion is performed. See the table below for exact effects
                           otherwise the behavior is undefined.
                         * 0 : for integer and floating point number conversions, leading zeros are used to pad the
                           field instead of space characters. For integer numbers it is ignored if the precision is
                           explicitly specified. For other conversions using this flag results in undefined behavior. It
                           is ignored if - flag is present.

                 * (optional) integer value or * that specifies minimum field width. The result is padded with space
                   characters (by default), if required, on the left when right-justified, or on the right if
                   left-justified. In the case when * is used, the width is specified by an additional argument of type
                   int. If the value of the argument is negative, it results with the - flag specified and positive
                   field width. (Note: This is the minimum width: The value is never truncated.)

                 * (optional) . followed by integer number or *, or neither that specifies precision of the conversion.
                   In the case when * is used, the precision is specified by an additional argument of type int. If the
                   value of this argument is negative, it is ignored. If neither a number nor * is used, the precision
                   is taken as zero. See the table below for exact effects of precision.

                 * (optional) length modifier that specifies the size of the argument

                 * conversion format specifier

           The following format specifiers are available:

           Conversion    Explanation                                     Argument type
           specifier
                                           hh                                  ll        j        z        t
                 length modifier                    h      \fI(none)\fP     l                                             L
                                        \fI(C++11)\fP                             (C++11)   (C++11)  (C++11)  (C++11)
                      writes literal %.
                      The full
               %      conversion        N/A      N/A      N/A      N/A      N/A      N/A       N/A     N/A        N/A
                      specification
                      must be %%.
                         writes a
                         single
                         character.

                      The argument is
                      first converted
                      to unsigned char.
               c      If the l modifier N/A      N/A      int      wint_t   N/A      N/A       N/A     N/A        N/A
                      is used, the
                      argument is first
                      converted to a
                      character string
                      as if by %ls with
                      a wchar_t[2]
                      argument.
                         writes a
                         character
                         string

                      The argument must
                      be a pointer to
                      the initial
                      element of an
                      array of
                      characters.
                      Precision
                      specifies the
                      maximum number of
                      bytes to be
                      written. If
                      Precision is not
               s      specified, writes N/A      N/A      char*    wchar_t* N/A      N/A       N/A     N/A        N/A
                      every byte up to
                      and not including
                      the first null
                      terminator. If
                      the l specifier
                      is used, the
                      argument must be
                      a pointer to the
                      initial element
                      of an array of
                      wchar_t, which is
                      converted to char
                      array as if by a
                      call to wcrtomb
                      with
                      zero-initialized
                      conversion state.
                         converts a
                         signed integer
                         into decimal
                         representation
                         [-]dddd.

                      Precision
                      specifies the
               d      minimum number of signed                              long               signed
               i      digits to appear. char     short    int      long     long     intmax_t  size_t  ptrdiff_t  N/A
                      The default
                      precision is 1.
                      If both the
                      converted value
                      and the precision
                      are 0 the
                      conversion
                      results in no
                      characters.
                         converts a
                         unsigned
                         integer into
                         octal
                         representation
                         oooo.

                      Precision
                      specifies the
                      minimum number of
                      digits to appear.
                      The default
                      precision is 1.
                      If both the
                      converted value
               o      and the precision                                                                           N/A
                      are 0 the
                      conversion
                      results in no
                      characters. In
                      the alternative
                      implementation
                      precision is
                      increased if
                      necessary, to
                      write one leading
                      zero. In that
                      case if both the
                      converted value
                      and the precision
                      are 0, single
                      0 is written.
                         converts an
                         unsigned
                         integer into
                         hexadecimal
                         representation
                         hhhh.

                      For the x
                      conversion
                      letters abcdef                                        unsigned                   unsigned
                      are used.         unsigned unsigned unsigned unsigned long     uintmax_t size_t  version of
                      For the X         char     short    int      long     long                       ptrdiff_t
                      conversion
                      letters ABCDEF
                      are used.
                      Precision
               x      specifies the                                                                               N/A
               X      minimum number of
                      digits to appear.
                      The default
                      precision is 1.
                      If both the
                      converted value
                      and the precision
                      are 0 the
                      conversion
                      results in no
                      characters. In
                      the alternative
                      implementation 0x
                      or 0X is prefixed
                      to results if the
                      converted value
                      is nonzero.
                         converts an
                         unsigned
                         integer into
                         decimal
                         representation
                         dddd.

                      Precision
                      specifies the
               u      minimum number of                                                                           N/A
                      digits to appear.
                      The default
                      precision is 1.
                      If both the
                      converted value
                      and the precision
                      are 0 the
                      conversion
                      results in no
                      characters.
                         converts
                         floating-point
                         number to the
                         decimal
                         notation in
                         the style
                         [-]ddd.ddd.

                      Precision
format   -            specifies the
                      minimum number of
                      digits to appear
               f      after the decimal
               F      point character.  N/A      N/A                        N/A      N/A       N/A     N/A
                      The default
                      precision is 6.
                      In the
                      alternative
                      implementation
                      decimal point
                      character is
                      written even if
                      no digits follow
                      it. For infinity
                      and not-a-number
                      conversion style
                      see notes.
                         converts
                         floating-point
                         number to the
                         decimal
                         exponent
                         notation.

                      For the e
                      conversion style
                      [-]d.ddde±dd is
                      used.
                      For the E
                      conversion style
                      [-]d.dddE±dd is
                      used.
                      The exponent
                      contains at least
                      two digits, more
                      digits are used
                      only if
               e      necessary. If the N/A      N/A                        N/A      N/A       N/A     N/A
               E      value is 0, the
                      exponent is also
                      0. Precision
                      specifies the
                      minimum number of
                      digits to appear
                      after the decimal
                      point character.
                      The default
                      precision is 6.
                      In the
                      alternative
                      implementation
                      decimal point
                      character is
                      written even if
                      no digits follow
                      it. For infinity
                      and not-a-number
                      conversion style
                      see notes.
                         converts
                         floating-point
                         number to the
                         hexadecimal
                         exponent
                         notation.

                      For the a
                      conversion style
                      [-]0xh.hhhp±d is
                      used.
                      For the A
                      conversion style
                      [-]0Xh.hhhP±d is
                      used.
                      The first
                      hexadecimal digit
                      is 0 if the
                      argument is not a
                      normalized                          double   double                                         long
                      floating point                               \fI(C++11)\fP                                        double
               a      value. If the
               A      value is 0, the N/A      N/A                        N/A      N/A       N/A     N/A
                      exponent is also
            \fI(C++11)\fP   0. Precision
                      specifies the
                      minimum number of
                      digits to appear
                      after the decimal
                      point character.
                      The default
                      precision is
                      sufficient for
                      exact
                      representation of
                      the value. In the
                      alternative
                      implementation
                      decimal point
                      character is
                      written even if
                      no digits follow
                      it. For infinity
                      and not-a-number
                      conversion style
                      see notes.
                         converts
                         floating-point
                         number to
                         decimal or
                         decimal
                         exponent
                         notation
                         depending on
                         the value and
                         the precision.

                      For the g
                      conversion style
                      conversion with
                      style e or f will
                      be performed.
                      For the G
                      conversion style
                      conversion with
                      style E or F will
                      be performed.
                      Let P equal the
                      precision if
                      nonzero, 6 if the
                      precision is not
                      specified, or 1
                      if the precision
                      is 0. Then, if
                      a conversion with
                      style E would
               g      have an exponent
               G      of X:             N/A      N/A                        N/A      N/A       N/A     N/A

                        * if P > X ≥
                          −4, the
                          conversion is
                          with style f
                          or F and
                          precision P −
                          1 − X.
                        * otherwise,
                          the
                          conversion is
                          with style e
                          or E and
                          precision P −
                          1.

                      Unless
                      alternative
                      representation is
                      requested the
                      trailing zeros
                      are removed, also
                      the decimal point
                      character is
                      removed if no
                      fractional part
                      is left. For
                      infinity and
                      not-a-number
                      conversion style
                      see notes.
                         returns the
                         number of
                         characters
                         written so far
                         by this call
                         to the
                         function.
                                        signed                              long               signed
               n      The result is     char*    short*   int*     long*    long*    intmax_t* size_t* ptrdiff_t* N/A
                      written to the
                      value pointed to
                      by the argument.
                      The specification
                      may not contain
                      any flag, field
                      width, or
                      precision.
                      writes an
                      implementation
               p      defined character N/A      N/A      void*    N/A      N/A      N/A       N/A     N/A        N/A
                      sequence defining
                      a pointer.

           The floating point conversion functions convert infinity to inf or infinity. Which one is used is
           implementation defined.

           Not-a-number is converted to nan or nan(char_sequence). Which one is used is implementation defined.

           The conversions F, E, G, A output INF, INFINITY, NAN instead.

           Even though %c expects int argument, it is safe to pass a char because of the integer promotion that takes
           place when a variadic function is called.

           The correct conversion specifications for the fixed-width character types (int8_t, etc) are defined in the
           header <cinttypes> (although PRIdMAX, PRIuMAX, etc is synonymous with %jd, %ju, etc).

           The memory-writing conversion specifier %n is a common target of security exploits where format strings
           depend on user input and is not supported by the bounds-checked printf_s family of functions.

           There is a sequence point after the action of each conversion specifier; this permits storing multiple %n
           results in the same variable or, as an edge case, printing a string modified by an earlier %n within the same
           call.

           If a conversion specification is invalid, the behavior is undefined.
vlist    - variable argument list containing the data to print

.SH Return value

   1-3) Number of characters written if successful or negative value if an error
   occurred.
   4) Number of characters written if successful or negative value if an error
   occurred. If the resulting string gets truncated due to buf_size limit, function
   returns the total number of characters (not including the terminating null-byte)
   which would have been written, if the limit was not imposed.

.SH Notes

   All these functions invoke va_arg at least once, the value of arg is indeterminate
   after the return. These functions do not invoke va_end, and it must be done by the
   caller.

.SH Example

   
// Run this code

 #include <vector>
 #include <cstdio>
 #include <cstdarg>
 #include <ctime>
  
 void debug_log(const char *fmt, ...)
 {
     std::time_t t = std::time(nullptr);
     char time_buf[100];
     std::strftime(time_buf, sizeof time_buf, "%D %T", std::gmtime(&t));
     va_list args1;
     va_start(args1, fmt);
     va_list args2;
     va_copy(args2, args1);
     std::vector<char> buf(1+std::vsnprintf(NULL, 0, fmt, args1));
     va_end(args1);
     std::vsnprintf(buf.data(), buf.size(), fmt, args2);
     va_end(args2);
     std::printf("%s [debug]: %s\\n", time_buf, buf.data());
 }
  
 int main()
 {
     debug_log("Logging, %d, %d, %d", 1, 2, 3);
 }

.SH Output:

 04/13/15 15:09:18 [debug]: Logging, 1, 2, 3

.SH See also

   printf
   fprintf  prints formatted output to stdout, a file stream or a buffer
   sprintf  \fI(function)\fP 
   snprintf
   \fI(C++11)\fP
   vscanf
   vfscanf  reads formatted input from stdin, a file stream or a buffer
   vsscanf  using variable argument list
   \fI(C++11)\fP  \fI(function)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   C documentation for
   vprintf,
   vfprintf,
   vsprintf,
   vsnprintf
