.TH std::copysign 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::copysign \- std::copysign

.SH Synopsis
   Defined in header <cmath>
   float       copysign( float x, float y );             \fB(1)\fP \fI(since C++11)\fP
   double      copysign( double x, double y );           \fB(2)\fP \fI(since C++11)\fP
   long double copysign( long double x, long double y ); \fB(3)\fP \fI(since C++11)\fP
   Promoted    copysign( Arithmetic1 x, Arithmetic2 y ); \fB(4)\fP \fI(since C++11)\fP

   1-3) Composes a floating point value with the magnitude of x and the sign of y.
   4) A set of overloads or a function template for all combinations of arguments of
   arithmetic type not covered by (1-3). If any argument has integral type, it is cast
   to double. If any argument is long double, then the return type Promoted is also
   long double, otherwise the return type is always double.

.SH Parameters

   x, y - floating point values

.SH Return value

   If no errors occur, the floating point value with the magnitude of x and the sign of
   y is returned.

   If x is NaN, then NaN with the sign of y is returned.

   If y is -0, the result is only negative if the implementation supports the signed
   zero consistently in arithmetic operations.

.SH Error handling

   This function is not subject to any errors specified in math_errhandling

   If the implementation supports IEEE floating-point arithmetic (IEC 60559),

     * The returned value is exact (FE_INEXACT is never raised) and independent of the
       current rounding mode.

.SH Notes

   std::copysign is the only portable way to manipulate the sign of a NaN value (to
   examine the sign of a NaN, signbit may also be used)

.SH Example

   
// Run this code

 #include <iostream>
 #include <cmath>
  
 int main(void)
 {
     std::cout << "copysign(1.0,+2.0) = " << std::copysign(1.0,+2.0) << '\\n'
               << "copysign(1.0,-2.0) = " << std::copysign(1.0,-2.0) << '\\n'
               << "copysign(inf,-2.0) = " << std::copysign(INFINITY,-2.0) << '\\n'
               << "copysign(NaN,-2.0) = " << std::copysign(NAN,-2.0) << '\\n';
 }

.SH Output:

 copysign(1.0,+2.0) = 1
 copysign(1.0,-2.0) = -1
 copysign(inf,-2.0) = -inf
 copysign(NaN,-2.0) = -nan

.SH See also

   abs(float) absolute value of a floating point value (|x|)
   fabs       \fI(function)\fP 
   signbit    checks if the given number is negative
   \fI(C++11)\fP    \fI(function)\fP 
   C documentation for
   copysign
