.TH std::uses_allocator 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::uses_allocator \- std::uses_allocator

.SH Synopsis
   Defined in header <memory>
   template< class T, class Alloc > struct uses_allocator;  \fI(since C++11)\fP

   If T has a member typedef allocator_type which is convertible from Alloc
   or is an alias of std::experimental::erased_type
   (library fundamentals TS), the member constant value is true. Otherwise value is
   false.

.SH Member constants

   value    true if T uses allocator Alloc, false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP
   operator()    returns value
   \fI(C++14)\fP       \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Specializations

   Custom specializations of the type trait std::uses_allocator are allowed for types
   that do not have the member typedef allocator_type but satisfy one of the following
   two requirements:

   1) T has a constructor which takes std::allocator_arg_t as the first argument, and
   Alloc as the second argument.
   2) T has a constructor which takes Alloc as the last argument.

   In the above, Alloc is a type that satisfies Allocator
   or is a pointer type convertible to std::experimental::pmr::memory_resource*
   (library fundamentals TS).

   The following specializations are already provided by the standard library:

   std::uses_allocator<std::tuple>          specializes the std::uses_allocator type
   \fI(C++11)\fP                                  trait
                                            \fI(class template specialization)\fP 
   std::uses_allocator<std::queue>          specializes the std::uses_allocator type
   \fI(C++11)\fP                                  trait
                                            \fI(function template)\fP 
   std::uses_allocator<std::priority_queue> specializes the std::uses_allocator type
   \fI(C++11)\fP                                  trait
                                            \fI(function template)\fP 
   std::uses_allocator<std::stack>          specializes the std::uses_allocator type
   \fI(C++11)\fP                                  trait
                                            \fI(function template)\fP 
   std::uses_allocator<std::function>       specializes the std::uses_allocator type
   \fI(C++11)\fP \fI(until C++17)\fP                    trait
                                            \fI(class template specialization)\fP 
   std::uses_allocator<std::promise>        specializes the std::uses_allocator type
   \fI(C++11)\fP                                  trait
                                            \fI(class template specialization)\fP 
   std::uses_allocator<std::packaged_task>  specializes the std::uses_allocator type
   \fI(C++11)\fP\fI(until C++17)\fP                     trait
                                            \fI(class template specialization)\fP 

.SH Notes

   This type trait is used by std::scoped_allocator_adaptor, std::tuple, std::variant,
   and std::pmr::polymorphic_allocator. It may also be used by custom allocators or
   wrapper types to determine whether the object or member being constructed is itself
   capable of using an allocator (e.g. is a container), in which case an allocator
   should be passed to its constructor.

.SH See also

   allocator_arg            an object of type std::allocator_arg_t used to select
   \fI(C++11)\fP                  allocator-aware constructors
                            (constant) 
   allocator_arg_t          tag type used to select allocator-aware constructor
   \fI(C++11)\fP                  overloads
                            \fI(class)\fP 
   scoped_allocator_adaptor implements multi-level allocator for multi-level containers
   \fI(C++11)\fP                  \fI(class template)\fP 
