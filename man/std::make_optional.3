.TH std::make_optional 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::make_optional \- std::make_optional

.SH Synopsis
   Defined in header <optional>
   template< class T >
   constexpr std::optional<std::decay_t<T>> make_optional( T&& value  \fB(1)\fP \fI(since C++17)\fP
   );
   template< class T, class... Args >                                 \fB(2)\fP \fI(since C++17)\fP
   constexpr std::optional<T> make_optional( Args&&... args );
   template< class T, class U, class... Args >
   constexpr std::optional<T> make_optional( std::initializer_list<U> \fB(3)\fP \fI(since C++17)\fP
   il, Args&&... args );

   1) Creates an optional object from value. Effectively calls
   std::optional<std::decay_t<T>>(std::forward<T>(value))
   2) Creates an optional object constructed in-place from args.... Equivalent to
   return std::optional<T>(std::in_place, std::forward<Args>(args)...);.
   3) Creates an optional object constructed in-place from il and args.... Equivalent
   to return std::optional<T>(std::in_place, il, std::forward<Args>(args)...);.

.SH Parameters

   value    - the value to construct optional object with
   il, args - arguments to be passed to the constructor of T.

.SH Return value

   The constructed optional object.

.SH Exceptions

   Throws any exception thrown by the constructor of T.

.SH Notes

   T need not be movable for overloads (2-3) due to guaranteed copy elision.

.SH See also

   constructor   constructs the optional object
                 \fI(public member function)\fP 
