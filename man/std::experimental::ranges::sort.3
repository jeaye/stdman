.TH std::experimental::ranges::sort 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::experimental::ranges::sort \- std::experimental::ranges::sort

.SH Synopsis
   Defined in header <experimental/ranges/algorithm>
   template< ranges::RandomAccessIterator I, ranges::Sentinel<I> S,

             class Comp = ranges::less<>, class Proj =
   ranges::identity>                                                    \fB(1)\fP (ranges TS)
     requires ranges::Sortable<I, Comp, Proj>

   I sort( I first, S last, Comp comp = Comp{}, Proj proj = Proj{} );
   template< ranges::RandomAccessRange Rng,

             class Comp = ranges::less<>, class Proj =
   ranges::identity>                                                    \fB(2)\fP (ranges TS)
     requires ranges::Sortable<ranges::iterator_t<Rng>, Comp, Proj>

   ranges::safe_iterator_t<Rng> sort( Rng&& rng, Comp comp = Comp{},
   Proj proj = Proj{} );

   1) Sorts the elements in the range [first, last) in ascending order. The order of
   equal elements is not guaranteed to be preserved. Elements are compared using comp
   after applying the projection proj.
   2) Sorts the elements in the range rng, as if by return
   ranges::sort(ranges::begin(rng), ranges::end(rng), comp, proj);

.SH Parameters

   first, last - the range of elements to sort
   rng         - the range of elements to sort
   comp        - the comparator to use
   proj        - the projection to apply to elements in the range

.SH Return value

   An iterator pointing past the end of the range (i.e., it compares equal to last for
   overload \fB(1)\fP, and ranges::end(rng) for overload \fB(2)\fP).

.SH Complexity

   O(NÂ·log(N)) comparisons, where N is equal to the number of elements in the range.

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

   sort sorts a range into ascending order
        \fI(function template)\fP 

.SH Category:

     * Todo no example
