.TH std::basic_fstream::open 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::basic_fstream::open \- std::basic_fstream::open

.SH Synopsis
   void open( const char *filename,                                   \fB(1)\fP
              ios_base::openmode mode = ios_base::in|ios_base::out );
   void open( const std::filesystem::path::value_type *filename,      \fB(2)\fP \fI(since C++17)\fP
              ios_base::openmode mode = ios_base::in|ios_base::out );
   void open( const std::string &filename,                          
                                                                      \fB(3)\fP \fI(since C++11)\fP
              ios_base::openmode mode = ios_base::in|ios_base::out );
   void open( const std::filesystem::path &filename,                
                                                                      \fB(4)\fP \fI(since C++17)\fP
              ios_base::openmode mode = ios_base::in|ios_base::out );

   Opens and associates the file with name filename with the file stream.

   Calls setstate(failbit) on failure.

   Calls clear() on success. \fI(since C++11)\fP

   1-2) Effectively calls rdbuf()->open(filename, mode). (see std::basic_filebuf::open
   for the details on the effects of that call).
   Overload \fB(2)\fP is only provided if std::filesystem::path::value_type is not char.
   \fI(since C++17)\fP
   3-4) Effectively calls (1-2) as if by open(filename.c_str(), mode).

.SH Parameters

   filename - the name of the file to be opened
              specifies stream open mode. It is bitmask type, the following constants
              are defined:

              Constant Explanation
   mode     - app      seek to the end of stream before each write
              binary   open in binary mode
              in       open for reading
              out      open for writing
              trunc    discard the contents of the stream when opening
              ate      seek to the end of stream immediately after open

.SH Return value

   \fI(none)\fP

.SH Example

   
// Run this code

 #include <string>
 #include <fstream>
 #include <iostream>
  
 int main()
 {
     std::string filename = "example.123";
  
     std::fstream fs;
  
     fs.open(filename);
  
     if(!fs.is_open())
     {
        fs.clear();
        fs.open(filename, std::ios::out); //Create file.
        fs.close();
        fs.open(filename);
     }
  
     std::cout << std::boolalpha;
     std::cout << "fs.is_open() = " << fs.is_open() << '\\n';
     std::cout << "fs.good() = " << fs.good() << '\\n';
 }

.SH See also

   is_open checks if the stream has an associated file
           \fI(public member function)\fP 
   close   closes the associated file
           \fI(public member function)\fP 
   open    opens a file and configures it as the associated character sequence
           \fI(public member function of std::basic_filebuf)\fP 
