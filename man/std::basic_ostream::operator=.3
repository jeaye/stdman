.TH std::basic_ostream::operator= 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::basic_ostream::operator= \- std::basic_ostream::operator=

.SH Synopsis
   protected:                                                     \fB(1)\fP
   basic_ostream& operator=( const basic_ostream& rhs ) = delete;
   protected:                                                     \fB(2)\fP \fI(since C++11)\fP
   basic_ostream& operator=( basic_ostream&& rhs );

   1) The copy assignment operator is protected, and is deleted. Output streams are not
   CopyAssignable.

   2) The move assignment operator exchanges all data members of the base class, except
   for rdbuf(), with rhs, as if by calling swap(*rhs). This move assignment operator is
   protected: it is only called by the move assignment operators of the derived movable
   output stream classes std::basic_ofstream and std::basic_ostringstream, which know
   how to correctly move-assign the associated streambuffers.

.SH Parameters

   rhs - the basic_ostream object from which to assign to *this

.SH Example

   
// Run this code

 #include <sstream>
 #include <utility>
 #include <iostream>
 int main()
 {
     std::ostringstream s;
 //  std::cout = s;                             // ERROR: copy assignment operator is deleted
 //  std::cout = std::move(s);                  // ERROR: move assignment operator is protected
     s = std::move(std::ostringstream() << 42); // OK, moved through derived
     std::cout << s.str() << '\\n';
 }

.SH Output:

 42
