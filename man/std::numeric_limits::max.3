.TH std::numeric_limits::max 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::numeric_limits::max \- std::numeric_limits::max

.SH Synopsis
   Defined in header <limits>
   static T max();             \fI(until C++11)\fP
   static constexpr T max();   \fI(since C++11)\fP

   Returns the maximum finite value representable by the numeric type T. Meaningful for
   all bounded types.

.SH Return value

   T                     std::numeric_limits<T>::max()
   /* non-specialized */ T();
   bool                  true
   char                  CHAR_MAX
   signed char           SCHAR_MAX
   unsigned char         UCHAR_MAX
   wchar_t               WCHAR_MAX
   char16_t              UINT_LEAST16_MAX
   char32_t              UINT_LEAST32_MAX
   short                 SHRT_MAX
   unsigned short        USHRT_MAX
   int                   INT_MAX
   unsigned int          UINT_MAX
   long                  LONG_MAX
   unsigned long         ULONG_MAX
   long long             LLONG_MAX
   unsigned long long    ULLONG_MAX
   float                 FLT_MAX
   double                DBL_MAX
   long double           LDBL_MAX

.SH Exceptions

   \fI(none)\fP                    \fI(until C++11)\fP
   noexcept specification:  
   noexcept                  \fI(since C++11)\fP
     

.SH Example

   Demonstrates the use of max() with some fundamental types and some standard library
   typedefs (the output is system-specific)

   
// Run this code

 #include <limits>
 #include <cstddef>
 #include <iostream>
 int main()
 {
     std::cout << "short: " << std::dec << std::numeric_limits<short>::max()
               << " or " << std::hex << std::showbase << std::numeric_limits<short>::max() << '\\n'
               << "int: " << std::dec << std::numeric_limits<int>::max()
               << " or " << std::hex << std::numeric_limits<int>::max() << '\\n' << std::dec
               << "streamsize: " << std::dec << std::numeric_limits<std::streamsize>::max()
               << " or " << std::hex << std::numeric_limits<std::streamsize>::max() << '\\n'
               << "size_t: " << std::dec << std::numeric_limits<std::size_t>::max()
               << " or " << std::hex << std::numeric_limits<std::size_t>::max() << '\\n'
               << "float: " << std::numeric_limits<float>::max()
               << " or " << std::hexfloat << std::numeric_limits<float>::max() << '\\n'
               << "double: " << std::defaultfloat << std::numeric_limits<double>::max()
               << " or " << std::hexfloat << std::numeric_limits<double>::max() << '\\n';
 }

.SH Output:

 short: 32767 or 0x7fff
 int: 2147483647 or 0x7fffffff
 size_t: 18446744073709551615 or 0xffffffffffffffff
 streamsize: 9223372036854775807 or 0x7fffffffffffffff
 float: 3.40282e+38 or 0x1.fffffep+127
 double: 1.79769e+308 or 0x1.fffffffffffffp+1023

.SH See also

   lowest           returns the lowest finite value of the given type
   \fB[static]\fP \fI(C++11)\fP \fI(public static member function)\fP 
   min              returns the smallest finite value of the given type
   \fB[static]\fP         \fI(public static member function)\fP 

.SH Category:

     * unconditionally noexcept

   Hidden categories:

     * Pages with unreviewed unconditional noexcept template
     * Pages with unreviewed noexcept template
