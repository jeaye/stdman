.TH std::list::unique 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::list::unique \- std::list::unique

.SH Synopsis
   void unique();                    \fB(1)\fP
   template< class BinaryPredicate > \fB(2)\fP
   void unique( BinaryPredicate p );

   Removes all consecutive duplicate elements from the container. Only the first
   element in each group of equal elements is left. The first version uses operator==
   to compare the elements, the second version uses the given binary predicate p.

.SH Parameters

       binary predicate which returns true if the elements should be treated as equal.

       The signature of the predicate function should be equivalent to the following:

        bool pred(const Type1 &a, const Type2 &b);
   p -
       The signature does not need to have const &, but the function must not modify
       the objects passed to it.
       The types Type1 and Type2 must be such that an object of type
       list<T,Allocator>::const_iterator can be dereferenced and then implicitly
       converted to both of them. 

.SH Return value

   \fI(none)\fP

.SH Complexity

   Linear in the size of the container

.SH Example

   
// Run this code

 #include <iostream>
 #include <list>
  
 int main()
 {
   std::list<int> x = {1, 2, 2, 3, 3, 2, 1, 1, 2};
  
   std::cout << "contents before:";
   for (auto val : x)
     std::cout << ' ' << val;
   std::cout << '\\n';
  
   x.unique();
   std::cout << "contents after unique():";
   for (auto val : x)
     std::cout << ' ' << val;
   std::cout << '\\n';
  
   return 0;
 }

.SH Output:

 contents before: 1 2 2 3 3 2 1 1 2
 contents after unique(): 1 2 3 2 1 2

.SH See also

   unique removes consecutive duplicate elements in a range
          \fI(function template)\fP 
