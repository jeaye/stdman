.TH std::recursive_timed_mutex::unlock 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::recursive_timed_mutex::unlock \- std::recursive_timed_mutex::unlock

.SH Synopsis
   void unlock();  \fI(since C++11)\fP

   Unlocks the mutex if its level of ownership is 1 (there was exactly one more call to
   lock() than there were calls to unlock() made by this thread), reduces the level of
   ownership by 1 otherwise.

   The mutex must be locked by the current thread of execution, otherwise, the behavior
   is undefined.

   This operation synchronizes-with (as defined in std::memory_order) any subsequent
   lock operation that obtains ownership of the same mutex.

.SH Parameters

   \fI(none)\fP

.SH Return value

   \fI(none)\fP

.SH Exceptions

   \fI(none)\fP

.SH Notes

   unlock() is usually not called directly: std::unique_lock and std::lock_guard are
   used to manage exclusive locking.

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

   lock           locks the mutex, blocks if the mutex is not available
                  \fI(public member function)\fP 
   try_lock       tries to lock the mutex, returns if the mutex is not available
                  \fI(public member function)\fP 
                  tries to lock the mutex, returns if the mutex has been
   try_lock_for   unavailable for the specified timeout duration
                  \fI(public member function)\fP 
                  tries to lock the mutex, returns if the mutex has been
   try_lock_until unavailable until specified time point has been reached
                  \fI(public member function)\fP 
   C documentation for
   mtx_unlock

.SH Category:

     * Todo no example
