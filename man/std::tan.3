.TH std::tan 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::tan \- std::tan

.SH Synopsis
   Defined in header <cmath>
   float       tan( float arg );       \fB(1)\fP
   double      tan( double arg );      \fB(2)\fP
   long double tan( long double arg ); \fB(3)\fP
   double      tan( Integral arg );    \fB(4)\fP \fI(since C++11)\fP

   Computes the tangent of arg (measured in radians).

   4) A set of overloads or a function template accepting an argument of any integral
   type. Equivalent to 2) (the argument is cast to double).

.SH Parameters

   arg - value representing angle in radians, of a floating-point or Integral type

.SH Return value

   If no errors occur, the tangent of arg (tan(arg)) is returned.

   The result may have little or no significance if the magnitude of arg  \fI(until C++11)\fP
   is large

   If a domain error occurs, an implementation-defined value is returned (NaN where
   supported)

   If a range error occurs due to underflow, the correct result (after rounding) is
   returned.

.SH Error handling

   Errors are reported as specified in math_errhandling

   If the implementation supports IEEE floating-point arithmetic (IEC 60559),

     * if the argument is ±0, it is returned unmodified
     * if the argument is ±∞, NaN is returned and FE_INVALID is raised
     * if the argument is NaN, NaN is returned

.SH Notes

   The case where the argument is infinite is not specified to be a domain error in C
   (to which C++ defers), but it is defined as a domain error in POSIX

   The function has mathematical poles at π(1/2 + n); however no common floating-point
   representation is able to represent π/2 exactly, thus there is no value of the
   argument for which a pole error occurs.

.SH Example

   
// Run this code

 #include <iostream>
 #include <cmath>
 #include <cerrno>
 #include <cfenv>
  
 #pragma STDC FENV_ACCESS ON
 const double pi = std::acos(-1);
 int main()
 {
     // typical usage
     std::cout << "tan  (pi/4) = " << std::tan(  pi/4) << '\\n' // 45 deg.
               << "tan(3*pi/4) = " << std::tan(3*pi/4) << '\\n' // 135 deg
               << "tan(5*pi/4) = " << std::tan(5*pi/4) << '\\n' // -135 deg
               << "tan(7*pi/4) = " << std::tan(7*pi/4) << '\\n'; // -45 deg
     // special values
     std::cout << "tan(+0) = " << std::tan(0.0) << '\\n'
               << "tan(-0) = " << std::tan(-0.0) << '\\n';
     // error handling
     std::feclearexcept(FE_ALL_EXCEPT);
     std::cout << "tan(INFINITY) = " << std::tan(INFINITY) << '\\n';
     if(std::fetestexcept(FE_INVALID)) std::cout << "    FE_INVALID raised\\n";
 }

.SH Possible output:

 tan  (pi/4) = 1
 tan(3*pi/4) = -1
 tan(5*pi/4) = 1
 tan(7*pi/4) = -1
 tan(+0) = 0
 tan(-0) = -0
 tan(INFINITY) = -nan
     FE_INVALID raised

.SH See also

   sin                computes sine (sin(x))
                      \fI(function)\fP 
   cos                computes cosine (cos(x))
                      \fI(function)\fP 
   atan               computes arc tangent (arctan(x))
                      \fI(function)\fP 
   tan(std::complex)  computes tangent of a complex number (tan(z))
                      \fI(function template)\fP 
   tan(std::valarray) applies the function std::tan to each element of valarray
                      \fI(function template)\fP 
   C documentation for
   tan
