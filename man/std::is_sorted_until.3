.TH std::is_sorted_until 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_sorted_until \- std::is_sorted_until

.SH Synopsis
   Defined in header <algorithm>
   template< class ForwardIt >                              \fI(since C++11)\fP
   ForwardIt is_sorted_until( ForwardIt first,              \fI(until C++20)\fP
   ForwardIt last );
   template< class ForwardIt >
   constexpr ForwardIt is_sorted_until( ForwardIt           \fI(since C++20)\fP
   first, ForwardIt last );
   template< class ExecutionPolicy, class ForwardIt
   >                                                    \fB(2)\fP \fI(since C++17)\fP
   ForwardIt is_sorted_until( ExecutionPolicy&&
   policy, ForwardIt first, ForwardIt last );
   template< class ForwardIt, class Compare >

   ForwardIt is_sorted_until( ForwardIt first,                            \fI(since C++11)\fP
   ForwardIt last,                                                        \fI(until C++20)\fP
                                                    \fB(1)\fP
                              Compare comp );
   template< class ForwardIt, class Compare >

   constexpr ForwardIt is_sorted_until( ForwardIt
   first, ForwardIt last,                               \fB(3)\fP               \fI(since C++20)\fP

                                       Compare comp
   );
   template< class ExecutionPolicy, class
   ForwardIt, class Compare >

   ForwardIt is_sorted_until( ExecutionPolicy&&             \fB(4)\fP           \fI(since C++17)\fP
   policy, ForwardIt first, ForwardIt last,

                              Compare comp );

   Examines the range [first, last) and finds the largest range beginning at first in
   which the elements are sorted in ascending order.

   1) Elements are compared using operator<.
   3) Elements are compared using the given binary comparison function comp.
   2,4) Same as (1,3), but executed according to policy. These overloads do not
   participate in overload resolution unless
   std::is_execution_policy_v<std::decay_t<ExecutionPolicy>> is true

.SH Parameters

   first, last - the range of elements to examine
   policy      - the execution policy to use. See execution policy for details.
                 comparison function object (i.e. an object that satisfies the
                 requirements of Compare) which returns true if the first argument is
                 less than (i.e. is ordered before) the second.

                 The signature of the comparison function should be equivalent to the
                 following:
   comp        -
                  bool cmp(const Type1 &a, const Type2 &b);

                 The signature does not need to have const &, but the function object
                 must not modify the objects passed to it.
                 The types Type1 and Type2 must be such that an object of type
                 ForwardIt can be dereferenced and then implicitly converted to both of
                 them. 
.SH Type requirements
   -
   ForwardIt must meet the requirements of ForwardIterator.

.SH Return value

   The upper bound of the largest range beginning at first in which the elements are
   sorted in ascending order. That is, the last iterator it for which range [first, it)
   is sorted.

.SH Complexity

   linear in the distance between first and last

.SH Exceptions

   The overloads with a template parameter named ExecutionPolicy report errors as
   follows:

     * If execution of a function invoked as part of the algorithm throws an exception
       and ExecutionPolicy is one of the three standard policies, std::terminate is
       called. For any other ExecutionPolicy, the behavior is implementation-defined.
     * If the algorithm fails to allocate memory, std::bad_alloc is thrown.

.SH Possible implementation

.SH First version
   template<class ForwardIt>
   ForwardIt is_sorted_until(ForwardIt first, ForwardIt last)
   {
       if (first != last) {
           ForwardIt next = first;
           while (++next != last) {
               if (*next < *first)
                   return next;
               first = next;
           }
       }
       return last;
   }
.SH Second version
   template <class ForwardIt, class Compare>
   ForwardIt is_sorted_until(ForwardIt first, ForwardIt last, Compare comp)
   {
       using namespace std::placeholders;
       ForwardIt it = std::adjacent_find(first, last, std::bind(comp, _2, _1));
       return it == last ? last : std::next(it);
   }

.SH Example

   
// Run this code

 #include <iostream>
 #include <algorithm>
 #include <iterator>
 #include <random>
  
 int main()
 {
     std::random_device rd;
     std::mt19937 g(rd());
     const int N = 6;
     int nums[N] = {3, 1, 4, 1, 5, 9};
  
     const int min_sorted_size = 4;
     int sorted_size = 0;
     do {
         std::shuffle(nums, nums + N, g);
         int *sorted_end = std::is_sorted_until(nums, nums + N);
         sorted_size = std::distance(nums, sorted_end);
  
         for (auto i : nums) std::cout << i << ' ';
         std::cout << " : " << sorted_size << " initial sorted elements\\n";
     } while (sorted_size < min_sorted_size);
 }

.SH Possible output:

 4 1 9 5 1 3  : 1 initial sorted elements
 4 5 9 3 1 1  : 3 initial sorted elements
 9 3 1 4 5 1  : 1 initial sorted elements
 1 3 5 4 1 9  : 3 initial sorted elements
 5 9 1 1 3 4  : 2 initial sorted elements
 4 9 1 5 1 3  : 2 initial sorted elements
 1 1 4 9 5 3  : 4 initial sorted elements

.SH See also

   is_sorted checks whether a range is sorted into ascending order
   \fI(C++11)\fP   \fI(function template)\fP 
