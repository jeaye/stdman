.TH std::basic_string::begin,std::basic_string::cbegin 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::basic_string::begin,std::basic_string::cbegin \- std::basic_string::begin,std::basic_string::cbegin

.SH Synopsis
   iterator begin();
   const_iterator begin() const;
   const_iterator cbegin() const;  \fI(since C++11)\fP

   Returns an iterator to the first character of the string.

   begin() returns a mutable or constant iterator, depending on the constness of *this.

   cbegin() always returns a constant iterator. It is equivalent to const_cast<const
   basic_string&>(*this).begin().

   range-begin-end.svg

.SH Parameters

   \fI(none)\fP

.SH Return value

   iterator to the first character

.SH Exceptions

   \fI(none)\fP                    \fI(until C++11)\fP
   noexcept specification:  
   noexcept                  \fI(since C++11)\fP
     

.SH Complexity

   Constant

.SH Example

   
// Run this code

 #include <string>
 #include <iostream>
  
 int main()
 {
     std::string s("Exemplar");
     *s.begin() = 'e';
     std::cout << s <<'\\n';
  
     auto i = s.cbegin();
     std::cout << *i << '\\n';
 //  *i = 'E'; // error: i is a constant iterator
 }

.SH Output:

 exemplar
 e

.SH See also

   end     returns an iterator to the end
   cend    \fI(public member function)\fP 
   \fI(C++11)\fP

.SH Category:

     * unconditionally noexcept

   Hidden categories:

     * Pages with unreviewed unconditional noexcept template
     * Pages with unreviewed noexcept template
