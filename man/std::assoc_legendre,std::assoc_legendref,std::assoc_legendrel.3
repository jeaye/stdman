.TH std::assoc_legendre,std::assoc_legendref,std::assoc_legendrel 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::assoc_legendre,std::assoc_legendref,std::assoc_legendrel \- std::assoc_legendre,std::assoc_legendref,std::assoc_legendrel

.SH Synopsis
   double      assoc_legendre( unsigned int n, unsigned int m, double
   x );

   double      assoc_legendre( unsigned int n, unsigned int m, float
   x );
   double      assoc_legendre( unsigned int n, unsigned int m, long   \fB(1)\fP \fI(since C++17)\fP
   double x );
   float       assoc_legendref( unsigned int n, unsigned int m, float
   x );

   long double assoc_legendrel( unsigned int n, unsigned int m, long
   double x );
   double      assoc_legendre( unsigned int n, unsigned int m,        \fB(2)\fP \fI(since C++17)\fP
   Integral x );

   1) Computes the associated Legendre polynomials of the degree n, order m, and
   argument x
   4) A set of overloads or a function template accepting an argument of any integral
   type. Equivalent to \fB(1)\fP after casting the argument to double.

.SH Parameters

   n - the degree of the polynomial, a value of unsigned integer type
   m - the order of the polynomial, a value of unsigned integer type
   x - the argument, a value of a floating-point or integral type

.SH Return value

   If no errors occur, value of the associated Legendre polynomial \\(\\mathsf{P}_n^m\\)Pm
   n of x, that is \\((1 - x^2) ^ {m/2} \\: \\frac{ \\mathsf{d} ^ m}{ \\mathsf{d}x ^ m} \\,
   \\mathsf{P}_n(x)\\)(1-x2
   )m/2

   dm
   dxm

   P
   n(x), is returned (where \\(\\mathsf{P}_n(x)\\)P
   n(x) is the unassociated Legendre polynomial, std::legendre(n, x)).

   Note that the Condon-Shortley phase term \\((-1)^m\\)(-1)m
   is omitted from this definition.

.SH Error handling

   Errors may be reported as specified in math_errhandling

     * If the argument is NaN, NaN is returned and domain error is not reported
     * If |x| > 1, a domain error may occur
     * If n is greater or equal to 128, the behavior is implementation-defined.

.SH Notes

   Implementations that do not support C++17, but support ISO 29124:2010, provide this
   function if __STDCPP_MATH_SPEC_FUNCS__ is defined by the implementation to a value
   at least 201003L and if the user defines __STDCPP_WANT_MATH_SPEC_FUNCS__ before
   including any standard library headers.

   Implementations that do not support ISO 29124:2010 but support TR 19768:2007 (TR1),
   provide this function in the header tr1/cmath and namespace std::tr1

   An implementation of this function is also available in boost.math as
   boost::math::legendre_p, except that the boost.math definition includes the
   Condon-Shortley phase term.

   The first few associated Legendre polynomials are:

     * assoc_legendre(0, 0, x) = 1
     * assoc_legendre(1, 0, x) = x
     * assoc_legendre(1, 1, x) = (1-x2
       )1/2
     * assoc_legendre(2, 0, x) =

       1
       2

       (3x2
       -1)
     * assoc_legendre(2, 1, x) = 3x(1-x2
       )1/2
     * assoc_legendre(2, 2, x) = 3(1-x2
       )

.SH Example

   
// Run this code

 #include <cmath>
 #include <iostream>
 double P20(double x) { return 0.5*(3*x*x-1); }
 double P21(double x) { return 3.0*x*std::sqrt(1-x*x); }
 double P22(double x) { return 3*(1-x*x); }
 int main()
 {
     // spot-checks
     std::cout << std::assoc_legendre(2, 0, 0.5) << '=' << P20(0.5) << '\\n'
               << std::assoc_legendre(2, 1, 0.5) << '=' << P21(0.5) << '\\n'
               << std::assoc_legendre(2, 2, 0.5) << '=' << P22(0.5) << '\\n';
 }

.SH Output:

 -0.125=-0.125
 1.29904=1.29904
 2.25=2.25

.SH See also

   legendre
   legendref
   legendrel Legendre polynomials
   \fI(C++17)\fP   \fI(function)\fP 
   \fI(C++17)\fP
   \fI(C++17)\fP

.SH External links

   Weisstein, Eric W. "Associated Legendre Polynomial." From MathWorld--A Wolfram Web
   Resource.
