.TH std::numeric_limits::infinity 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::numeric_limits::infinity \- std::numeric_limits::infinity

.SH Synopsis
   static T infinity();            \fI(until C++11)\fP
   static constexpr T infinity();  \fI(since C++11)\fP

   Returns the special value "positive infinity", as represented by the floating-point
   type T. Only meaningful if std::numeric_limits<T>::has_infinity == true. In IEEE
   754, the most common binary representation of floating-point numbers, the positive
   infinity is the value with all bits of the exponent set and all bits of the fraction
   cleared.

.SH Return value

   T                     std::numeric_limits<T>::infinity()
   /* non-specialized */ T();
   bool                  false
   char                  0
   signed char           0
   unsigned char         0
   wchar_t               0
   char16_t              0
   char32_t              0
   short                 0
   unsigned short        0
   int                   0
   unsigned int          0
   long                  0
   unsigned long         0
   long long             0
   unsigned long long    0
   float                 HUGE_VALF
   double                HUGE_VAL
   long double           HUGE_VALL

.SH Exceptions

   \fI(none)\fP                    \fI(until C++11)\fP
   noexcept specification:  
   noexcept                  \fI(since C++11)\fP
     

.SH Example

   
// Run this code

 #include <iostream>
 #include <limits>
 int main()
 {
     double max = std::numeric_limits<double>::max();
     double inf = std::numeric_limits<double>::infinity();
  
     if(inf > max)
         std::cout << inf << " is greater than " << max << '\\n';
 }

.SH Output:

 inf is greater than 1.79769e+308

.SH See also

   has_infinity identifies floating-point types that can represent the special value
   \fB[static]\fP     "positive infinity"
                \fI(public static member constant)\fP 

.SH Category:

     * unconditionally noexcept

   Hidden categories:

     * Pages with unreviewed unconditional noexcept template
     * Pages with unreviewed noexcept template
