.TH std::is_sorted 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_sorted \- std::is_sorted

.SH Synopsis
   Defined in header <algorithm>
   template< class ForwardIt >                              \fI(since C++11)\fP
   bool is_sorted( ForwardIt first, ForwardIt last          \fI(until C++20)\fP
   );
   template< class ForwardIt >
   constexpr bool is_sorted( ForwardIt first,               \fI(since C++20)\fP
   ForwardIt last );
   template< class ExecutionPolicy, class ForwardIt
   >                                                    \fB(2)\fP \fI(since C++17)\fP
   bool is_sorted( ExecutionPolicy&& policy,
   ForwardIt first, ForwardIt last );               \fB(1)\fP
   template< class ForwardIt, class Compare >                             \fI(since C++11)\fP
   bool is_sorted( ForwardIt first, ForwardIt last,                       \fI(until C++20)\fP
   Compare comp );
   template< class ForwardIt, class Compare >
   constexpr bool is_sorted( ForwardIt first,           \fB(3)\fP               \fI(since C++20)\fP
   ForwardIt last, Compare comp );
   template< class ExecutionPolicy, class
   ForwardIt, class Compare >                               \fB(4)\fP           \fI(since C++17)\fP
   bool is_sorted( ExecutionPolicy&& policy,
   ForwardIt first, ForwardIt last, Compare comp );

   Checks if the elements in range [first, last) are sorted in non-descending order.

   1) Elements are compared using operator<.
   3) Elements are compared using the given binary comparison function comp.
   2,4) Same as (1,3), but executed according to policy. These overloads do not
   participate in overload resolution unless
   std::is_execution_policy_v<std::decay_t<ExecutionPolicy>> is true

.SH Parameters

   first, last - the range of elements to examine
   policy      - the execution policy to use. See execution policy for details.
                 comparison function object (i.e. an object that satisfies the
                 requirements of Compare) which returns true if the first argument is
                 less than (i.e. is ordered before) the second.

                 The signature of the comparison function should be equivalent to the
                 following:
   comp        -
                  bool cmp(const Type1 &a, const Type2 &b);

                 The signature does not need to have const &, but the function object
                 must not modify the objects passed to it.
                 The types Type1 and Type2 must be such that an object of type
                 ForwardIt can be dereferenced and then implicitly converted to both of
                 them. 
.SH Type requirements
   -
   ForwardIt must meet the requirements of ForwardIterator.

.SH Return value

   true if the elements in the range are sorted in ascending order

.SH Complexity

   linear in the distance between first and last

.SH Exceptions

   The overloads with a template parameter named ExecutionPolicy report errors as
   follows:

     * If execution of a function invoked as part of the algorithm throws an exception
       and ExecutionPolicy is one of the three standard policies, std::terminate is
       called. For any other ExecutionPolicy, the behavior is implementation-defined.
     * If the algorithm fails to allocate memory, std::bad_alloc is thrown.

.SH Possible implementation

.SH First version
   template<class ForwardIt>
   bool is_sorted(ForwardIt first, ForwardIt last)
   {
       return std::is_sorted_until(first, last) == last;
   }
.SH Second version
   template<class ForwardIt, class Compare>
   bool is_sorted(ForwardIt first, ForwardIt last, Compare comp)
   {
       return std::is_sorted_until(first, last, comp) == last;
   }

.SH Example

   
// Run this code

 #include <iostream>
 #include <algorithm>
 #include <iterator>
 int main()
 {
     int digits[] = {3, 1, 4, 1, 5};
  
     for (auto i : digits) std::cout << i << ' ';
     std::cout << ": is_sorted: " << std::boolalpha
               << std::is_sorted(std::begin(digits), std::end(digits)) << '\\n';
  
     std::sort(std::begin(digits), std::end(digits));
  
     for (auto i : digits) std::cout << i << ' ';
     std::cout << ": is_sorted: "
               << std::is_sorted(std::begin(digits), std::end(digits)) << '\\n';
 }

.SH Output:

 3 1 4 1 5 : is_sorted: false
 1 1 3 4 5 : is_sorted: true

.SH See also

   is_sorted_until finds the largest sorted subrange
   \fI(C++11)\fP         \fI(function template)\fP 
