.TH std::search_n 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::search_n \- std::search_n

.SH Synopsis
   Defined in header <algorithm>
   template< class ForwardIt, class Size, class T >
   ForwardIt search_n( ForwardIt first, ForwardIt           \fI(until C++20)\fP
   last, Size count, const T& value );
   template< class ForwardIt, class Size, class T >
   constexpr ForwardIt search_n( ForwardIt first,           \fI(since C++20)\fP
   ForwardIt last, Size count, const T& value );
   template< class ExecutionPolicy, class
   ForwardIt, class Size, class T >
   ForwardIt search_n( ExecutionPolicy&& policy,        \fB(2)\fP \fI(since C++17)\fP
   ForwardIt first, ForwardIt last, Size count,
   const T& value );
   template< class ForwardIt, class Size, class T,
   class BinaryPredicate >

   ForwardIt search_n( ForwardIt first, ForwardIt                         \fI(until C++20)\fP
   last, Size count, const T& value,

                        BinaryPredicate p );        \fB(1)\fP
   template< class ForwardIt, class Size, class T,
   class BinaryPredicate >

   constexpr ForwardIt search_n( ForwardIt first,                         \fI(since C++20)\fP
   ForwardIt last, Size count, const T& value,          \fB(3)\fP

                                  BinaryPredicate p
   );
   template< class ExecutionPolicy, class
   ForwardIt, class Size, class T, class
   BinaryPredicate >

   ForwardIt search_n( ExecutionPolicy&& policy,            \fB(4)\fP           \fI(since C++17)\fP
   ForwardIt first, ForwardIt last, Size count,
   const T& value,

                        BinaryPredicate p );

   Searches the range [first, last) for the first sequence of count identical elements,
   each equal to the given value value.

   1) Elements are compared using operator==.
   3) Elements are compared using the given binary predicate p.
   2,4) Same as (1,3), but executed according to policy. These overloads do not
   participate in overload resolution unless
   std::is_execution_policy_v<std::decay_t<ExecutionPolicy>> is true

.SH Parameters

   first, last - the range of elements to examine
   count       - the length of the sequence to search for
   value       - the value of the elements to search for
   policy      - the execution policy to use. See execution policy for details.
                 binary predicate which returns true if the elements should be treated
                 as equal.

                 The signature of the predicate function should be equivalent to the
                 following:

   p           -  bool pred(const Type1 &a, const Type2 &b);

                 The signature does not need to have const &, but the function must not
                 modify the objects passed to it.
                 The type Type1 must be such that an object of type ForwardIt can be
                 dereferenced and then implicitly converted to Type1. The type Type2
                 must be such that an object of type T can be implicitly converted to
                 Type2. 
.SH Type requirements
   -
   ForwardIt must meet the requirements of ForwardIterator.

.SH Return value

   Iterator to the beginning of the found sequence in the range [first, last). If no
   such sequence is found, last is returned.

.SH Complexity

   At most last - first applications of the predicate.

.SH Exceptions

   The overloads with a template parameter named ExecutionPolicy report errors as
   follows:

     * If execution of a function invoked as part of the algorithm throws an exception
       and ExecutionPolicy is one of the three standard policies, std::terminate is
       called. For any other ExecutionPolicy, the behavior is implementation-defined.
     * If the algorithm fails to allocate memory, std::bad_alloc is thrown.

.SH Possible implementation

.SH First version
   template<class ForwardIt, class Size, class T>
   ForwardIt search_n(ForwardIt first, ForwardIt last,
                       Size count, const T& value)
   {
       for(; first != last; ++first) {
           if (!(*first == value)) {
               continue;
           }
    
           ForwardIt candidate = first;
           Size cur_count = 0;
    
           while (true) {
               ++cur_count;
               if (cur_count == count) {
                   // success
                   return candidate;
               }
               ++first;
               if (first == last) {
                   // exhausted the list
                   return last;
               }
               if (!(*first == value)) {
                   // too few in a row
                   break;
               }
           }
       }
       return last;
   }
.SH Second version
   template<class ForwardIt, class Size, class T, class BinaryPredicate>
   ForwardIt search_n(ForwardIt first, ForwardIt last,
                       Size count, const T& value, BinaryPredicate p)
   {
       for(; first != last; ++first) {
           if (!p(*first, value)) {
               continue;
           }
    
           ForwardIt candidate = first;
           Size cur_count = 0;
    
           while (true) {
               ++cur_count;
               if (cur_count == count) {
                   // success
                   return candidate;
               }
               ++first;
               if (first == last) {
                   // exhausted the list
                   return last;
               }
               if (!p(*first, value)) {
                   // too few in a row
                   break;
               }
           }
       }
       return last;
   }

.SH Example

   
// Run this code

 #include <iostream>
 #include <algorithm>
 #include <iterator>
  
 template <class Container, class Size, class T>
 bool consecutive_values(const Container& c, Size count, const T& v)
 {
   return std::search_n(std::begin(c),std::end(c),count,v) != std::end(c);
 }
  
 int main()
 {
    const char sequence[] = "1001010100010101001010101";
  
    std::cout << std::boolalpha;
    std::cout << "Has 4 consecutive zeros: "
              << consecutive_values(sequence,4,'0') << '\\n';
    std::cout << "Has 3 consecutive zeros: "
              << consecutive_values(sequence,3,'0') << '\\n';
 }

.SH Output:

 Has 4 consecutive zeros: false
 Has 3 consecutive zeros: true

.SH See also

   find_end    finds the last sequence of elements in a certain range
               \fI(function template)\fP 
   find
   find_if     finds the first element satisfying specific criteria
   find_if_not \fI(function template)\fP 
   \fI(C++11)\fP
   search      searches for a range of elements
               \fI(function template)\fP 
