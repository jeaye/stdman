.TH std::experimental::make_exceptional_future 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::experimental::make_exceptional_future \- std::experimental::make_exceptional_future

.SH Synopsis
   Defined in header <experimental/future>
   template < class T >                                      \fB(1)\fP (concurrency TS)
   future<T> make_exceptional_future(std::exception_ptr ex);
   template < class T, class E >                             \fB(2)\fP (concurrency TS)
   future<T> make_exceptional_future(E ex);

   1) Creates a shared state of type T that is immediately ready and stores the
   exception pointer ex, then return a future associated with that shared state, as if
   by promise<T> p; p.set_exception(ex); return p.get_future();. The behavior is
   undefined if ex is null.
   2) Creates a shared state of type T that is immediately ready and stores an
   exception pointer created from ex, then return a future associated with that shared
   state, as if by promise<T> p; p.set_exception(std::make_exception_ptr(ex)); return
   p.get_future();

.SH Return value

   A future object associated with the shared state that was created.

.SH See also

   make_ready_future produces a future that is ready immediately and holds the given
   (concurrency TS)  value
                     \fI(function template)\fP 
