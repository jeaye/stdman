.TH std::basic_string::capacity 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::basic_string::capacity \- std::basic_string::capacity

.SH Synopsis
   size_type capacity() const;

   Returns the number of characters that the string has currently allocated space for.

.SH Parameters

   \fI(none)\fP

.SH Return value

   capacity of the currently allocated storage

.SH Exceptions

   \fI(none)\fP                    \fI(until C++11)\fP
   noexcept specification:  
   noexcept                  \fI(since C++11)\fP
     

.SH Complexity

   Constant

.SH Example

   
// Run this code

 #include <iostream>
 #include <string>
  
 void show_capacity(std::string const& s)
 {
     std::cout << "'" << s << "' has capacity " << s.capacity() << ".\\n";
 }
  
 int main()
 {
     std::string s{"Exemplar"};
     show_capacity(s);
  
     s += " is an example string.";
     show_capacity(s);
 }

.SH Possible output:

 'Exemplar' has capacity 15.
 'Exemplar is an example string.' has capacity 30.

.SH See also

   size    returns the number of characters
   length  \fI(public member function)\fP 
   reserve reserves storage
           \fI(public member function)\fP 

.SH Category:

     * unconditionally noexcept

   Hidden categories:

     * Pages with unreviewed unconditional noexcept template
     * Pages with unreviewed noexcept template
