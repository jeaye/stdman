.TH std::literals::chrono_literals::operator""min 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::literals::chrono_literals::operator""min \- std::literals::chrono_literals::operator""min

.SH Synopsis
   Defined in header <chrono>
   constexpr chrono::minutes operator "" min(unsigned long long       \fB(1)\fP \fI(since C++14)\fP
   mins);
   constexpr chrono::duration</*unspecified*/, ratio<60,1>>           \fB(2)\fP \fI(since C++14)\fP
                         operator "" min(long double mins);

   Forms a std::chrono::duration literal representing minutes.

   1) integer literal, returns exactly std::chrono::minutes(mins)
   2) floating-point literal, returns a floating-point duration equivalent to
   std::chrono::minutes

.SH Parameters

   minutes - the number of minutes

.SH Return value

   The std::chrono::duration literal.

.SH Possible implementation

   constexpr std::chrono::minutes operator ""min(unsigned long long m)
   {
       return std::chrono::minutes(m);
   }
   constexpr std::chrono::duration<long double,
                                   std::ratio<60,1>> operator ""min(long double m)
   {
       return std::chrono::duration<long double, ratio<60,1>> (m);
   }

.SH Notes

   These operators are declared in the namespace std::literals::chrono_literals, where
   both literals and chrono_literals are inline namespaces. Access to these operators
   can be gained with using namespace std::literals, using namespace
   std::chrono_literals, and using namespace std::literals::chrono_literals.

   In addition, within the namespace std::chrono, the directive using namespace
   literals::chrono_literals; is provided by the standard library, so that if a
   programmer uses using namespace std::chrono; to gain access to the duration classes,
   the duration literal operators become visible as well.

.SH Example

   
// Run this code

 #include <iostream>
 #include <chrono>
  
 int main()
 {
     using namespace std::chrono_literals;
     auto lesson = 45min;
     auto halfmin = 0.5min;
     std::cout << "one lesson is " << lesson.count() << " minutes\\n"
               << "half a minute is " << halfmin.count() << " minutes\\n";
 }

.SH Output:

 one lesson is 45 minutes
 half a minute is 0.5 minutes

.SH See also

   constructor   constructs new duration
                 \fI(public member function of std::chrono::duration)\fP 
