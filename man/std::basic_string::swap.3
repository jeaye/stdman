.TH std::basic_string::swap 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::basic_string::swap \- std::basic_string::swap

.SH Synopsis
   void swap( basic_string& other );                            \fI(until C++17)\fP
   void swap( basic_string& other ) noexcept(/* see below */);  \fI(since C++17)\fP

   Exchanges the contents of the string with those of other. All iterators and
   references may be invalidated.

.SH Parameters

   other - string to exchange the contents with

.SH Return value

   \fI(none)\fP

.SH Exceptions
                                                                                 (since
   noexcept specification:                                                       C++17)
   noexcept(std::allocator_traits<Allocator>::propagate_on_container_swap::value
   || std::allocator_traits<Allocator>::is_always_equal::value)

.SH Example

   
// Run this code

 #include <string>
 #include <iostream>
  
 int main()
 {
     std::string a = "AAA";
     std::string b = "BBB";
  
     std::cout << "before swap" << '\\n';
     std::cout << "a: " << a << '\\n';
     std::cout << "b: " << b << '\\n';
  
     a.swap(b);
  
     std::cout << "after swap" << '\\n';
     std::cout << "a: " << a << '\\n';
     std::cout << "b: " << b << '\\n';
 }

.SH Output:

 before swap
 a: AAA
 b: BBB
 after swap
 a: BBB
 b: AAA

.SH Complexity

   Constant.

.SH Category:

     * conditionally noexcept
