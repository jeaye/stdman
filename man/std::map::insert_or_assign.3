.TH std::map::insert_or_assign 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::map::insert_or_assign \- std::map::insert_or_assign

.SH Synopsis
   template <class M>                                                 \fB(1)\fP \fI(since C++17)\fP
   pair<iterator, bool> insert_or_assign(const key_type& k, M&& obj);
   template <class M>                                                 \fB(2)\fP \fI(since C++17)\fP
   pair<iterator, bool> insert_or_assign(key_type&& k, M&& obj);
   template <class M>
   iterator insert_or_assign(const_iterator hint, const key_type& k,  \fB(3)\fP \fI(since C++17)\fP
   M&& obj);
   template <class M>
   iterator insert_or_assign(const_iterator hint, key_type&& k, M&&   \fB(4)\fP \fI(since C++17)\fP
   obj);

   1,3) If a key equivalent to k already exists in the container, assigns
   std::forward<M>(obj) to the mapped_type corresponding to the key k. If the key does
   not exist, inserts the new value as if by insert, constructing it from value_type(k,
   std::forward<M>(obj))
   2,4) Same as (1,3), except the mapped value is constructed from
   value_type(std::move(k), std::forward<M>(obj))

   No iterators or references are invalidated.
   If the insertion is successful, pointers and references to the element obtained
   while it is held in the node handle are invalidated, and pointers and references
   obtained to that element before it was extracted become valid.
   \fI(since C++17)\fP

.SH Parameters

   k    - the key used both to look up and to insert if not found
   hint - iterator to the position before which the new element will be inserted
   args - arguments to forward to the constructor of the element

.SH Return value

   1,2) The bool component is true if the insertion took place and false if the
   assignment took place. The iterator component is pointing at the element that was
   inserted or updated
   3,4) Iterator pointing at the element that was inserted or updated

.SH Complexity

   1,2) Same as for emplace
   3,4) Same as for emplace_hint

.SH Notes

   insert_or_assign returns more information than operator[] and does not require
   default-constructibility of the mapped type.

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

   operator[] access or insert specified element
              \fI(public member function)\fP 
   at         access specified element with bounds checking
   \fI(C++11)\fP    \fI(public member function)\fP 
              inserts elements
   insert     or nodes
              \fI(since C++17)\fP
              \fI(public member function)\fP 
   emplace    constructs element in-place
   \fI(C++11)\fP    \fI(public member function)\fP 

.SH Category:

     * Todo no example
