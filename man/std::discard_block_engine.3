.TH std::discard_block_engine 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::discard_block_engine \- std::discard_block_engine

.SH Synopsis
   Defined in header <random>
   template<

       class Engine,              \fI(since C++11)\fP
       size_t P, size_t R

   > class discard_block_engine;

   discard_block_engine is a pseudo-random number generator adaptor that discards a
   certain amount of data produced by the base engine. From each block of size P
   generated by the base engine, the adaptor keeps only R numbers, discarding the rest.

.SH Template parameters

   Engine  -  the type of the wrapped engine
   P       -  the size of a block. Must be greater than 0.
   R       -  the number of used numbers per block. Must be greater than 0 and not
              greater than P
.SH Type requirements
   -
   Engine must meet the requirements of RandomNumberEngine.

.SH Member types

   Member type Definition
   result_type Engine::result_type

.SH Member functions

   constructor   constructs the engine adaptor
                 \fI(public member function)\fP 
   seed          sets the state of the underlying engine
                 \fI(public member function)\fP 
   base          returns the underlying engine
                 \fI(public member function)\fP 
.SH Generation
                 advances the state of the underlying engine and returns the generated
   operator()    value
                 \fI(public member function)\fP 
   discard       advances the adaptor's state by a specified amount
                 \fI(public member function)\fP 
.SH Characteristics
   min           gets the smallest possible value in the output range of the underlying
   \fB[static]\fP      engine.
                 \fI(public static member function)\fP 
   max           gets the largest possible value in the output range of the underlying
   \fB[static]\fP      engine.
                 \fI(public static member function)\fP 

.SH Non-member functions

   operator== compares the internal states of the adaptors and underlying engines
   operator!= \fI(function)\fP 
   operator<< performs stream input and output on pseudo-random number engine adaptor
   operator>> \fI(function)\fP 

.SH Member objects

   constexpr size_t block_size the size of the block, P
   \fB[static]\fP                    \fI(public static member constant)\fP
   constexpr size_t used_size  the number of used numbers per block, R
   \fB[static]\fP                    \fI(public static member constant)\fP
