.TH std::atomic_flag 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::atomic_flag \- std::atomic_flag

.SH Synopsis
   Defined in header <atomic>
   class atomic_flag;          \fI(since C++11)\fP

   std::atomic_flag is an atomic boolean type. Unlike all specializations of
   std::atomic, it is guaranteed to be lock-free. Unlike std::atomic<bool>,
   std::atomic_flag does not provide load or store operations.

.SH Member functions

   constructor   constructs an atomic_flag
                 \fI(public member function)\fP
   operator=     the assignment operator
                 \fI(public member function)\fP
   clear         atomically sets flag to false
                 \fI(public member function)\fP 
   test_and_set  atomically sets the flag to true and obtains its previous value
                 \fI(public member function)\fP 

.SH Example

   A spinlock mutex can be implemented in userspace using an atomic_flag

   
// Run this code

 #include <thread>
 #include <vector>
 #include <iostream>
 #include <atomic>
  
 std::atomic_flag lock = ATOMIC_FLAG_INIT;
  
 void f(int n)
 {
     for (int cnt = 0; cnt < 100; ++cnt) {
         while (lock.test_and_set(std::memory_order_acquire))  // acquire lock
              ; // spin
         std::cout << "Output from thread " << n << '\\n';
         lock.clear(std::memory_order_release);               // release lock
     }
 }
  
 int main()
 {
     std::vector<std::thread> v;
     for (int n = 0; n < 10; ++n) {
         v.emplace_back(f, n);
     }
     for (auto& t : v) {
         t.join();
     }
 }

.SH Output:

 Output from thread 2
 Output from thread 6
 Output from thread 7
 ...<exactly 1000 lines>...

.SH See also

   atomic_flag_test_and_set          atomically sets the flag to true and returns its
   atomic_flag_test_and_set_explicit previous value
   \fI(C++11)\fP                           \fI(function)\fP 
   \fI(C++11)\fP
   atomic_flag_clear
   atomic_flag_clear_explicit        atomically sets the value of the flag to false
   \fI(C++11)\fP                           \fI(function)\fP 
   \fI(C++11)\fP
   ATOMIC_FLAG_INIT                  initializes an std::atomic_flag to false
   \fI(C++11)\fP                           (macro constant) 
   C documentation for
   atomic_flag
