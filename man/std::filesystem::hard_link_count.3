.TH std::filesystem::hard_link_count 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::filesystem::hard_link_count \- std::filesystem::hard_link_count

.SH Synopsis
   Defined in header <filesystem>
   std::uintmax_t hard_link_count( const std::filesystem::path& p );

   std::uintmax_t hard_link_count( const std::filesystem::path& p,   \fB(1)\fP \fI(since C++17)\fP

                                   std::error_code& ec ) noexcept;

   Returns the number of hard links for the filesystem object identified by path p.

   The non-throwing overload returns static_cast<uintmax_t>(-1) on errors.

.SH Parameters

   p  - path to examine
   ec - out-parameter for error reporting in the non-throwing overload

.SH Return value

   The number of hard links for p

.SH Exceptions

   The overload that does not take a std::error_code& parameter throws filesystem_error
   on underlying OS API errors, constructed with p as the first argument and the OS
   error code as the error code argument. The overload taking a std::error_code&
   parameter sets it to the OS API error code if an OS API call fails, and executes
   ec.clear() if no errors occur. Any overload not marked noexcept may throw
   std::bad_alloc if memory allocation fails.

.SH Example

   
// Run this code

 #include <iostream>
 #include <filesystem>
 namespace fs = std::filesystem;
 int main()
 {
     // On a POSIX-style filesystem, each directory has at least 2 hard links:
     // itself and the special member pathname "."
     fs::path p = fs::current_path();
     std::cout << "Number of hard links for current path is "
               << fs::hard_link_count(p) << '\\n';
  
     // each ".." is a hard link to the parent directory, so the total number
     // of hard links for any directory is 2 plus number of direct subdirectories
     p = fs::current_path() / ".."; // each dot-dot is a hard link to parent
     std::cout << "Number of hard links for .. is "
               << fs::hard_link_count(p) << '\\n';
 }

.SH Possible output:

 Number of hard links for current path is 2
 Number of hard links for .. is 3

.SH See also

   create_hard_link creates a hard link
   \fI(C++17)\fP          \fI(function)\fP 
                    returns the number of hard links referring to the file to which the
   hard_link_count  directory entry refers
                    \fI(public member function of std::filesystem::directory_entry)\fP 
