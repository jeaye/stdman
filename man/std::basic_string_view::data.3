.TH std::basic_string_view::data 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::basic_string_view::data \- std::basic_string_view::data

.SH Synopsis
   constexpr const_pointer data() const noexcept;  \fI(since C++17)\fP

   Returns a pointer to the underlying character array. The pointer is such that the
   range [data(); data() + size()) is valid and the values in it correspond to the
   values of the view.

.SH Parameters

   \fI(none)\fP

.SH Return value

   A pointer to the underlying character array.

.SH Complexity

   Constant.

.SH Notes

   Unlike std::basic_string::data() and string literals, data() may return a pointer to
   a buffer that is not null-terminated. Therefore it is typically a mistake to pass
   data() to a routine that takes just a const CharT* and expects a null-terminated
   string.

.SH Example

   
// Run this code

 #include <iostream>
 #include <cstring>
 #include <cwchar>
 #include <string>
 #include <string_view>
 int main()
 {
     std::wstring_view wcstr_v = L"xyzzy";
     std::cout << std::wcslen(wcstr_v.data()) << '\\n';
     // OK: the underlying character array is null-terminated
  
     char array[3] = {'B', 'a', 'r'};
     std::string_view array_v(array, sizeof array);
     // std::cout << std::strlen(array_v.data()) << '\\n';
     // error: the underlying character array is not null-terminated
  
     std::string str(array_v.data(), array_v.size()); // OK
     std::cout << std::strlen(str.data()) << '\\n';
     // OK: the underlying character array of a std::string is always null-terminated
 }

.SH Output:

 5
 3

.SH See also

   front accesses the first character
         \fI(public member function)\fP 
   back  accesses the last character
         \fI(public member function)\fP 
