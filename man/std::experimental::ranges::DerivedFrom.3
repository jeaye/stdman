.TH std::experimental::ranges::DerivedFrom 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::experimental::ranges::DerivedFrom \- std::experimental::ranges::DerivedFrom

.SH Synopsis
   Defined in header <experimental/ranges/concepts>
   template < class T, class U >

   concept bool DerivedFrom =
     std::is_base_of<U, T>::value &&                                        (ranges TS)

     std::is_convertible<std::remove_cv_t<T>*,
   std::remove_cv_t<U>*>::value;

   The concept DerivedFrom<T, U> is satisfied if and only if U is a class type that is
   either T or a public and unambiguous base of T.

   Despite the use of std::is_base_of and std::is_convertible in its description above,
   DerivedFrom is not required to use it in its implementation. Thus, there need not be
   any subsumption relationship between DerivedFrom<T, U> and
   std::is_base_of<U,T>::value or std::is_convertible<std::remove_cv_t<T>*,
   std::remove_cv_t<U>*>::value.

.SH See also

   is_base_of     checks if a type is derived from the other type
   \fI(C++11)\fP        \fI(class template)\fP 
   is_convertible checks if a type can be converted to the other type
   \fI(C++11)\fP        \fI(class template)\fP 
