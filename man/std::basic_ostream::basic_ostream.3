.TH std::basic_ostream::basic_ostream 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::basic_ostream::basic_ostream \- std::basic_ostream::basic_ostream

.SH Synopsis
   explicit basic_ostream( std::basic_streambuf<CharT, Traits>* sb ); \fB(1)\fP
   protected:                                                         \fB(2)\fP \fI(since C++11)\fP
   basic_ostream( const basic_ostream& rhs ) = delete;
   protected:                                                         \fB(3)\fP \fI(since C++11)\fP
   basic_ostream( basic_ostream&& rhs );

   1) Constructs the basic_ostream object, assigning initial values to the base class
   by calling basic_ios::init(sb).

   2) The copy constructor is protected, and is deleted. Output streams are not
   copyable.

   3) The move constructor uses basic_ios<CharT, Traits>::move(rhs) to move all
   basic_ios members, except for the rdbuf(), from rhs into *this. This move
   constructor is protected: it is called by the move constructors of movable output
   stream classes std::basic_ofstream and std::basic_ostringstream, which know how to
   correctly move the associated streambuffer.

.SH Parameters

   sb  - streambuffer to use as output sequence
   rhs - basic_ostream to initialize from

.SH Example

   
// Run this code

 #include <sstream>
 #include <utility>
 #include <iostream>
  
 int main()
 {
     // ERROR: copy ctor is deleted
 //  std::ostream myout(std::cout);
  
     // OK: shares buffer with cout
     std::ostream myout(std::cout.rdbuf());
  
     // ERROR: move constructor is protected
 //  std::ostream s2(std::move(std::ostringstream() << 7.1));
  
     // OK: move ctor called through the derived class
     std::ostringstream s2(std::move(std::ostringstream() << 7.1));
     myout << s2.str() << '\\n';
 }

.SH Output:

 7.1
