.TH std::filesystem::copy_symlink 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::filesystem::copy_symlink \- std::filesystem::copy_symlink

.SH Synopsis
   Defined in header <filesystem>
   void copy_symlink( const std::filesystem::path& from, \fB(1)\fP \fI(since C++17)\fP
                      const std::filesystem::path& to);
   void copy_symlink( const std::filesystem::path& from,

                      const std::filesystem::path& to,   \fB(2)\fP \fI(since C++17)\fP

                      std::error_code& ec ) noexcept;

   Copies a symlink to another location.

   1) Effectively calls f(read_symlink(from), to) where f is create_symlink or
   create_directory_symlink depending on whether from resolves to a file or directory.
   2) Effectively calls f(read_symlink(from, ec), to, ec) where f is create_symlink or
   create_directory_symlink depending on whether from resolves to a file or directory.

.SH Parameters

   from - path to a symbolic link to copy
   to   - destination path of the new symlink
   ec   - out-parameter for error reporting in the non-throwing overload

.SH Return value

   \fI(none)\fP

.SH Exceptions

   The overload that does not take a std::error_code& parameter throws filesystem_error
   on underlying OS API errors, constructed with from as the first argument, to as the
   second argument, and the OS error code as the error code argument. The overload
   taking a std::error_code& parameter sets it to the OS API error code if an OS API
   call fails, and executes ec.clear() if no errors occur. Any overload not marked
   noexcept may throw std::bad_alloc if memory allocation fails.

.SH See also

   copy                     copies files or directories
   \fI(C++17)\fP                  \fI(function)\fP 
   copy_file                copies file contents
   \fI(C++17)\fP                  \fI(function)\fP 
   create_symlink
   create_directory_symlink creates a symbolic link
   \fI(C++17)\fP                  \fI(function)\fP 
   \fI(C++17)\fP
   read_symlink             obtains the target of a symbolic link
   \fI(C++17)\fP                  \fI(function)\fP 
