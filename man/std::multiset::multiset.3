.TH std::multiset::multiset 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::multiset::multiset \- std::multiset::multiset

.SH Synopsis
   multiset();

   explicit multiset( const Compare& comp,                  \fB(1)\fP

                      const Allocator& alloc = Allocator()
   );
   explicit multiset( const Allocator& alloc );             \fB(1)\fP (since
                                                                C++11)
   template< class InputIterator >

   multiset( InputIterator first, InputIterator last,
             const Compare& comp = Compare(),

             const Allocator& alloc = Allocator() );
   template< class InputIterator >
                                                                        (since
   multiset( InputIterator first, InputIterator last,                   C++14)

             const Allocator& alloc );
   multiset( const multiset& other );                           \fB(3)\fP
   multiset( const multiset& other, const Allocator& alloc  \fB(2)\fP \fB(3)\fP     (since
   );                                                                   C++11)
   multiset( multiset&& other );                                \fB(4)\fP     (since
                                                                        C++11)
   multiset( multiset&& other, const Allocator& alloc );        \fB(4)\fP     (since
                                                                        C++11)
   multiset( std::initializer_list<value_type> init,
                                                                                (since
             const Compare& comp = Compare(),                                   C++11)
                                                                \fB(5)\fP
             const Allocator& alloc = Allocator() );
   multiset( std::initializer_list<value_type> init,                            (since
             const Allocator& );                                                C++14)

   Constructs new container from a variety of data sources and optionally using user
   supplied allocator alloc or comparison function object comp.

   1) Default constructor. Constructs empty container.
   2) Constructs the container with the contents of the range [first, last).
   3) Copy constructor. Constructs the container with the copy of the contents of
   other. If alloc is not provided, allocator is obtained by calling
   std::allocator_traits<allocator_type>::select_on_container_copy_construction(other.get_allocator()).
   4) Move constructor. Constructs the container with the contents of other using move
   semantics. If alloc is not provided, allocator is obtained by move-construction from
   the allocator belonging to other.
   5) Constructs the container with the contents of the initializer list init.

.SH Parameters

   alloc       - allocator to use for all memory allocations of this container
   comp        - comparison function object to use for all comparisons of keys
   first, last - the range to copy the elements from
   other       - another container to be used as source to initialize the elements of
                 the container with
   init        - initializer list to initialize the elements of the container with
.SH Type requirements
   -
   InputIterator must meet the requirements of InputIterator.
   -
   Compare must meet the requirements of Compare.
   -
   Allocator must meet the requirements of Allocator.

.SH Complexity

   1) Constant
   2) N log(N) where N = std::distance(first, last) in general, linear in N if the
   range is already sorted by value_comp().
   3) Linear in size of other
   4) Constant. If alloc is given and alloc != other.get_allocator(), then linear.
   5) N log(N) where N = init.size()) in general, linear in N if init is already sorted
   by value_comp().

.SH Exceptions

   Calls to Allocator::allocate may throw.

.SH Notes

   After container move construction (overload \fB(4)\fP), references, pointers, and
   iterators (other than the end iterator) to other remain valid, but refer to elements
   that are now in *this. The current standard makes this guarantee via the blanket
   statement in ยง23.2.1[container.requirements.general]/12, and a more direct guarantee
   is under consideration via LWG 2321.

.SH Example

    This section is incomplete
    Reason: no example

   Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

      DR    Applied to        Behavior as published        Correct behavior
   LWG 2193 C++11      the default constructor is explicit

.SH See also

   operator= assigns values to the container
             \fI(public member function)\fP 

.SH Category:

     * Todo no example
