.TH std::from_chars 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::from_chars \- std::from_chars

.SH Synopsis
   Defined in header <charconv>
   std::from_chars_result from_chars(const char* first, const char*
   last,                                                              \fB(1)\fP \fI(since C++17)\fP
                                     /*see below*/& value, int base =
   10);
   std::from_chars_result from_chars(const char* first, const char*
   last, float& value,                                                \fB(2)\fP \fI(since C++17)\fP
                                     std::chars_format fmt =
   std::chars_format::general);
   std::from_chars_result from_chars(const char* first, const char*
   last, double& value,                                               \fB(3)\fP \fI(since C++17)\fP
                                     std::chars_format fmt =
   std::chars_format::general);
   std::from_chars_result from_chars(const char* first, const char*
   last, long double& value,                                          \fB(4)\fP \fI(since C++17)\fP
                                     std::chars_format fmt =
   std::chars_format::general);
   struct from_chars_result {

       const char* ptr;                                               \fB(5)\fP \fI(since C++17)\fP
       std::errc ec;

   };

   Analyzes the character sequence [first,last) for a pattern described below. If no
   characters match the pattern or if the value obtained by parsing the matched
   characters is not representable in the type of value, value is unmodified, otherwise
   the characters matching the pattern are interpreted as a text representation of an
   arithmetic value, which is stored in value.

   1) Integer parsers: Expects the pattern identical to the one used by std::strtol in
   the default ("C") locale and the given non-zero numeric base, except that "0x" or
   "0X" prefixes are not recognized for base 16, and that only the minus sign is
   recognized (not the plus sign), and only for signed integer types of value. Digits
   in the range 10..35 (inclusive) are represented as lowercase characters a..z
   (uppercase digits are not recognized). The library provides overloads for all signed
   and unsigned integer types and char as the referenced type of the parameter value.
   2-4) Floating-point parsers: Expects the pattern identical to the one used by
   std::strtod in the default ("C") locale, except that

     * the plus sign is not recognized (only the minus sign is permitted)
     * if fmt has std::chars_format::scientific set but not std::chars_format::fixed,
       the exponent part is required (otherwise it is optional)
     * if fmt has std::chars_format::fixed set but not std::chars_format::scientific,
       the optional exponent is not permitted
     * if fmt is std::chars_format::hex, the prefix "0x" or "0X" is not permitted (the
       string "0x123" parses as the value "0" with unparsed remainder "x123").

   In any case, the resulting value is one of at most two floating-point values closest
   to the value of the string matching the pattern, after rounding according to
   std::round_to_nearest.
   5) The return type (see Return value below)

.SH Parameters

   first, last - valid character range to parse
   value       - the out-parameter where the parsed value is stored if successful
   base        - integer base to use: a value between 2 and 36 (inclusive).
   fmt         - floating-point formatting to use, a bitmask of type std::chars_format

.SH Return value

   On success, returns a value of type from_chars_result such that ptr points at the
   first character not matching the pattern, or has the value equal to last if all
   characters match and ec is value-initialized.

   If there is no pattern match, returns a value of type from_chars_result such that
   ptr equals first and ec equals std::errc::invalid_argument. value is unmodified.

   If the pattern was matched, but the parsed value is not in the range representable
   by the type of value, returns value of type from_chars_result such that ec equals
   std::errc::result_out_of_range and ptr points at the first character not matching
   the pattern. value is unmodified.

.SH Exceptions

   \fI(none)\fP

.SH Notes

   Unlike other parsing functions in C++ and C libraries, std::from_chars is
   locale-independent, non-allocating, and non-throwing. Only a small subset of parsing
   policies used by other libraries (such as std::sscanf) is provided. This is intended
   to allow the fastest possible implementation that is useful in common
   high-throughput contexts such as text-based interchange (JSON or XML).

   The guarantee that std::from_chars can recover every floating-point value formatted
   by std::to_chars exactly is only provided if both functions are from the same
   implementation.

   A pattern consisting of a sign with no digits following it is treated as pattern
   that did not match anything.

.SH Example

   
// Run this code

 #include <iostream>
 #include <charconv>
 #include <array>
  
 int main()
 {
     std::array<char, 10> str{"42"};
     int result;
     std::from_chars(str.data(), str.data()+str.size(), result);
     std::cout << result;
 }

.SH Output:

 42

   Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

      DR    Applied to          Behavior as published              Correct behavior
   LWG 2955 C++17      this function was in <utility> and used  moved to <charconv> and
                       std::error_code                          uses std::errc

.SH See also

   to_chars   converts an integer or floating-point value to a character sequence
   \fI(C++17)\fP    \fI(function)\fP 
   stoi
   stol
   stoll      converts a string to a signed integer
   \fI(C++11)\fP    \fI(function)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   stof
   stod
   stold      converts a string to a floating point value
   \fI(C++11)\fP    \fI(function)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   strtol     converts a byte string to an integer value
   strtoll    \fI(function)\fP 
   strtof     converts a byte string to a floating point value
   strtod     \fI(function)\fP 
   strtold
   scanf      reads formatted input from stdin, a file stream or a buffer
   fscanf     \fI(function)\fP 
   sscanf
   operator>> extracts formatted data
              \fI(public member function of std::basic_istream)\fP 
