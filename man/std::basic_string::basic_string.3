.TH std::basic_string::basic_string 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::basic_string::basic_string \- std::basic_string::basic_string

.SH Synopsis
   basic_string();                                          \fI(until C++17)\fP
   explicit basic_string( const Allocator& alloc );
   basic_string() noexcept(noexcept( Allocator()
   )): basic_string( Allocator() ) {}                       \fI(since C++17)\fP
   explicit basic_string( const Allocator& alloc )
   noexcept;
   basic_string( size_type count,

                 CharT ch,                              \fB(2)\fP

                 const Allocator& alloc =
   Allocator() );
   basic_string( const basic_string& other,

                 size_type pos,
                 size_type count =                                        \fI(until C++17)\fP
   std::basic_string::npos,

                 const Allocator& alloc =
   Allocator() );
   basic_string( const basic_string& other,

                 size_type pos,                                           \fI(since C++17)\fP

                 const Allocator& alloc =
   Allocator() );
   basic_string( const basic_string& other,

                 size_type pos,
                 size_type count,                                         \fI(since C++17)\fP

                 const Allocator& alloc =
   Allocator() );
   basic_string( const CharT* s,                    \fB(1)\fP

                 size_type count,                           \fB(4)\fP

                 const Allocator& alloc =
   Allocator() );
   basic_string( const CharT* s,                        \fB(3)\fP
                 const Allocator& alloc =                   \fB(5)\fP
   Allocator() );
   template< class InputIt >

   basic_string( InputIt first, InputIt last,               \fB(6)\fP

                 const Allocator& alloc =
   Allocator() );
   basic_string( const basic_string& other );               \fB(7)\fP
   basic_string( const basic_string& other, const           \fB(7)\fP           \fI(since C++11)\fP
   Allocator& alloc );
   basic_string( basic_string&& other ) noexcept;           \fB(8)\fP           \fI(since C++11)\fP
   basic_string( basic_string&& other, const                \fB(8)\fP           \fI(since C++11)\fP
   Allocator& alloc );
   basic_string( std::initializer_list<CharT> init,
                 const Allocator& alloc =                   \fB(9)\fP           \fI(since C++11)\fP
   Allocator() );
   explicit basic_string(
   std::basic_string_view<CharT, Traits> sv,                \fB(10)\fP          \fI(since C++17)\fP
                          const Allocator& alloc =
   Allocator() );
   template < class T >

   basic_string( const T& t, size_type pos,
   size_type n,                                             \fB(11)\fP          \fI(since C++17)\fP

                 const Allocator& alloc =
   Allocator() );

   Constructs new string from a variety of data sources and optionally using user
   supplied allocator alloc.

   1) Default constructor. Constructs empty string (zero size and unspecified
   capacity). If no allocator is supplied, allocator is obtained from a
   default-constructed instance.
   2) Constructs the string with count copies of character ch. The behavior is
   undefined if count >= npos.
   3) Constructs the string with a substring [pos, pos+count) of other. If count ==
   npos, if count is not specified, or if the requested substring lasts past the end of
   the string, the resulting substring is [pos, size()).
   4) Constructs the string with the first count characters of character string pointed
   to by s. s can contain null characters. The length of the string is count. The
   behavior is undefined if s does not point at an array of at least count elements of
   CharT, including the case when s is a null pointer.
   5) Constructs the string with the contents initialized with a copy of the
   null-terminated character string pointed to by s. The length of the string is
   determined by the first null character. The behavior is undefined if s does not
   point at an array of at least Traits::length(s)+1 elements of CharT, including the
   case when s is a null pointer.
   6) Constructs the string with the contents of the range [first, last). If InputIt is
   an integral type, equivalent to basic_string(static_cast<size_type>(first),
   static_cast<value_type>(last), a).
   7) Copy constructor. Constructs the string with the copy of the contents of other.
   8) Move constructor. Constructs the string with the contents of other using move
   semantics. other is left in valid, but unspecified state.
   9) Constructs the string with the contents of the initializer list init.
   10) Constructs the string with the contents of the string view sv, as if by
   basic_string(sv.data(), sv.size(), alloc)
   11) Implicitly converts t to a string view sv as if by std::basic_string_view<CharT,
   Traits> sv = t;, then initializes the string with the subrange [pos, pos + n) of sv
   as if by basic_string(sv.substr(pos, n), a). This overload only participates in
   overload resolution if std::is_convertible_v<const T&, std::basic_string_view<CharT,
   Traits>> is true.

.SH Parameters

   alloc       - allocator to use for all memory allocations of this string
   count       - size of the resulting string
   ch          - value to initialize the string with
   pos         - position of the first character to include
   first, last - range to copy the characters from
   s           - pointer to an array of characters to use as source to initialize the
                 string with
   other       - another string to use as source to initialize the string with
   init        - std::initializer_list to initialize the string with
   sv          - std::basic_string_view to initialize the string with
   t           - object (convertible to std::basic_string_view) to initialize the
                 string with

.SH Complexity

   1) constant
   2-4) linear in count
   5) linear in length of s
   6) linear in distance between first and last
   7) linear in size of other
   8) constant. If alloc is given and alloc != other.get_allocator(), then linear
   9) linear in size of init

.SH Exceptions

   3) std::out_of_range if pos > other.size()
   8) Throws nothing if alloc == str.get_allocator()

   Calls to Allocator::allocate may throw.

.SH Notes

   Initialization with a string literal that contains embedded '\\0' characters uses the
   overload \fB(5)\fP, which stops at the first null character. This can be avoided by
   specifying a different constructor or by using operator""s:

 std::string s1 = "ab\\0\\0cd";   // s1 contains "ab"
 std::string s2{"ab\\0\\0cd", 6}; // s2 contains "ab\\0\\0cd"
 std::string s3 = "ab\\0\\0cd"s;  // s3 contains "ab\\0\\0cd"

.SH Example

   
// Run this code

 #include <iostream>
 #include <cassert>
 #include <iterator>
 #include <string>
 #include <cctype>
  
 int main()
 {
   {
     // string::string()
     std::string s;
     assert(s.empty() && (s.length() == 0) && (s.size() == 0));
   }
  
   {
     // string::string(size_type count, charT ch)
     std::string s(4, '=');
     std::cout << s << '\\n'; // "===="
   }
  
   {
     std::string const other("Exemplary");
     // string::string(string const& other, size_type pos, size_type count)
     std::string s(other, 0, other.length()-1);
     std::cout << s << '\\n'; // "Exemplar"
   }
  
   {
     // string::string(charT const* s, size_type count)
     std::string s("C-style string", 7);
     std::cout << s << '\\n'; // "C-style"
   }
  
   {
     // string::string(charT const* s)
     std::string s("C-style\\0string");
     std::cout << s << '\\n'; // "C-style"
   }
  
   {
     char mutable_c_str[] = "another C-style string";
     // string::string(InputIt first, InputIt last)
     std::string s(std::begin(mutable_c_str)+8, std::end(mutable_c_str)-1);
     std::cout << s << '\\n'; // "C-style string"
   }
  
   {
     std::string const other("Exemplar");
     std::string s(other);
     std::cout << s << '\\n'; // "Exemplar"
   }
  
   {
     // string::string(string&& str)
     std::string s(std::string("C++ by ") + std::string("example"));
     std::cout << s << '\\n'; // "C++ by example"
   }
  
   {
     // string(std::initializer_list<charT> ilist)
     std::string s({ 'C', '-', 's', 't', 'y', 'l', 'e' });
     std::cout << s << '\\n'; // "C-style"
   }
  
   {
     // overload resolution selects string(InputIt first, InputIt last) [with InputIt = int]
     // which behaves as if string(size_type count, charT ch) is called
     std::string s(3, std::toupper('a'));
     std::cout << s << '\\n'; // "AAA"
   }
 }

.SH Output:

 ====
 Exemplar
.SH C-style
.SH C-style
 C-style string
 Exemplar
 C++ by example
.SH C-style
 AAA

   Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

      DR    Applied to        Behavior as published        Correct behavior
   LWG 2193 C++11      the default constructor is explicit

.SH See also

   assign    assign characters to a string
             \fI(public member function)\fP 
   operator= assigns values to the string
             \fI(public member function)\fP 
