.TH std::basic_string::data 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::basic_string::data \- std::basic_string::data

.SH Synopsis
   const CharT* data() const; \fB(1)\fP
   CharT* data();             \fB(2)\fP \fI(since C++17)\fP

   Returns a pointer to the underlying array serving as character storage. The pointer
   is such that the range [data(); data() + size()) is valid and the values in it
   correspond to the values stored in the string.

   The returned array is not required to be null-terminated.
                                                                          \fI(until C++11)\fP
   If empty() returns true, the pointer is a non-null pointer that should
   not be dereferenced.
   The returned array is null-terminated, that is, data() and c_str()
   perform the same function.
                                                                          \fI(since C++11)\fP
   If empty() returns true, the pointer points to a single null
   character.

   The pointer obtained from data() may be invalidated by:

     * Passing a non-const reference to the string to any standard library function, or
     * Calling non-const member functions on the string, excluding operator[](), at(),
       front(), back(), begin(), end(), rbegin(), rend().

   1) Modifying the character array accessed through the const overload of data has
   undefined behavior.
   2) Modifying the past-the-end null terminator stored at data()+size() has undefined
   behavior.

.SH Parameters

   \fI(none)\fP

.SH Return value

   A pointer to the underlying character storage.

   data()[i] == operator[](i) for every i in [0, size()).   \fI(until C++11)\fP
   data() + i == &operator[](i) for every i in [0, size()]. \fI(since C++11)\fP

.SH Complexity

   Constant.

.SH Exceptions

   \fI(none)\fP                    \fI(until C++11)\fP
   noexcept specification:  
   noexcept                  \fI(since C++11)\fP
     

.SH Example

   
// Run this code

 #include <algorithm>
 #include <cassert>
 #include <cstring>
 #include <string>
  
 int main()
 {
   std::string const s("Emplary");
   assert(s.size() == std::strlen(s.data()));
   assert(std::equal(s.begin(), s.end(), s.data()));
   assert(std::equal(s.data(), s.data() + s.size(), s.begin()));
   assert(0 == *(s.data() + s.size()));
 }

.SH See also

   front   accesses the first character
   \fI(C++11)\fP \fI(public member function)\fP 
   back    accesses the last character
   \fI(C++11)\fP \fI(public member function)\fP 
   c_str   returns a non-modifiable standard C character array version of the string
           \fI(public member function)\fP 

.SH Category:

     * unconditionally noexcept

   Hidden categories:

     * Pages with unreviewed unconditional noexcept template
     * Pages with unreviewed noexcept template
