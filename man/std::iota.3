.TH std::iota 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::iota \- std::iota

.SH Synopsis
   Defined in header <numeric>
   template< class ForwardIterator, class T >                          \fI(since C++11)\fP
   void iota( ForwardIterator first, ForwardIterator last, T value );

   Fills the range [first, last) with sequentially increasing values, starting with
   value and repetitively evaluating ++value.

   Equivalent operation:

 *(d_first)   = value;
 *(d_first+1) = ++value;
 *(d_first+2) = ++value;
 *(d_first+3) = ++value;
 ...

.SH Parameters

   first, last - the range of elements to fill with sequentially increasing values
                 starting with value
   value       - initial value to store, the expression ++value must be well-formed

.SH Return value

   \fI(none)\fP

.SH Complexity

   Exactly last - first increments and assignments.

.SH Possible implementation

   template<class ForwardIterator, class T>
   void iota(ForwardIterator first, ForwardIterator last, T value)
   {
       while(first != last) {
           *first++ = value;
           ++value;
       }
   }

.SH Notes

   The function is named after the integer function ‚ç≥ from the programming language
   APL. It was one of the STL components that were not included in C++98, but
   eventually made it into the standard library in C++11.

.SH Example

   The following example applies std::shuffle to a vector of std::list iterators since
   std::shuffle cannot be applied to a std::list directly. std::iota is used to
   populate both containers.

   
// Run this code

 #include <algorithm>
 #include <iostream>
 #include <list>
 #include <numeric>
 #include <random>
 #include <vector>
  
 int main()
 {
     std::list<int> l(10);
     std::iota(l.begin(), l.end(), -4);
  
     std::vector<std::list<int>::iterator> v(l.size());
     std::iota(v.begin(), v.end(), l.begin());
  
     std::shuffle(v.begin(), v.end(), std::mt19937{std::random_device{}()});
  
     std::cout << "Contents of the list: ";
     for(auto n: l) std::cout << n << ' ';
     std::cout << '\\n';
  
     std::cout << "Contents of the list, shuffled: ";
     for(auto i: v) std::cout << *i << ' ';
     std::cout << '\\n';
 }

.SH Possible output:

 Contents of the list: -4 -3 -2 -1 0 1 2 3 4 5
 Contents of the list, shuffled: 0 -1 3 4 -4 1 -2 -3 2 5

.SH See also

   fill     copy-assigns the given value to every element in a range
            \fI(function template)\fP 
            assigns the results of successive function calls to every element in a
   generate range
            \fI(function template)\fP 
