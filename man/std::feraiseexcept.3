.TH std::feraiseexcept 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::feraiseexcept \- std::feraiseexcept

.SH Synopsis
   Defined in header <cfenv>
   int feraiseexcept( int excepts );  \fI(since C++11)\fP

   Attempts to raise all floating point exceptions listed in excepts (a bitwise OR of
   the floating point exception macros). If one of the exceptions is FE_OVERFLOW or
   FE_UNDERFLOW, this function may additionally raise FE_INEXACT. The order in which
   the exceptions are raised is unspecified, except that FE_OVERFLOW and FE_UNDERFLOW
   are always raised before FE_INEXACT.

.SH Parameters

   excepts - bitmask listing the exception flags to raise

.SH Return value

   0 if all listed exceptions were raised, non-zero value otherwise.

.SH Example

   
// Run this code

 #include <iostream>
 #include <cfenv>
  
 #pragma STDC FENV_ACCESS ON
  
 int main()
 {
     std::feclearexcept(FE_ALL_EXCEPT);
     int r = std::feraiseexcept(FE_UNDERFLOW | FE_DIVBYZERO);
     std::cout <<  "Raising divbyzero and underflow simultaneously "
               << (r?"fails":"succeeds") << " and results in\\n";
     int e = std::fetestexcept(FE_ALL_EXCEPT);
     if (e & FE_DIVBYZERO) {
         std::cout << "division by zero\\n";
     }
     if (e & FE_INEXACT) {
         std::cout << "inexact\\n";
     }
     if (e & FE_INVALID) {
         std::cout << "invalid\\n";
     }
     if (e & FE_UNDERFLOW) {
         std::cout << "underflow\\n";
     }
     if (e & FE_OVERFLOW) {
         std::cout << "overflow\\n";
     }
 }

.SH Output:

 Raising divbyzero and underflow simultaneously succeeds and results in
 division by zero
 underflow

.SH See also

   feclearexcept clears the specified floating-point status flags
   \fI(C++11)\fP       \fI(function)\fP 
   fetestexcept  determines which of the specified floating-point status flags are set
   \fI(C++11)\fP       \fI(function)\fP 
   C documentation for
   feraiseexcept
