.TH std::numeric_limits::round_error 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::numeric_limits::round_error \- std::numeric_limits::round_error

.SH Synopsis
   static T round_error();            \fI(until C++11)\fP
   static constexpr T round_error();  \fI(since C++11)\fP

   Returns the largest possible rounding error in ULPs (units in the last place) as
   defined by ISO 10967, which can vary from 0.5 (rounding to the nearest digit) to 1.0
   (rounding to zero or to infinity). It is only meaningful if
   std::numeric_limits<T>::is_integer == false.

.SH Return value

   T                     std::numeric_limits<T>::round_error()
   /* non-specialized */ T();
   bool                  false
   char                  0
   signed char           0
   unsigned char         0
   wchar_t               0
   char16_t              0
   char32_t              0
   short                 0
   unsigned short        0
   int                   0
   unsigned int          0
   long                  0
   unsigned long         0
   long long             0
   unsigned long long    0
   float                 0.5F
   double                0.5
   long double           0.5L

.SH Exceptions

   \fI(none)\fP                    \fI(until C++11)\fP
   noexcept specification:  
   noexcept                  \fI(since C++11)\fP
     

.SH See also

   round_style identifies the rounding style used by the type
   \fB[static]\fP    \fI(public static member constant)\fP 

.SH Category:

     * unconditionally noexcept

   Hidden categories:

     * Pages with unreviewed unconditional noexcept template
     * Pages with unreviewed noexcept template
