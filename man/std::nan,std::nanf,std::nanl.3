.TH std::nan,std::nanf,std::nanl 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::nan,std::nanf,std::nanl \- std::nan,std::nanf,std::nanl

.SH Synopsis
   Defined in header <cmath>
   float       nanf( const char* arg );  \fI(since C++11)\fP
   double      nan( const char* arg );   \fI(since C++11)\fP
   long double nanl( const char* arg );  \fI(since C++11)\fP

   Converts the implementation-defined character string arg into the corresponding
   quiet NaN value, as if by calling std::strtod, std::strtof, or std::strtold,
   respectively, as follows:

   The call std::nan("n-char-sequence"), where n-char-sequence is a sequence of digits,
   Latin letters, and underscores, is equivalent to the call
   std::strtod("NAN(n-char-sequence)", (char**)nullptr);.

   The call std::nan("") is equivalent to the call std::strtod("NAN()",
   (char**)nullptr);.

   The call std::nan("string"), where string is neither an n-char-sequence nor an empty
   string, is equivalent to the call std::strtod("NAN", (char**)nullptr);.

.SH Parameters

   arg - narrow character string identifying the contents of a NaN

.SH Return value

   The quiet NaN value that corresponds to the identifying string arg or zero if the
   implementation does not support quiet NaNs.

.SH Example

   
// Run this code

 #include <iostream>
 #include <cmath>
 #include <cstdint>
 #include <cstring>
  
 int main()
 {
     double f1 = std::nan("1");
     std::uint64_t f1n; std::memcpy(&f1n, &f1, sizeof f1);
     std::cout << "nan(\\"1\\") = " << f1 << " (" << std::hex << f1n << ")\\n";
  
     double f2 = std::nan("2");
     std::uint64_t f2n; std::memcpy(&f2n, &f2, sizeof f2);
     std::cout << "nan(\\"2\\") = " << f2 << " (" << std::hex << f2n << ")\\n";
 }

.SH Possible output:

 nan("1") = nan (7ff0000000000001)
 nan("2") = nan (7ff0000000000002)

.SH See also

   isnan             checks if the given number is NaN
   \fI(C++11)\fP           \fI(function)\fP 
   NAN               evaluates to a quiet NaN of type float
   \fI(C++11)\fP           (macro constant) 
   has_quiet_NaN     identifies floating-point types that can represent the special
   \fB[static]\fP          value "quiet not-a-number" (NaN)
                     \fI(public static member constant of std::numeric_limits)\fP 
   has_signaling_NaN identifies floating-point types that can represent the special
   \fB[static]\fP          value "signaling not-a-number" (NaN)
                     \fI(public static member constant of std::numeric_limits)\fP 
   quiet_NaN         returns a quiet NaN value of the given floating-point type
   \fB[static]\fP          \fI(public static member function of std::numeric_limits)\fP 
   signaling_NaN     returns a signaling NaN value of the given floating-point type
   \fB[static]\fP          \fI(public static member function of std::numeric_limits)\fP 
   C documentation for
   nanf,
   nan,
   nanl
