.TH std::is_same 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_same \- std::is_same

.SH Synopsis
   Defined in header <type_traits>
   template< class T, class U >     \fI(since C++11)\fP
   struct is_same;

   If T and U name the same type with the same const-volatile qualifications, provides
   the member constant value equal to true. Otherwise value is false.

.SH Member constants

   value    true if T and U is the same type , false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP
   operator()    returns value
   \fI(C++14)\fP       \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Possible implementation

   template<class T, class U>
   struct is_same : std::false_type {};
    
   template<class T>
   struct is_same<T, T> : std::true_type {};

.SH Example

   
// Run this code

 #include <iostream>
 #include <type_traits>
 #include <cstdint>
  
 void print_separator()
 {
     std::cout << "-----\\n";
 }
  
 int main()
 {
     std::cout << std::boolalpha;
  
     std::cout << std::is_same<int, int32_t>::value << '\\n';   // true
     std::cout << std::is_same<int, int64_t>::value << '\\n';   // false
     std::cout << std::is_same<float, int32_t>::value << '\\n'; // false
  
     print_separator();
  
     std::cout << std::is_same<int, int>::value << "\\n";          // true
     std::cout << std::is_same<int, unsigned int>::value << "\\n"; // false
     std::cout << std::is_same<int, signed int>::value << "\\n";   // true
  
     print_separator();
  
     // unlike other types 'char' is not 'unsigned' and not 'signed'
     std::cout << std::is_same<char, char>::value << "\\n";          // true
     std::cout << std::is_same<char, unsigned char>::value << "\\n"; // false
     std::cout << std::is_same<char, signed char>::value << "\\n";   // false
 }

.SH Output:

 true
 false
 false
 -----
 true
 false
 true
 -----
 true
 false
 false

.SH See also

   is_integral   checks if a type is integral type
   \fI(C++11)\fP       \fI(class template)\fP 
   make_signed   makes the given integral type signed
   \fI(C++11)\fP       \fI(class template)\fP 
   make_unsigned makes the given integral type unsigned
   \fI(C++11)\fP       \fI(class template)\fP 
