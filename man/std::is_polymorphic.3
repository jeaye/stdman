.TH std::is_polymorphic 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_polymorphic \- std::is_polymorphic

.SH Synopsis
   Defined in header <type_traits>
   template< class T >              \fI(since C++11)\fP
   struct is_polymorphic;

   If T is a polymorphic class (that is, a non-union class that declares or inherits at
   least one virtual function), provides the member constant value equal true. For any
   other type, value is false.

   If T is a non-union class type, T shall be a complete type; otherwise, the behavior
   is undefined.

.SH Template parameters

   T - a type to check

   Helper variable template

   template< class T >                                                 \fI(since C++17)\fP
   inline constexpr bool is_polymorphic_v = is_polymorphic<T>::value;

   

Inherited from std::integral_constant

.SH Member constants

   value    true if T is a polymorphic class type , false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP
   operator()    returns value
   \fI(C++14)\fP       \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Example

   
// Run this code

 #include <iostream>
 #include <type_traits>
  
 struct A {
     int m;
 };
  
 struct B {
     virtual void foo();
 };
  
 struct C : B {};
  
 int main()
 {
     std::cout << std::boolalpha;
     std::cout << std::is_polymorphic<A>::value << '\\n';
     std::cout << std::is_polymorphic<B>::value << '\\n';
     std::cout << std::is_polymorphic<C>::value << '\\n';
 }

.SH Output:

 false
 true
 true

.SH See also

   is_class    checks if a type is a non-union class type
   \fI(C++11)\fP     \fI(class template)\fP 
   is_abstract checks if a type is abstract class type
   \fI(C++11)\fP     \fI(class template)\fP 
