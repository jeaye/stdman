.TH std::shared_future::valid 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::shared_future::valid \- std::shared_future::valid

.SH Synopsis
   bool valid() const noexcept;  \fI(since C++11)\fP

   Checks if the future refers to a shared state.

   This is the case only for futures that were not default-constructed or moved from.
   Unlike std::future, std::shared_future's shared state is not invalidated when get()
   is called.

   The behavior is undefined if any member function other than the destructor, the
   copy-assignment operator, the move-assignment operator, or valid is called on a
   shared_future that does not refer to shared state (although implementations are
   encouraged to throw std::future_error indicating no_state in this case). It is valid
   to move or copy from a shared_future object for which valid() is false

.SH Parameters

   \fI(none)\fP

.SH Return value

   true if *this refers to a shared state, otherwise false.

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

   wait waits for the result to become available
        \fI(public member function)\fP 

.SH Category:

     * Todo no example
