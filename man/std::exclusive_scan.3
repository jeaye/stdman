.TH std::exclusive_scan 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::exclusive_scan \- std::exclusive_scan

.SH Synopsis
   Defined in header <numeric>
   template< class InputIt, class OutputIt, class T >

   OutputIt exclusive_scan( InputIt first, InputIt last,              \fB(1)\fP \fI(since C++17)\fP

                            OutputIt d_first, T init );
   template< class ExecutionPolicy, class ForwardIt1, class
   ForwardIt2, class T >

   ForwardIt2 exclusive_scan( ExecutionPolicy&& policy, ForwardIt1    \fB(2)\fP \fI(since C++17)\fP
   first, ForwardIt1 last,

                              ForwardIt2 d_first, T init);
   template< class InputIt, class OutputIt,

             class T, class BinaryOperation >
   OutputIt exclusive_scan( InputIt first, InputIt last,              \fB(3)\fP \fI(since C++17)\fP

                            OutputIt d_first, T init, BinaryOperation
   binary_op );
   template< class ExecutionPolicy, class ForwardIt1, class
   ForwardIt2,

             class T, class BinaryOperation >
   ForwardIt2 exclusive_scan( ExecutionPolicy&& policy, ForwardIt1    \fB(4)\fP \fI(since C++17)\fP
   first, ForwardIt1 last,

                              ForwardIt2 d_first, T init,
   BinaryOperation binary_op );

   Computes an exclusive prefix sum operation using binary_op (or std::plus<>() for
   overloads (1-2)) for the range [first, last), using init as the initial value, and
   writes the results to the range beginning at d_first. "exclusive" means that the
   i-th input element is not included in the i-th sum.

   Formally, assigns through each iterator i in [d_first, d_first + (last - first)) the
   value of the generalized noncommutative sum of init, *j... for every j in [first,
   first + (i - d_first)) over binary_op,

   where generalized noncommutative sum GNSUM(op, a
   1, ..., a
   N) is defined as follows:

     * if N=1, a
       1
     * if N > 1, op(GNSUM(op, a
       1, ..., a
       K), GNSUM(op, a
       M, ..., a
       N)) for any K where 1 < K+1 = M â‰¤ N

   In other words, the summation operations may be performed in arbitrary order, and
   the behavior is nondeterministic if binary_op is not associative.

   Overloads (2,4) are executed according to policy. This overload only participates in
   overload resolution if std::is_execution_policy_v<std::decay_t<ExecutionPolicy>> is
   true.

   binary_op shall not invalidate iterators (including the end iterators) or subranges,
   nor modify elements in the ranges [first, last) or [d_first, d_first + (last -
   first)). Otherwise, the behavior is undefined.

.SH Parameters

   first, last  -  the range of elements to sum
   d_first      -  the beginning of the destination range; may be equal to first
   policy       -  the execution policy to use. See execution policy for details.
   init         -  the initial value
                   binary FunctionObject that will be applied in to the result of
   binary_op    -  dereferencing the input iterators, the results of other binary_op,
                   and init.
.SH Type requirements
   -
   InputIt must meet the requirements of InputIterator.
   -
   OutputIt must meet the requirements of OutputIterator.
   -
   ForwardIt1, ForwardIt2 must meet the requirements of ForwardIterator.
   -
   T must meet the requirements of MoveConstructible. and binary_op(init, *first),
   binary_op(init, init), and binary_op(*first, *first) must be convertible to T

.SH Return value

   Iterator to the element past the last element written.

.SH Complexity

   O(last - first) applications of the binary operation

.SH Exceptions

   The overloads with a template parameter named ExecutionPolicy report errors as
   follows:

     * If execution of a function invoked as part of the algorithm throws an exception
       and ExecutionPolicy is one of the three standard policies, std::terminate is
       called. For any other ExecutionPolicy, the behavior is implementation-defined.
     * If the algorithm fails to allocate memory, std::bad_alloc is thrown.

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

                            computes the differences between adjacent elements in a
   adjacent_difference      range
                            \fI(function template)\fP 
   accumulate               sums up a range of elements
                            \fI(function template)\fP 
   partial_sum              computes the partial sum of a range of elements
                            \fI(function template)\fP 
   transform_exclusive_scan applies a functor, then calculates exclusive scan
   \fI(C++17)\fP                  \fI(function template)\fP 
   inclusive_scan           similar to std::partial_sum, includes the ith input element
   \fI(C++17)\fP                  in the ith sum
                            \fI(function template)\fP 

.SH Category:

     * Todo no example
