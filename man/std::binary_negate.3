.TH std::binary_negate 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::binary_negate \- std::binary_negate

.SH Synopsis
   Defined in header <functional>
   template< class Predicate >

   struct binary_negate :
       public std::binary_function<
           Predicate::first_argument_type,   \fI(until C++11)\fP
           Predicate::second_argument_type,
           bool

       >;
   template< class Predicate >               \fI(since C++11)\fP
   struct binary_negate;                     (deprecated in C++17)

   binary_negate is a wrapper function object returning the complement of the binary
   predicate it holds.

   The binary predicate type must define two member types, first_argument_type and
   second_argument_type, that are convertible to the predicate's parameter types. The
   function objects obtained from std::owner_less, std::ref, std::cref, std::plus,
   std::minus, std::multiplies, std::divides, std::modulus, std::equal_to,
   std::not_equal_to, std::greater, std::less, std::greater_equal, std::less_equal,
   std::logical_not, std::logical_or, std::bit_and, std::bit_or, std::bit_xor,
   std::mem_fn, std::map::value_comp, std::multimap::value_comp, std::function, or from
   a call to std::not2 have these types defined, as are function objects derived from
   the deprecated std::binary_function.

   binary_negate objects are easily constructed with helper function std::not2.

.SH Member types

   Type                 Definition
   first_argument_type  Predicate::first_argument_type
   second_argument_type Predicate::second_argument_type
   result_type          bool

.SH Member functions

   constructor   constructs a new binary_negate object with the supplied predicate
                 \fI(public member function)\fP
                 returns the logical complement of the result of a call to the stored
   operator()    predicate
                 \fI(public member function)\fP

std::binary_negate::binary_negate

   explicit binary_negate( Predicate const& pred );            \fI(until C++14)\fP
   explicit constexpr binary_negate( Predicate const& pred );  \fI(since C++14)\fP

   Constructs a binary_negate function object with the stored predicate pred.

.SH Parameters

   pred - predicate function object

std::binary_negate::operator()

   bool operator()( first_argument_type const& x,                     \fI(until C++14)\fP
                    second_argument_type const& y ) const;
   constexpr bool operator()( first_argument_type const& x,           \fI(since C++14)\fP
                              second_argument_type const& y ) const;

   Returns the logical complement of the result of calling pred(x, y).

.SH Parameters

   x - first argument to pass through to predicate
   y - second argument to pass through to predicate

.SH Return value

   The logical complement of the result of calling pred(x, y).

.SH Example

   
// Run this code

 #include <algorithm>
 #include <functional>
 #include <iostream>
 #include <vector>
  
 struct same : std::binary_function<int, int, bool>
 {
     bool operator()(int a, int b) const { return a == b; }
 };
  
 int main()
 {
     std::vector<int> v1;
     std::vector<int> v2;
     for (int i = 0; i < 10; ++i) v1.push_back(i);
     for (int i = 0; i < 10; ++i) v2.push_back(10 - i);
  
     std::vector<bool> v3(v1.size());
  
     std::binary_negate<same> not_same((same()));
  
     std::transform(v1.begin(), v1.end(), v2.begin(), v3.begin(), not_same);
  
     /* C++11 solution:
         // Use std::function<bool (int, int)>
         std::function<bool (int, int)> not_same =
             [](int x, int y)->bool{ return !same()(x, y); };
  
         std::transform(v1.begin(), v1.end(), v2.begin(), v3.begin(), not_same);
     */
  
     std::cout.setf(std::ios_base::boolalpha);
     for (int i = 0; i < 10; ++i)
         std::cout << v1[i] << ' ' << v2[i] << ' ' << v3[i] << '\\n';
 }

.SH Output:

 0 10 true
 1 9 true
 2 8 true
 3 7 true
 4 6 true
 5 5 false
 6 4 true
 7 3 true
 8 2 true
 9 1 true

.SH See also

   binary_function       adaptor-compatible binary function base class
   (deprecated in C++11) \fI(class template)\fP 
   (removed in C++17)
   function              wraps callable object of any type with specified function call
   \fI(C++11)\fP               signature
                         \fI(class template)\fP 
   not2                  constructs custom std::binary_negate object
   (deprecated in C++17) \fI(function template)\fP 
   ptr_fun               creates an adaptor-compatible function object wrapper from a
   (deprecated in C++11) pointer to function
   (removed in C++17)    \fI(function template)\fP 
   unary_negate          wrapper function object returning the complement of the unary
   (deprecated in C++17) predicate it holds
                         \fI(class template)\fP 
