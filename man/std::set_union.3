.TH std::set_union 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::set_union \- std::set_union

.SH Synopsis
   Defined in header <algorithm>
   template< class InputIt1, class InputIt2, class
   OutputIt >

   OutputIt set_union( InputIt1 first1, InputIt1
   last1,                                                   \fI(until C++20)\fP
                       InputIt2 first2, InputIt2
   last2,

                       OutputIt d_first );
   template< class InputIt1, class InputIt2, class
   OutputIt >

   constexpr OutputIt set_union( InputIt1 first1,
   InputIt1 last1,                                          \fI(since C++20)\fP
                                 InputIt2 first2,
   InputIt2 last2,

                                 OutputIt d_first
   );
   template< class ExecutionPolicy, class
   ForwardIt1, class ForwardIt2, class ForwardIt3 >

   ForwardIt3 set_union( ExecutionPolicy&& policy,
   ForwardIt1 first1, ForwardIt1 last1,                 \fB(2)\fP \fI(since C++17)\fP
                       ForwardIt2 first2,
   ForwardIt2 last2,

                       ForwardIt3 d_first );
   template< class InputIt1, class InputIt2,
                                                    \fB(1)\fP
             class OutputIt, class Compare >
   OutputIt set_union( InputIt1 first1, InputIt1
   last1,                                                                 \fI(until C++20)\fP
                       InputIt2 first2, InputIt2
   last2,

                       OutputIt d_first, Compare
   comp );
   template< class InputIt1, class InputIt2,

             class OutputIt, class Compare >
   constexpr OutputIt set_union( InputIt1 first1,
   InputIt1 last1,                                                        \fI(since C++20)\fP
                                 InputIt2 first2,       \fB(3)\fP
   InputIt2 last2,

                                 OutputIt d_first,
   Compare comp );
   template< class ExecutionPolicy, class
   ForwardIt1, class ForwardIt2,

             class ForwardIt3, class Compare >
   ForwardIt3 set_union( ExecutionPolicy&& policy,
   ForwardIt1 first1, ForwardIt1 last1,                     \fB(4)\fP           \fI(since C++17)\fP
                       ForwardIt2 first2,
   ForwardIt2 last2,

                       ForwardIt3 d_first, Compare
   comp );

   Constructs a sorted range beginning at d_first consisting of all elements present in
   one or both sorted ranges [first1, last1) and [first2, last2).

   If some element is found m times in [first1, last1) and n times in [first2, last2),
   then all m elements will be copied from [first1, last1) to d_first, preserving
   order, and then exactly std::max(n-m, 0) elements will be copied from [first2,
   last2) to d_first, also preserving order.

   The resulting range cannot overlap with either of the input ranges.

   1) Elements are compared using operator< and the ranges must be sorted with respect
   to the same.
   3) Elements are compared using the given binary comparison function comp and the
   ranges must be sorted with respect to the same.
   2,4) Same as (1,3), but executed according to policy. This overload only
   participates in overload resolution if
   std::is_execution_policy_v<std::decay_t<ExecutionPolicy>> is true

.SH Parameters

   first1, last1 - the first input sorted range
   first2, last2 - the second input sorted range
   policy        - the execution policy to use. See execution policy for details.
                   comparison function object (i.e. an object that satisfies the
                   requirements of Compare) which returns true if the first argument
                   is less than (i.e. is ordered before) the second.

                   The signature of the comparison function should be equivalent to the
                   following:
   comp          -
                    bool cmp(const Type1 &a, const Type2 &b);

                   The signature does not need to have const &, but the function object
                   must not modify the objects passed to it.
                   The types Type1 and Type2 must be such that objects of types
                   InputIt1 and InputIt2 can be dereferenced and then implicitly
                   converted to both Type1 and Type2. 
.SH Type requirements
   -
   InputIt1, InputIt2 must meet the requirements of InputIterator.
   -
   ForwardIt1, ForwardIt2, ForwardIt3 must meet the requirements of ForwardIterator.
   -
   OutputIt must meet the requirements of OutputIterator.

.SH Return value

   Iterator past the end of the constructed range.

.SH Complexity

   At most 2Â·(N[1]+N[2]-1) comparisons, where N[1] = std::distance(first1, last1) and
   N[2] = std::distance(first2, last2).

.SH Exceptions

   The overloads with a template parameter named ExecutionPolicy report errors as
   follows:

     * If execution of a function invoked as part of the algorithm throws an exception
       and ExecutionPolicy is one of the three standard policies, std::terminate is
       called. For any other ExecutionPolicy, the behavior is implementation-defined.
     * If the algorithm fails to allocate memory, std::bad_alloc is thrown.

.SH Notes

   This algorithm performs a similar task as std::merge does. Both consume two sorted
   input ranges and produce a sorted output with elements from both inputs. The
   difference between these two algorithms is with handling values from both input
   ranges which compare equivalent (see notes on LessThanComparable). If any equivalent
   values appeared n times in the first range and m times in the second, std::merge
   would output all n+m occurrences whereas std::set_union would output std::max(n, m)
   ones only. So std::merge outputs exactly std::distance(first1, last1) +
   std::distance(first2, last2) values and std::set_union may produce less.

.SH Possible implementation

.SH First version
   template<class InputIt1, class InputIt2, class OutputIt>
   OutputIt set_union(InputIt1 first1, InputIt1 last1,
                      InputIt2 first2, InputIt2 last2,
                      OutputIt d_first)
   {
       for (; first1 != last1; ++d_first) {
           if (first2 == last2)
               return std::copy(first1, last1, d_first);
           if (*first2 < *first1) {
               *d_first = *first2++;
           } else {
               *d_first = *first1;
               if (!(*first1 < *first2))
                   ++first2;
               ++first1;
           }
       }
       return std::copy(first2, last2, d_first);
   }
.SH Second version
   template<class InputIt1, class InputIt2,
            class OutputIt, class Compare>
   OutputIt set_union(InputIt1 first1, InputIt1 last1,
                      InputIt2 first2, InputIt2 last2,
                      OutputIt d_first, Compare comp)
   {
       for (; first1 != last1; ++d_first) {
           if (first2 == last2)
               return std::copy(first1, last1, d_first);
           if (comp(*first2, *first1)) {
               *d_first = *first2++;
           } else {
               *d_first = *first1;
               if (!comp(*first1, *first2))
                   ++first2;
               ++first1;
           }
       }
       return std::copy(first2, last2, d_first);
   }

.SH Example

   Example with vectors :

   
// Run this code

 #include <vector>
 #include <iostream>
 #include <algorithm>
 #include <iterator>
  
 int main()
 {
     std::vector<int> v1 = {1, 2, 3, 4, 5};
     std::vector<int> v2 = {      3, 4, 5, 6, 7};
     std::vector<int> dest1;
  
     std::set_union(v1.begin(), v1.end(),
                    v2.begin(), v2.end(),
                    std::back_inserter(dest1));
  
     for (const auto &i : dest1) {
         std::cout << i << ' ';
     }
     std::cout << '\\n';
 }

.SH Output:

 1 2 3 4 5 6 7

.SH See also

   includes                 returns true if one set is a subset of another
                            \fI(function template)\fP 
   merge                    merges two sorted ranges
                            \fI(function template)\fP 
   set_difference           computes the difference between two sets
                            \fI(function template)\fP 
   set_intersection         computes the intersection of two sets
                            \fI(function template)\fP 
   set_symmetric_difference computes the symmetric difference between two sets
                            \fI(function template)\fP 
