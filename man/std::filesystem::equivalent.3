.TH std::filesystem::equivalent 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::filesystem::equivalent \- std::filesystem::equivalent

.SH Synopsis
   Defined in header <filesystem>
   bool equivalent( const std::filesystem::path& p1,

                    const std::filesystem::path& p2 );
   bool equivalent( const std::filesystem::path& p1,   \fB(1)\fP \fI(since C++17)\fP
                    const std::filesystem::path& p2,

                    std::error_code& ec ) noexcept;

   Checks whether the paths p1 and p2 resolve to the same file system entity.

   If either p1 or p2 does not exist, an error is reported.

   The non-throwing overload returns false on errors.

.SH Parameters

   p1, p2 - paths to check for equivalence
   ec     - out-parameter for error reporting in the non-throwing overload

.SH Return value

   true if the p1 and p2 refer to the same file or directory and their file status is
   the same. false otherwise.

.SH Exceptions

   The overload that does not take a std::error_code& parameter throws filesystem_error
   on underlying OS API errors, constructed with p1 as the first argument, p2 as the
   second argument, and the OS error code as the error code argument. The overload
   taking a std::error_code& parameter sets it to the OS API error code if an OS API
   call fails, and executes ec.clear() if no errors occur. Any overload not marked
   noexcept may throw std::bad_alloc if memory allocation fails.

.SH Notes

   Two paths are considered to resolve to the same file system entity if the two
   candidate entities the paths resolve to are located on the same device at the same
   location. For POSIX, this means that the st_dev and st_ino members of their POSIX
   stat structure, obtained as if by POSIX stat, are equal.

   In particular, all hard links for the same file or directory are equivalent, and a
   symlink and its target on the same file system are equivalent.

   Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

      DR    Applied to         Behavior as published         Correct behavior
   LWG 2937 C++17      error condition specified incorrectly corrected

.SH Example

   
// Run this code

 #include <iostream>
 #include <cstdint>
 #include <filesystem>
 namespace fs = std::filesystem;
 int main()
 {
     // hard link equivalency
     fs::path p1 = ".";
     fs::path p2 = fs::current_path();
     if(fs::equivalent(p1, p2))
         std::cout << p1 << " is equivalent to " << p2 << '\\n';
  
     // symlink equivalency
     fs::path p3 = "/lib/libc.so.6";
     fs::path p4 = p3.parent_path() / fs::read_symlink(p3);
     if(fs::equivalent(p3, p4))
         std::cout << p3 << " is equivalent to " << p4 << '\\n';
 }

.SH Possible output:

 "." is equivalent to "/var/tmp/test"
 "/lib/libc.so.6" is equivalent to "/lib/libc-2.12.so"

.SH See also

   status         determines file attributes
   symlink_status determines file attributes, checking the symlink target
   \fI(C++17)\fP        \fI(function)\fP 
   \fI(C++17)\fP
