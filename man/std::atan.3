.TH std::atan 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::atan \- std::atan

.SH Synopsis
   Defined in header <cmath>
   float       atan( float arg );       \fB(1)\fP
   double      atan( double arg );      \fB(2)\fP
   long double atan( long double arg ); \fB(3)\fP
   double      atan( Integral arg );    \fB(4)\fP \fI(since C++11)\fP

   Computes the principal value of the arc tangent of arg

   4) A set of overloads or a function template accepting an argument of any integral
   type. Equivalent to 2) (the argument is cast to double).

.SH Parameters

   arg - value of a floating-point or Integral type

.SH Return value

   If no errors occur, the arc tangent of arg (arctan(arg)) in the range [-

   π
   2

   , +

   π
   2

   ] radians, is returned.

   If a range error occurs due to underflow, the correct result (after rounding) is
   returned.

.SH Error handling

   Errors are reported as specified in math_errhandling

   If the implementation supports IEEE floating-point arithmetic (IEC 60559),

     * If the argument is ±0, it is returned unmodified
     * If the argument is +∞, +π/2 is returned
     * If the argument is -∞, -π/2 is returned
     * if the argument is NaN, NaN is returned

.SH Notes

   POSIX specifies that in case of underflow, arg is returned unmodified, and if that
   is not supported, and implementation-defined value no greater than DBL_MIN, FLT_MIN,
   and LDBL_MIN is returned.

.SH Examples

   
// Run this code

 #include <iostream>
 #include <cmath>
  
 int main()
 {
     std::cout << "atan(1) = " << atan(1) << " 4*atan(1) = " << 4*atan(1) << '\\n';
     // special values
     std::cout << "atan(Inf) = " << atan(INFINITY)
               << " 2*atan(Inf) = " << 2*atan(INFINITY) << '\\n'
               << "atan(-0.0) = " << atan(-0.0) << '\\n'
               << "atan(+0.0) = " << atan(0) << '\\n';
 }

.SH Output:

 atan\fB(1)\fP = 0.785398 4*atan(1) = 3.14159
 atan(Inf) = 1.5708 2*atan(Inf) = 3.14159
 atan(-0.0) = -0
 atan(+0.0) = 0

.SH See also

   asin                computes arc sine (arcsin(x))
                       \fI(function)\fP 
   acos                computes arc cosine (arccos(x))
                       \fI(function)\fP 
   atan2               arc tangent, using signs to determine quadrants
                       \fI(function)\fP 
   tan                 computes tangent (tan(x))
                       \fI(function)\fP 
   atan(std::complex)  computes arc tangent of a complex number (arctan(z))
   \fI(C++11)\fP             \fI(function template)\fP 
   atan(std::valarray) applies the function std::atan to each element of valarray
                       \fI(function template)\fP 
   C documentation for
   atan
