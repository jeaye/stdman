.TH std::vector<bool> 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::vector<bool> \- std::vector<bool>

.SH Synopsis
   Defined in header <vector>
   template<class Allocator>
   class vector<bool, Allocator>;

   std::vector<bool> is a possibly space-efficient specialization of std::vector for
   the type bool.

   The manner in which std::vector<bool> is made space efficient (as well as whether it
   is optimized at all) is implementation defined. One potential optimization involves
   coalescing vector elements such that each element occupies a single bit instead of
   sizeof(bool) bytes.

   std::vector<bool> behaves similarly to std::vector, but in order to be space
   efficient, it:

     * Does not necessarily store its elements as a contiguous array (so &v[0] + n !=
       &v[n])
     * Exposes class std::vector<bool>::reference as a method of accessing individual
       bits. In particular, objects of this class are returned by operator[] by value.
     * Does not use std::allocator_traits::construct to construct bit values.
     * Does not guarantee that different elements in the same container can be modified
       concurrently by different threads.

.SH Member types

   Member type            Definition
   value_type             bool 
   allocator_type         Allocator 
   size_type              implementation-defined 
   difference_type        implementation-defined
   reference              proxy class representing a reference to a single bool
                          \fI(class)\fP
   const_reference        bool 
   pointer                implementation-defined
   const_pointer          implementation-defined
   iterator               implementation-defined 
   const_iterator         implementation-defined 
   reverse_iterator       std::reverse_iterator<iterator> 
   const_reverse_iterator std::reverse_iterator<const_iterator> 

.SH Member functions

   constructor   constructs the vector
                 \fI(public member function of std::vector)\fP 
   destructor    destructs the vector
                 \fI(public member function of std::vector)\fP 
   operator=     assigns values to the container
                 \fI(public member function of std::vector)\fP 
   assign        assigns values to the container
                 \fI(public member function of std::vector)\fP 
   get_allocator returns the associated allocator
                 \fI(public member function of std::vector)\fP 
.SH Element access
   at            access specified element with bounds checking
                 \fI(public member function of std::vector)\fP 
   operator[]    access specified element
                 \fI(public member function of std::vector)\fP 
   front         access the first element
                 \fI(public member function of std::vector)\fP 
   back          access the last element
                 \fI(public member function of std::vector)\fP 
.SH Iterators
   begin         returns an iterator to the beginning
   cbegin        \fI(public member function of std::vector)\fP 
   end           returns an iterator to the end
   cend          \fI(public member function of std::vector)\fP 
   rbegin        returns a reverse iterator to the beginning
   crbegin       \fI(public member function of std::vector)\fP 
   rend          returns a reverse iterator to the end
   crend         \fI(public member function of std::vector)\fP 
.SH Capacity
   empty         checks whether the container is empty
                 \fI(public member function of std::vector)\fP 
   size          returns the number of elements
                 \fI(public member function of std::vector)\fP 
   max_size      returns the maximum possible number of elements
                 \fI(public member function of std::vector)\fP 
   reserve       reserves storage
                 \fI(public member function of std::vector)\fP 
                 returns the number of elements that can be held in currently allocated
   capacity      storage
                 \fI(public member function of std::vector)\fP 
.SH Modifiers
   clear         clears the contents
                 \fI(public member function of std::vector)\fP 
   insert        inserts elements
                 \fI(public member function of std::vector)\fP 
   emplace       constructs element in-place
   \fI(C++14)\fP       \fI(public member function of std::vector)\fP 
   erase         erases elements
                 \fI(public member function of std::vector)\fP 
   push_back     adds an element to the end
                 \fI(public member function of std::vector)\fP 
   emplace_back  constructs elements in-place at the end
   \fI(C++14)\fP       \fI(public member function of std::vector)\fP 
   pop_back      removes the last element
                 \fI(public member function of std::vector)\fP 
   resize        changes the number of elements stored
                 \fI(public member function of std::vector)\fP 
   swap          swaps the contents
                 \fI(public member function of std::vector)\fP 
.SH vector<bool> specific modifiers
   flip          flips all the bits
                 \fI(public member function)\fP 
   swap          swaps two std::vector<bool>::references
   \fB[static]\fP      \fI(public static member function)\fP 

.SH Non-member functions

   operator==
   operator!=
   operator<              lexicographically compares the values in the vector
   operator<=             \fI(function template)\fP 
   operator>
   operator>=
   std::swap(std::vector) specializes the std::swap algorithm
                          \fI(function template)\fP 

.SH Helper classes

   std::hash<std::vector<bool>> hash support for std::vector<bool>
   \fI(C++11)\fP                      \fI(class template specialization)\fP 

.SH Notes

   If the size of the bitset is known at compile time, std::bitset may be used, which
   offers a richer set of member functions. In addition, boost::dynamic_bitset exists
   as an alternative to std::vector<bool>.

   Since its representation may by optimized, std::vector<bool> does not necessarily
   meet all Container or SequenceContainer requirements. For example, because
   std::vector<bool>::iterator is implementation-defined, it may not satisfy the
   ForwardIterator requirement. Use of algorithms such as std::search that require
   ForwardIterators may result in either compile-time or run-time errors.
