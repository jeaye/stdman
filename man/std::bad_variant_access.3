.TH std::bad_variant_access 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::bad_variant_access \- std::bad_variant_access

.SH Synopsis
   Defined in header <variant>
   class bad_variant_access : public std::exception  \fI(since C++17)\fP

   std::bad_variant_access is the type of the exception thrown in the following
   situations:

     * std::get(std::variant) called with an index or type that does not match the
       currently active alternative
     * std::visit called to visit a variant that is valueless_by_exception

.SH Member functions

   constructor   constructs the bad_variant_access object
                 \fI(public member function)\fP

std::bad_variant_access ::bad_variant_access()

   bad_variant_access() noexcept;

   Constructs a new instance of std::bad_variant_access.

.SH Parameters

   \fI(none)\fP

Inherited from std::exception

.SH Member functions

   destructor   destroys the exception object
   \fB[virtual]\fP    \fI(virtual public member function of std::exception)\fP 
   what         returns an explanatory string
   \fB[virtual]\fP    \fI(virtual public member function of std::exception)\fP 

.SH Example

   
// Run this code

 #include <variant>
 #include <iostream>
  
 int main()
 {
     std::variant<int, float> v;
     v = 12;
     try {
       std::get<float>(v);
     }
     catch(const std::bad_variant_access& e) {
         std::cout << e.what() << '\\n';
     }
 }

.SH Possible output:

 bad_variant_access

.SH See also

   std::get(std::variant) reads the value of the variant given the index or the type
   \fI(C++17)\fP                (if the type is unique), throws on error
                          \fI(function template)\fP 
   visit                  calls the provided functor with the arguments held by one or
   \fI(C++17)\fP                more variants
                          \fI(function template)\fP 
