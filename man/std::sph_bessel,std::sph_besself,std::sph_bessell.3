.TH std::sph_bessel,std::sph_besself,std::sph_bessell 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::sph_bessel,std::sph_besself,std::sph_bessell \- std::sph_bessel,std::sph_besself,std::sph_bessell

.SH Synopsis
   double      sph_bessel ( unsigned n, double x );

   double      sph_bessel ( unsigned n, float x );
   double      sph_bessel ( unsigned n, long double x ); \fB(1)\fP \fI(since C++17)\fP
   float       sph_besself( unsigned n, float x  );

   long double sph_bessell( unsigned n, long double x );
   double       sph_bessel( unsigned n, Integral x );    \fB(2)\fP \fI(since C++17)\fP

   1) Computes the spherical Bessel function of the first kind of n and x.
   2) A set of overloads or a function template accepting an argument of any integral
   type. Equivalent to \fB(1)\fP after casting the argument to double.

.SH Parameters

   n - the order of the function
   x - the argument of the function

.SH Return value

   If no errors occur, returns the value of the spherical Bessel function of the first
   kind of n and x, that is j
   n(x) = (π/2x)1/2
   J
   n+1/2(x) where J
   n(x) is std::cyl_bessel_j(n,x) and x≥0

.SH Error handling

   Errors may be reported as specified in math_errhandling

     * If the argument is NaN, NaN is returned and domain error is not reported
     * If n>=128, the behavior is implementation-defined

.SH Notes

   Implementations that do not support C++17, but support ISO 29124:2010, provide this
   function if __STDCPP_MATH_SPEC_FUNCS__ is defined by the implementation to a value
   at least 201003L and if the user defines __STDCPP_WANT_MATH_SPEC_FUNCS__ before
   including any standard library headers.

   Implementations that do not support ISO 29124:2010 but support TR 19768:2007 (TR1),
   provide this function in the header tr1/cmath and namespace std::tr1

   An implementation of this function is also available in boost.math

.SH Example

   
// Run this code

 #include <cmath>
 #include <iostream>
 int main()
 {
     // spot check for n == 1
     double x = 1.2345;
     std::cout << "j_1(" << x << ") = " << std::sph_bessel(1, x) << '\\n';
  
     // exact solution for j_1
     std::cout << "(sin x)/x^2 - (cos x)/x = " << std::sin(x)/(x*x) - std::cos(x)/x << '\\n';
 }

.SH Output:

 j_1(1.2345) = 0.352106
 (sin x)/x^2 - (cos x)/x = 0.352106

.SH External links

   Weisstein, Eric W. "Spherical Bessel Function of the First Kind." From MathWorld--A
   Wolfram Web Resource.

.SH See also

   cyl_bessel_j
   cyl_bessel_jf
   cyl_bessel_jl cylindrical Bessel functions (of the first kind)
   \fI(C++17)\fP       \fI(function)\fP 
   \fI(C++17)\fP
   \fI(C++17)\fP
   sph_neumann
   sph_neumannf
   sph_neumannl  spherical Neumann functions
   \fI(C++17)\fP       \fI(function)\fP 
   \fI(C++17)\fP
   \fI(C++17)\fP
