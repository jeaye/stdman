.TH std::is_unsigned 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_unsigned \- std::is_unsigned

.SH Synopsis
   Defined in header <type_traits>
   template< class T >              \fI(since C++11)\fP
   struct is_unsigned;

   If T is an arithmetic type, provides the member constant value equal true if T\fB(0)\fP <
   T(-1): this results in true for the unsigned integer types and the type bool and in
   false for the signed integer types and the floating-point types.

   For any other type, value is false.

.SH Template parameters

   T - a type to check

   Helper variable template

   template< class T >                                           \fI(since C++17)\fP
   inline constexpr bool is_unsigned_v = is_unsigned<T>::value;

   

Inherited from std::integral_constant

.SH Member constants

   value    true if T is an unsigned arithmetic type , false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP
   operator()    returns value
   \fI(C++14)\fP       \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Possible implementation

   namespace detail {
   template<typename T,bool = std::is_arithmetic<T>::value>
   struct is_unsigned : std::integral_constant<bool, T\fB(0)\fP < T(-1)> {};
    
   template<typename T>
   struct is_unsigned<T,false> : std::false_type {};
   } // namespace detail
    
   template<typename T>
   struct is_unsigned : detail::is_unsigned<T>::type {};

.SH Example

   
// Run this code

 #include <iostream>
 #include <type_traits>
  
 class A {};
 enum B : unsigned {};
 enum class C : unsigned {};
  
 int main()
 {
     std::cout << std::boolalpha;
     std::cout << std::is_unsigned<A>::value << '\\n';
     std::cout << std::is_unsigned<float>::value << '\\n';
     std::cout << std::is_unsigned<signed int>::value << '\\n';
     std::cout << std::is_unsigned<unsigned int>::value << '\\n';
     std::cout << std::is_unsigned<B>::value << '\\n';
     std::cout << std::is_unsigned<C>::value << '\\n';
 }

.SH Output:

 false
 false
 false
 true
 false
 false

.SH See also

   is_signed     checks if a type is signed arithmetic type
   \fI(C++11)\fP       \fI(class template)\fP 
   is_arithmetic checks if a type is arithmetic type
   \fI(C++11)\fP       \fI(class template)\fP 
   make_signed   makes the given integral type signed
   \fI(C++11)\fP       \fI(class template)\fP 
   make_unsigned makes the given integral type unsigned
   \fI(C++11)\fP       \fI(class template)\fP 
