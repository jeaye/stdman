.TH std::experimental::any 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::experimental::any \- std::experimental::any

.SH Synopsis
   Defined in header <experimental/any>
   class any;                            (library fundamentals TS)

   The class any describes a type-safe container for single values of any type.

   1) An object of class any stores an instance of any type that satisfies the
   constructor requirements or is empty, and this is referred to as the state of the
   class any object. The stored instance is called the contained object. Two states are
   equivalent if they are either both empty or if both are not empty and if the
   contained objects are equivalent.
   2) The non-member any_cast functions provide type-safe access to the contained
   object.

   Implementations are encouraged to avoid dynamic allocations for small objects, but
   such an optimization may only be applied to types that for which
   std::is_nothrow_move_constructible returns true.

.SH Member functions

   constructor   constructs an any object
                 \fI(public member function)\fP 
   operator=     assigns an any object
                 \fI(public member function)\fP 
   destructor    destroys an any object
                 \fI(public member function)\fP 
         Modifers
   clear         destroys contained object
                 \fI(public member function)\fP 
   swap          swaps two any objects
                 \fI(public member function)\fP 
.SH Observers
   empty         checks if object holds a value
                 \fI(public member function)\fP 
   type          returns the typeid of the contained value
                 \fI(public member function)\fP 

.SH Non-member functions

   swap     swaps two any instances
            \fI(function)\fP 
   any_cast type-safe access to the contained object
            \fI(function template)\fP 

.SH Helper classes

   bad_any_cast              exception thrown by the value-returning forms of any_cast
   (library fundamentals TS) on a type mismatch
                             \fI(class)\fP 
