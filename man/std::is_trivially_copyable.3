.TH std::is_trivially_copyable 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_trivially_copyable \- std::is_trivially_copyable

.SH Synopsis
   Defined in header <type_traits>
   template< class T >              \fI(since C++11)\fP
   struct is_trivially_copyable;

   If T is a TriviallyCopyable type, provides the member constant value equal true. For
   any other type, value is false.

   The only trivially copyable types are scalar types, trivially copyable classes, and
   arrays of such types/classes (possibly const-qualified, but not volatile-qualified).

   The behavior is undefined if std::remove_all_extents_t<T> is an incomplete type and
   not (possibly cv-qualified) void.

.SH Template parameters

   T - a type to check

   Helper variable template

   template< class T >
   inline constexpr bool is_trivially_copyable_v =                        \fI(since C++17)\fP
   is_trivially_copyable<T>::value;

   

Inherited from std::integral_constant

.SH Member constants

   value    true if T is a trivially copyable type , false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP
   operator()    returns value
   \fI(C++14)\fP       \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Notes

   Objects of trivially-copyable types are the only C++ objects that may be safely
   copied with std::memcpy or serialized to/from binary files with
   std::ofstream::write()/std::ifstream::read(). In general, a trivially copyable type
   is any type for which the underlying bytes can be copied to an array of char or
   unsigned char and into a new object of the same type, and the resulting object would
   have the same value as the original.

.SH Example

   
// Run this code

 #include <iostream>
 #include <type_traits>
  
 struct A {
     int m;
 };
  
 struct B {
     B(const B&) {}
 };
  
 struct C {
     virtual void foo();
 };
  
 int main()
 {
     std::cout << std::boolalpha;
     std::cout << std::is_trivially_copyable<A>::value << '\\n';
     std::cout << std::is_trivially_copyable<B>::value << '\\n';
     std::cout << std::is_trivially_copyable<C>::value << '\\n';
 }

.SH Output:

 true
 false
 false

.SH See also

   is_trivial checks if a type is trivial
   \fI(C++11)\fP    \fI(class template)\fP 
