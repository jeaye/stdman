.TH std::is_partitioned 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_partitioned \- std::is_partitioned

.SH Synopsis
   Defined in header <algorithm>
   template< class InputIt, class UnaryPredicate >                        \fI(since C++11)\fP
   bool is_partitioned( InputIt first, InputIt last,                      (until C++20)
   UnaryPredicate p );
   template< class InputIt, class UnaryPredicate >
   constexpr bool is_partitioned( InputIt first, InputIt last,    \fB(1)\fP     (since C++20)
   UnaryPredicate p );
   template< class ExecutionPolicy, class ForwardIt, class
   UnaryPredicate >                                                   \fB(2)\fP \fI(since C++17)\fP
   bool is_partitioned( ExecutionPolicy&& policy, ForwardIt
   first, ForwardIt last, UnaryPredicate p );

   1) Returns true if all elements in the range [first, last) that satisfy the
   predicate p appear before all elements that don't. Also returns true if [first,
   last) is empty.
   2) Same as \fB(1)\fP, but executed according to policy. This overload only participates in
   overload resolution if std::is_execution_policy_v<std::decay_t<ExecutionPolicy>> is
   true

.SH Parameters

   first, last - the range of elements to check
   policy      - the execution policy to use. See execution policy for details.
                 unary predicate which returns true for the elements expected to be
                 found in the beginning of the range.

                 The signature of the predicate function should be equivalent to the
                 following:
   p           -
                  bool pred(const Type &a);

                 The signature does not need to have const &, but the function must not
                 modify the objects passed to it.
                 The type Type must be such that an object of type InputIt can be
                 dereferenced and then implicitly converted to Type. 
.SH Type requirements
   -
   InputIt must meet the requirements of InputIterator.
   -
   ForwardIt must meet the requirements of ForwardIterator. and its value type must be
   convertible to UnaryPredicate's argument type
   -
   UnaryPredicate must meet the requirements of Predicate.

.SH Return value

   true if the range [first, last) is empty or is partitioned by p. false otherwise.

.SH Complexity

   At most std::distance(first, last) applications of p.

.SH Exceptions

   The overload with a template parameter named ExecutionPolicy reports errors as
   follows:

     * If execution of a function invoked as part of the algorithm throws an exception
       and ExecutionPolicy is one of the three standard policies, std::terminate is
       called. For any other ExecutionPolicy, the behavior is implementation-defined.
     * If the algorithm fails to allocate memory, std::bad_alloc is thrown.

.SH Possible implementation

   template< class InputIt, class UnaryPredicate >
   bool is_partitioned(InputIt first, InputIt last, UnaryPredicate p)
   {
       for (; first != last; ++first)
           if (!p(*first))
               break;
       for (; first != last; ++first)
           if (p(*first))
               return false;
       return true;
   }

.SH Example

   
// Run this code

 #include <algorithm>
 #include <array>
 #include <iostream>
  
 int main()
 {
     std::array<int, 9> v = { 1, 2, 3, 4, 5, 6, 7, 8, 9 };
  
     auto is_even = [](int i){ return i % 2 == 0; };
     std::cout.setf(std::ios_base::boolalpha);
     std::cout << std::is_partitioned(v.begin(), v.end(), is_even) << ' ';
  
     std::partition(v.begin(), v.end(), is_even);
     std::cout << std::is_partitioned(v.begin(), v.end(), is_even) << ' ';
  
     std::reverse(v.begin(), v.end());
     std::cout << std::is_partitioned(v.begin(), v.end(), is_even);
 }

.SH Output:

 false true false

.SH See also

   partition       divides a range of elements into two groups
                   \fI(function template)\fP 
   partition_point locates the partition point of a partitioned range
   \fI(C++11)\fP         \fI(function template)\fP 
