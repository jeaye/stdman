.TH std::strstreambuf::pcount 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::strstreambuf::pcount \- std::strstreambuf::pcount

.SH Synopsis
   int pcount() const;

   Returns the number of characters written to the output sequence.

   If the next pointer for the put area (std::streambuf::pptr()) is a null pointer,
   returns zero.

   Otherwise, returns the next pointer in the put area minus the beginning pointer in
   the put area, that is pptr() - pbase()

.SH Parameters

   \fI(none)\fP

.SH Return value

   The number of characters written to the put area.

.SH Example

   
// Run this code

 #include <strstream>
 #include <iostream>
  
 int main()
 {
     std::strstream dyn; // dynamically-allocated output buffer
     dyn << "Test: " << 1.23 << std::ends;
     std::strstreambuf* buf = dyn.rdbuf();
     std::cout << "The size of the output is "
               << buf->pcount() // or just buf.pcount()
               << " and it holds \\"" << dyn.str() << "\\"\\n";
     dyn.freeze(false); // after calling .str() on a dynamic strstream
  
     char arr[10];
     std::ostrstream user(arr, 10); // user-provided output buffer
     buf = user.rdbuf();
     user << 1.23; // note: no std::ends
     std::cout.write(arr, buf->pcount()); // or just user.pcount()
     std::cout << '\\n';
  
     std::istrstream lit("1 2 3"); // read-only fixed-size buffer
     buf = lit.rdbuf();
     // istrstream has no member pcount(), so lit.pcount() won't work
     std::cout << "Input-only pcount() = " << buf->pcount() << '\\n';
 }

.SH Output:

 The size of the output is 11 and it holds "Test: 1.23"
 1.23
 Input-only pcount() = 0

.SH See also

   pcount obtains the number of characters written
          \fI(public member function of std::strstream)\fP 
   pcount obtains the number of characters written
          \fI(public member function of std::ostrstream)\fP 
