.TH std::size 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::size \- std::size

.SH Synopsis
   Defined in header <iterator>
   template < class C >                                     \fB(1)\fP \fI(since C++17)\fP
   constexpr auto size( const C& c ) -> decltype(c.size());
   template < class T, size_t N >                           \fB(2)\fP \fI(since C++17)\fP
   constexpr size_t size( const T (&array)[N] ) noexcept;

   Returns the size of the given container c or array array.

   1) Returns c.size().
   2) Returns N.

.SH Parameters

   c     - a container with a size method
   array - an array of arbitrary type

.SH Return value

   The size of c or array

.SH Notes

   In addition to being included in <iterator>, std::size is guaranteed to become
   available if any of the following headers are included: <array>, <deque>,
   <forward_list>, <list>, <map>, <regex>, <set>, <string>, <unordered_map>,
   <unordered_set>, and <vector>.

.SH Possible implementation

.SH First version
   template <class C>
   constexpr auto size(const C& c) -> decltype(c.size())
   {
       return c.size();
   }
.SH Second version
   template <class T, std::size_t N>
   constexpr std::size_t size(const T (&array)[N]) noexcept
   {
       return N;
   }

.SH Example

   
// Run this code

 #include <iostream>
 #include <vector>
 #include <iterator>
  
 int main()
 {
     std::vector<int> v = { 3, 1, 4 };
     std::cout << std::size(v) << '\\n';
  
     int a[] = { -5, 10, 15 };
     std::cout << std::size(a) << '\\n';
 }

.SH Output:

 3
 3
