.TH deductionguidesforstd::forward_list 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
deductionguidesforstd::forward_list \- deductionguidesforstd::forward_list

.SH Synopsis
   Defined in header <forward_list>
   template< class InputIt,

             class Alloc = std::allocator<typename
   std::iterator_traits<InputIt>::value_type>>                            \fI(since C++17)\fP
   forward_list(InputIt, InputIt, Alloc = Alloc())

     -> forward_list<typename std::iterator_traits<InputIt>::value_type,
   Alloc>;

   This deduction guide is provided for forward_list to allow deduction from an
   iterator range. This overload only participates in overload resolution if InputIt
   satisfies InputIterator and Alloc satisfies Allocator.

   Note: the extent to which the library determines that a type does not satisfy
   InputIterator is unspecified, except that as a minimum integral types do not qualify
   as input iterators. Likewise, the extent to which it determines that a type does not
   satisfy Allocator is unspecified, except that as a minimum the member type
   Alloc::value_type must exist and the expression
   std::declval<Alloc&>().allocate(std::size_t{}) must be well-formed when treated as
   an unevaluated operand.

.SH Example

   
// Run this code

 #include <forward_list>
 #include <vector>
 int main() {
    std::vector<int> v = {1, 2, 3, 4};
  
    // uses explicit deduction guide to deduce std::forward_list<int>
    std::forward_list x(v.begin(), v.end());
  
    // deduces std::forward_list<std::vector<int>::iterator>
    // first phase of overload resolution for list-initialization selects the candidate
    // synthesized from the initializer-list constructor; second phase is not performed and
    // deduction guide has no effect
    std::forward_list y{v.begin(), v.end()};
 }
