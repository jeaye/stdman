.TH std::has_unique_object_representations 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::has_unique_object_representations \- std::has_unique_object_representations

.SH Synopsis
   Defined in header <type_traits>
   template< class T >                        \fI(since C++17)\fP
   struct has_unique_object_representations;

   If T is TriviallyCopyable and if any two objects of type T with the same value have
   the same object representation, provides the member constant value equal true. For
   any other type, value is false.

   For the purpose of this trait, two arrays have the same value if their elements have
   the same values, two non-union classes have the same value if their direct
   subobjects have the same value, and two unions have the same value if they have the
   same active member and the value of that member are the same.

   It is implementation-defined which scalar types satisfy this trait, but unsigned
   integer types that do not use padding bits are guaranteed to have unique object
   representations.

   The behavior is undefined if T is an incomplete type other than (possibly
   cv-qualified) void or array of unknown bound.

.SH Template parameters

   T - a type to check

   Helper variable template

   template< class T >
   inline constexpr bool has_unique_object_representations_v =            \fI(since C++17)\fP
   has_unique_object_representations<T>::value;

   

Inherited from std::integral_constant

.SH Member constants

   value    true if T has unique object representations , false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP
   operator()    returns value
   \fI(C++14)\fP       \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Notes

   This trait was introduced to make it possible to determine whether a type can be
   correctly hashed by hashing its object representation as a byte array.

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

   is_standard_layout checks if a type is standard-layout type
   \fI(C++11)\fP            \fI(class template)\fP 
   hash               hash function object
   \fI(C++11)\fP            \fI(class template)\fP 

.SH Category:

     * Todo no example
