.TH std::unary_negate 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::unary_negate \- std::unary_negate

.SH Synopsis
   Defined in header <functional>
   template< class Predicate >
   struct unary_negate : public                                          \fI(until C++11)\fP
   std::unary_function<Predicate::argument_type, bool>;
   template< class Predicate >                                           \fI(since C++11)\fP
   struct unary_negate;                                                  (deprecated in
                                                                         C++17)

   unary_negate is a wrapper function object returning the complement of the unary
   predicate it holds.

   The unary predicate type must define a member type, argument_type, that is
   convertible to the predicate's parameter type. The unary function objects obtained
   from std::ref, std::cref, std::negate, std::logical_not, std::mem_fn, std::function,
   std::hash, or from another call to std::not1 have this type defined, as are function
   objects derived from the deprecated std::unary_function.

   unary_negate objects are easily constructed with helper function std::not1.

.SH Member types

   Type          Definition
   argument_type Predicate::argument_type
   result_type   bool

.SH Member functions

   constructor   constructs a new unary_negate object with the supplied predicate
                 \fI(public member function)\fP
                 returns the logical complement of the result of a call to the stored
   operator()    predicate
                 \fI(public member function)\fP

std::unary_negate::unary_negate

   explicit unary_negate( Predicate const& pred );            \fI(until C++14)\fP
   explicit constexpr unary_negate( Predicate const& pred );  \fI(since C++14)\fP

   Constructs a unary_negate function object with the stored predicate pred.

.SH Parameters

   pred - predicate function object

std::unary_negate::operator()

   bool operator()( argument_type const& x ) const;            \fI(until C++14)\fP
   constexpr bool operator()( argument_type const& x ) const;  \fI(since C++14)\fP

   Returns the logical complement of the result of calling pred(x).

.SH Parameters

   x - argument to pass through to predicate

.SH Return value

   The logical complement of the result of calling pred(x).

.SH Example

   
// Run this code

 #include <algorithm>
 #include <functional>
 #include <iostream>
 #include <vector>
  
 struct less_than_7 : std::unary_function<int, bool>
 {
     bool operator()(int i) const { return i < 7; }
 };
  
 int main()
 {
     std::vector<int> v;
     for (int i = 0; i < 10; ++i) v.push_back(i);
  
     std::unary_negate<less_than_7> not_less_than_7((less_than_7()));
  
     std::cout << std::count_if(v.begin(), v.end(), not_less_than_7);
  
     /* C++11 solution:
         // Use std::function<bool (int)>
         std::function<bool (int)> not_less_than_7 =
             [](int x)->bool{ return !less_than_7()(x); };
  
         std::cout << std::count_if(v.begin(), v.end(), not_less_than_7);
     */
 }

.SH Output:

 3

.SH See also

   binary_negate         wrapper function object returning the complement of the binary
   (deprecated in C++17) predicate it holds
                         \fI(class template)\fP 
   function              wraps callable object of any type with specified function call
   \fI(C++11)\fP               signature
                         \fI(class template)\fP 
   not1                  constructs custom std::unary_negate object
   (deprecated in C++17) \fI(function template)\fP 
   ptr_fun               creates an adaptor-compatible function object wrapper from a
   (deprecated in C++11) pointer to function
   (removed in C++17)    \fI(function template)\fP 
   unary_function        adaptor-compatible unary function base class
   (deprecated in C++11) \fI(class template)\fP 
   (removed in C++17)
