.TH std::get_if 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::get_if \- std::get_if

.SH Synopsis
   Defined in header <variant>
   template <std::size_t I, class... Types>

   constexpr std::add_pointer_t<
       std::variant_alternative_t<I,
   std::variant<Types...>>

   > get_if(std::variant<Types...>* pv) noexcept;
   template <std::size_t I, class... Types>

   constexpr std::add_pointer_t<                        \fB(1)\fP \fI(since C++17)\fP
       const std::variant_alternative_t<I,
   variant<Types...>>

   > get_if(const std::variant<Types...>* pv) noexcept;
   template <class T, class... Types>
   constexpr std::add_pointer_t<T>
   get_if(std::variant<Types...>* pv) noexcept;                           \fB(2)\fP (since
   template <class T, class... Types>                                         C++17)
   constexpr std::add_pointer_t<const T> get_if(const
   std::variant<Types...>* pv) noexcept;

   1) Index-based non-throwing accessor: If pv is not a null pointer and pv->index() ==
   I, returns a pointer to the value stored in the variant pointed to by pv. Otherwise,
   returns a null pointer value. The call is ill-formed if I is not a valid index in
   the variant.
   2) Type-based non-throwing accessor: Equivalent to \fB(1)\fP with I being the zero-based
   index of T in Types.... The call is ill-formed if T is not a unique element of
   Types....

.SH Parameters

   I    - index to look up
   Type - unique type to look up
   pv   - pointer to a variant

.SH Return value

   Pointer to the value stored in the pointed-to variant or null pointer on error.

.SH Example

   
// Run this code

 #include <variant>
 #include <iostream>
  
 int main()
 {
     std::variant<int, float> v{12};
  
     if(auto pval = std::get_if<int>(&v))
       std::cout << "variant value: " << *pval << '\\n';
     else
       std::cout << "failed to get value!" << '\\n';
 }

.SH Output:

 variant value: 12

.SH See also

   std::get(std::variant) reads the value of the variant given the index or the type
   \fI(C++17)\fP                (if the type is unique), throws on error
                          \fI(function template)\fP 

.SH Category:

     * Uses of dcl rev begin with nonempty note
