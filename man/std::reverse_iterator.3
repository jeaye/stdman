.TH std::reverse_iterator 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::reverse_iterator \- std::reverse_iterator

.SH Synopsis
   Defined in header <iterator>
   template< class Iterator >

   class reverse_iterator : public std::iterator<
                              typename
   std::iterator_traits<Iterator>::iterator_category,
                              typename
   std::iterator_traits<Iterator>::value_type,                            \fI(until C++17)\fP
                              typename
   std::iterator_traits<Iterator>::difference_type,
                              typename
   std::iterator_traits<Iterator>::pointer,

                              typename
   std::iterator_traits<Iterator>::reference >
   template< class Iterator >                                             \fI(since C++17)\fP
   class reverse_iterator;

   std::reverse_iterator is an iterator adaptor that reverses the direction of a given
   iterator. In other words, when provided with a bidirectional iterator,
   std::reverse_iterator produces a new iterator that moves from the end to the
   beginning of the sequence defined by the underlying bidirectional iterator.

   For a reverse iterator r constructed from an iterator i, the relationship &*r ==
   &*(i-1) is always true (as long as r is dereferenceable); thus a reverse iterator
   constructed from a one-past-the-end iterator dereferences to the last element in a
   sequence.

   This is the iterator returned by member functions rbegin() and rend() of the
   standard library containers.

   range-rbegin-rend.svg

.SH Member types

   Member type       Definition
   value_type        std::iterator_traits<Iterator>::value_type
   difference_type   std::iterator_traits<Iterator>::difference_type
   pointer           std::iterator_traits<Iterator>::pointer
   reference         std::iterator_traits<Iterator>::reference
   iterator_category std::iterator_traits<Iterator>::iterator_category

   These member types are required to be obtained by inheriting from
   std::iterator< std::iterator_traits<Iterator>::iterator_category
   , std::iterator_traits<Iterator>::value_type
   , std::iterator_traits<Iterator>::difference_type                      \fI(until C++17)\fP
   , std::iterator_traits<Iterator>::pointer
   , std::iterator_traits<Iterator>::reference
   >.

   Member type   Definition
   iterator_type Iterator

.SH Member functions

   constructor     constructs a new iterator adaptor
                   \fI(public member function)\fP 
   operator=       assigns another iterator
                   \fI(public member function)\fP 
   base            accesses the underlying iterator
                   \fI(public member function)\fP 
   operator*       accesses the pointed-to element
   operator->      \fI(public member function)\fP 
   operator[]      accesses an element by index
                   \fI(public member function)\fP 
   operator++
   operator++(int)
   operator+=
   operator+       advances or decrements the iterator
   operator--      \fI(public member function)\fP 
   operator--(int)
   operator-=
   operator-

.SH Member objects

   Member name         Definition
   current (protected) a copy of the base() iterator

.SH Non-member functions

   operator==
   operator!=
   operator<  compares the underlying iterators
   operator<= \fI(function template)\fP 
   operator>
   operator>=
   operator+  advances the iterator
              \fI(function template)\fP 
   operator-  computes the distance between two iterator adaptors
              \fI(function template)\fP 

.SH Notes

   std::reverse_iterator does not work with iterators that return a reference to a
   member object (so-called "stashing iterators"). An example of stashing iterator is
   std::filesystem::path::iterator.

.SH Example

   
// Run this code

 #include <iostream>
 #include <string>
 #include <iterator>
  
 int main()
 {
     std::string s = "Hello, world";
     std::reverse_iterator<std::string::iterator> r = s.rbegin();
     r[7] = 'O'; // replaces 'o' with 'O'
     r += 7; // iterator now points at 'O'
     std::string rev(r, s.rend());
     std::cout << rev << '\\n';
 }

.SH Output:

 OlleH

.SH See also

   iterator              base class to ease the definition of required types for simple
   (deprecated in C++17) iterators
                         \fI(class template)\fP 
