.TH std::shared_timed_mutex::try_lock_shared_until 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::shared_timed_mutex::try_lock_shared_until \- std::shared_timed_mutex::try_lock_shared_until

.SH Synopsis
   template< class Clock, class Duration >
   bool try_lock_shared_until( const                                      \fI(since C++14)\fP
   std::chrono::time_point<Clock,Duration>& timeout_time );

   Tries to lock the mutex in shared mode. Blocks until specified timeout_time has been
   reached or the lock is acquired, whichever comes first. On successful lock
   acquisition returns true, otherwise returns false.

   If timeout_time has already passed, this function behaves like try_lock_shared().

   The clock tied to timeout_time is used, which means that adjustments of the clock
   are taken into account. Thus, the maximum duration of the block might, but might
   not, be less or more than timeout_time - Clock::now() at the time of the call,
   depending on the direction of the adjustment. The function also may block for longer
   than until after timeout_time has been reached due to scheduling or resource
   contention delays.

   As with try_lock_shared(), this function is allowed to fail spuriously and return
   false even if the mutex was not locked by any other thread at some point before
   timeout_time.

   Prior unlock() operation on the same mutex synchronizes-with (as defined in
   std::memory_order) this operation if it returns true.

   If try_lock_shared_until is called by a thread that already owns the mutex in any
   mode (shared or exclusive), the behavior is undefined.

.SH Parameters

   timeout_time - maximum time point to block until

.SH Return value

   true if the shared lock ownership was acquired successfully, otherwise false.

.SH Exceptions

   Any exception thrown by clock, time_point, or duration during the execution (clocks,
   time points, and durations provided by the standard library never throw)

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

                       tries to lock the mutex, returns if the mutex has been
   try_lock_until      unavailable until specified time point has been reached
                       \fI(public member function)\fP 
                       tries to lock the mutex for shared ownership, returns if the
   try_lock_shared     mutex is not available
                       \fI(public member function)\fP 
                       tries to lock the mutex for shared ownership, returns if the
   try_lock_shared_for mutex has been
                       unavailable for the specified timeout duration
                       \fI(public member function)\fP 

.SH Category:

     * Todo no example
