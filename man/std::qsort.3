.TH std::qsort 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::qsort \- std::qsort

.SH Synopsis
   Defined in header <cstdlib>
   void qsort( void *ptr, std::size_t count, std::size_t size, /*compare-pred*/*
   comp );                                                                         \fB(1)\fP
   void qsort( void *ptr, std::size_t count, std::size_t size, /*c-compare-pred*/*
   comp );
   extern "C++" using /*compare-pred*/ = int(const void*, const void*); //
   exposition-only                                                                 \fB(2)\fP
   extern "C" using /*c-compare-pred*/ = int(const void*, const void*); //
   exposition-only

   Sorts the given array pointed to by ptr in ascending order. The array contains count
   elements of size bytes. Function pointed to by comp is used for object comparison.

   If comp indicates two elements as equivalent, their order is unspecified.

.SH Parameters

   ptr   - pointer to the array to sort
   count - number of elements in the array
   size  - size of each element in the array in bytes
           comparison function which returns a negative integer value if the first
           argument is less than the second,

           a positive integer value if the first argument is greater than the second
           and zero if the arguments are equal.
           The signature of the comparison function should be equivalent to the
           following:
   comp  -
            int cmp(const void *a, const void *b);

           The function must not modify the objects passed to it and must return
           consistent results when called for the same objects, regardless of their
           positions in the array.

           

.SH Return value

   \fI(none)\fP

.SH Notes

   Despite the name, C++, C, and POSIX standards do not require this function to be
   implemented using quicksort or make any complexity or stability guarantees.

   The type of the elements of the array must be a TrivialType, otherwise the behavior
   is undefined.

   The two overloads provided by the C++ standard library are distinct because the
   types of the parameter comp are distinct (language linkage is part of its type)

.SH Example

   The following code sorts an array of integers using qsort().

   
// Run this code

 #include <iostream>
 #include <cstdlib>
 #include <climits>
  
 int main()
 {
     int a[] = {-2, 99, 0, -743, 2, INT_MIN, 4};
     constexpr std::size_t size = sizeof a / sizeof *a;
  
     std::qsort(a, size, sizeof *a, [](const void* a, const void* b)
     {
         int arg1 = *static_cast<const int*>(a);
         int arg2 = *static_cast<const int*>(b);
  
         if(arg1 < arg2) return -1;
         if(arg1 > arg2) return 1;
         return 0;
  
     //  return (arg1 > arg2) - (arg1 < arg2); // possible shortcut
     //  return arg1 - arg2; // erroneous shortcut (fails if INT_MIN is present)
     });
  
     for(int ai : a)
         std::cout << ai << ' ';
 }

.SH Output:

 -2147483648 -743 -2 0 2 4 99

.SH See also

   bsearch    searches an array for an element of unspecified type
              \fI(function)\fP 
   sort       sorts a range into ascending order
              \fI(function template)\fP 
   is_trivial checks if a type is trivial
   \fI(C++11)\fP    \fI(class template)\fP 
   C documentation for
   qsort
