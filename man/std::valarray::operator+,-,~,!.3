.TH std::valarray::operator+,-,~,! 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::valarray::operator+,-,~,! \- std::valarray::operator+,-,~,!

.SH Synopsis
   valarray<T> operator+() const;    \fB(1)\fP
   valarray<T> operator-() const;    \fB(2)\fP
   valarray<T> operator~() const;    \fB(3)\fP
   valarray<bool> operator!() const; \fB(4)\fP

   Applies unary operators to each element in the numeric array.

.SH Parameters

   \fI(none)\fP

.SH Return value

   A numeric array containing elements with values obtained by applying corresponding
   operator to the values in *this.

.SH Exceptions

   \fI(none)\fP

.SH Notes

   Each of the operators can only be instantiated if the following requirements are
   met:

              * The indicated operator can be applied to type T
              * The result value can be unambiguously converted to T (1-3) or bool \fB(4)\fP.

   The function can be implemented with the return type different from std::valarray.
   In this case, the replacement type has the following properties:

              * All const member functions of std::valarray are provided.
              * std::valarray, std::slice_array, std::gslice_array, std::mask_array and
                std::indirect_array can be constructed from the replacement type.
              * All functions accepting an argument of type const std::valarray&
                except begin() and end()
                \fI(since C++11)\fP should also accept the replacement type.
              * All functions accepting two arguments of type const std::valarray&
                should accept every combination of const std::valarray& and the
                replacement type.
              * The return type does not add more than two levels of template nesting
                over the most deeply-nested argument type.

   Hidden category:

     * Pages with unreviewed LWG DR marker
