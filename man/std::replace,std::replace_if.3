.TH std::replace,std::replace_if 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::replace,std::replace_if \- std::replace,std::replace_if

.SH Synopsis
   Defined in header <algorithm>
   template< class ForwardIt, class T >

   void replace( ForwardIt first, ForwardIt last,           (until C++20)

                 const T& old_value, const T&
   new_value );
   template< class ForwardIt, class T >

   constexpr void replace( ForwardIt first,
   ForwardIt last,                                          (since C++20)

                           const T& old_value,
   const T& new_value );
   template< class ExecutionPolicy, class
   ForwardIt, class T >

   void replace( ExecutionPolicy&& policy,              \fB(2)\fP \fI(since C++17)\fP
   ForwardIt first, ForwardIt last,

                 const T& old_value, const T&
   new_value );
   template< class ForwardIt, class UnaryPredicate,
   class T >                                        \fB(1)\fP

   void replace_if( ForwardIt first, ForwardIt                            (until C++20)
   last,

                    UnaryPredicate p, const T&
   new_value );
   template< class ForwardIt, class UnaryPredicate,
   class T >

   constexpr void replace_if( ForwardIt first,          \fB(3)\fP               (since C++20)
   ForwardIt last,

                              UnaryPredicate p,
   const T& new_value );
   template< class ExecutionPolicy, class
   ForwardIt, class UnaryPredicate, class T >

   void replace_if( ExecutionPolicy&& policy,               \fB(4)\fP           \fI(since C++17)\fP
   ForwardIt first, ForwardIt last,

                    UnaryPredicate p, const T&
   new_value );

   Replaces all elements satisfying specific criteria with new_value in the range
   [first, last).

   1) Replaces all elements that are equal to old_value.
   3) Replaces all elements for which predicate p returns true.
   2,4) Same as (1,3), but executed according to policy. These overloads do not
   participate in overload resolution unless
   std::is_execution_policy_v<std::decay_t<ExecutionPolicy>> is true

.SH Parameters

   first, last - the range of elements to process
   old_value   - the value of elements to replace
   policy      - the execution policy to use. See execution policy for details.
                 unary predicate which returns true if the element value should be
                 replaced.

                 The signature of the predicate function should be equivalent to the
                 following:
   p           -
                  bool pred(const Type &a);

                 The signature does not need to have const &, but the function must not
                 modify the objects passed to it.
                 The type Type must be such that an object of type ForwardIt can be
                 dereferenced and then implicitly converted to Type. 
   new_value   - the value to use as replacement
.SH Type requirements
   -
   ForwardIt must meet the requirements of ForwardIterator.
   -
   UnaryPredicate must meet the requirements of Predicate.

.SH Return value

   \fI(none)\fP

.SH Complexity

   Exactly last - first applications of the predicate.

.SH Exceptions

   The overloads with a template parameter named ExecutionPolicy report errors as
   follows:

     * If execution of a function invoked as part of the algorithm throws an exception
       and ExecutionPolicy is one of the three standard policies, std::terminate is
       called. For any other ExecutionPolicy, the behavior is implementation-defined.
     * If the algorithm fails to allocate memory, std::bad_alloc is thrown.

.SH Notes

   Because the algorithm takes old_value and new_value by reference, it can have
   unexpected behavior if either is a reference to an element of the range [first,
   last).

.SH Possible implementation

.SH First version
   template<class ForwardIt, class T>
   void replace(ForwardIt first, ForwardIt last,
                const T& old_value, const T& new_value)
   {
       for (; first != last; ++first) {
           if (*first == old_value) {
               *first = new_value;
           }
       }
   }
.SH Second version
   template<class ForwardIt, class UnaryPredicate, class T>
   void replace_if(ForwardIt first, ForwardIt last,
                   UnaryPredicate p, const T& new_value)
   {
       for (; first != last; ++first) {
           if(p(*first)) {
               *first = new_value;
           }
       }
   }

.SH Example

   The following code at first replaces all occurrences of 8 with 88 in a vector of
   integers. Then it replaces all values less than 5 with 55.

   
// Run this code

 #include <algorithm>
 #include <array>
 #include <iostream>
 #include <functional>
  
 int main()
 {
     std::array<int, 10> s{5, 7, 4, 2, 8, 6, 1, 9, 0, 3};
  
     std::replace(s.begin(), s.end(), 8, 88);
  
     for (int a : s) {
         std::cout << a << " ";
     }
     std::cout << '\\n';
  
     std::replace_if(s.begin(), s.end(),
                     std::bind(std::less<int>(), std::placeholders::_1, 5), 55);
     for (int a : s) {
         std::cout << a << " ";
     }
     std::cout << '\\n';
 }

.SH Output:

 5 7 4 2 88 6 1 9 0 3
 5 7 55 55 88 6 55 9 55 55

.SH See also

   replace_copy    copies a range, replacing elements satisfying specific criteria with
   replace_copy_if another value
                   \fI(function template)\fP 
