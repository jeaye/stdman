.TH std::experimental::future::future 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::experimental::future::future \- std::experimental::future::future

.SH Synopsis
   future() noexcept;                                                              \fB(1)\fP
   future(std::experimental::future<T>&& f) noexcept;                              \fB(2)\fP
   future(const std::experimental::future<T>&) = delete;                           \fB(3)\fP
   future(std::experimental::future<std::experimental::future<T>> && other)        \fB(4)\fP
   noexcept;

   1) Default constructor. Constructs an empty future object that does not refer to a
   shared state.
   2) Constructs a future object, transferring the shared state held by f, if any.
   After construction, f.valid() is false.
   3) Copy constructor is deleted. future cannot be copied.
   4) Constructs a future object from the shared state referred to by other. The
   resulting future object becomes ready when one of the following happens:

     * other and other.get() are both ready. The value or exception from other.get() is
       stored in the shared state associated with the resulting future object.
     * other is ready, but other.get() is invalid. An exception of type
       std::future_error with an error condition of std::future_errc::broken_promise is
       stored in the shared state associated with the resulting future object.

   After this constructor returns, valid() == true and other.valid() == false.

.SH Parameters

   f     - another future object to initialize with
   other - A std::experimental::future object to unwrap

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

   constructor   constructs the future object
                 \fI(public member function of std::future)\fP 

.SH Category:

     * Todo no example
