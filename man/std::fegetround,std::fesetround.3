.TH std::fegetround,std::fesetround 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::fegetround,std::fesetround \- std::fegetround,std::fesetround

.SH Synopsis
   Defined in header <cfenv>
   int fesetround( int round ) \fB(1)\fP \fI(since C++11)\fP
   int fegetround()            \fB(2)\fP \fI(since C++11)\fP

   Manages the floating-point rounding direction.

   1) Attempts to establish the floating-point rounding direction equal to the argument
   round, which is expected to be one of the floating point rounding macros.
   2) Returns the value of the floating point rounding macro that corresponds to the
   current rounding direction.

.SH Parameters

   round - rounding direction, one of floating point rounding macros

.SH Return value

   1) 0 on success, non-zero otherwise.

   2) the floating point rounding macro describing the current rounding direction or a
   negative value if the direction cannot be determined

.SH Notes

   The current rounding mode, reflecting the effects of the most recent fesetround, can
   also be queried with FLT_ROUNDS

   See floating-point rounding macros for the effects of rounding.

.SH Example

   
   
// Run this code

 #include <cmath>
 #include <cfenv>
 #include <iostream>
  
 int main()
 {
     #pragma STDC FENV_ACCESS ON
     std::fesetround(FE_DOWNWARD);
     std::cout << "rounding using FE_DOWNWARD: \\n" << std::fixed
               << " 12.0 ->  " << std::nearbyint(12.0) << '\\n'
               << " 12.1 ->  " << std::nearbyint(12.1) << '\\n'
               << "-12.1 -> " << std::nearbyint(-12.1) << '\\n'
               << " 12.5 ->  " << std::nearbyint(12.5) << '\\n'
               << " 12.9 ->  " << std::nearbyint(12.9) << '\\n'
               << "-12.9 -> " << std::nearbyint(-12.9) << '\\n'
               << " 13.0 ->  " << std::nearbyint(13.0) << '\\n';
     std::fesetround(FE_TONEAREST);
     std::cout << "rounding using FE_TONEAREST: \\n"
               << " 12.0 ->  " << std::nearbyint(12.0) << '\\n'
               << " 12.1 ->  " << std::nearbyint(12.1) << '\\n'
               << "-12.1 -> " << std::nearbyint(-12.1) << '\\n'
               << " 12.5 ->  " << std::nearbyint(12.5) << '\\n'
               << " 12.9 ->  " << std::nearbyint(12.9) << '\\n'
               << "-12.9 -> " << std::nearbyint(-12.9) << '\\n'
               << " 13.0 ->  " << std::nearbyint(13.0) << '\\n';
 }

.SH Output:

 rounding using FE_DOWNWARD:
  12.0 ->  12.000000
  12.1 ->  12.000000
 -12.1 -> -13.000000
  12.5 ->  12.000000
  12.9 ->  12.000000
 -12.9 -> -13.000000
  13.0 ->  13.000000
 rounding using FE_TONEAREST:
  12.0 ->  12.000000
  12.1 ->  12.000000
 -12.1 -> -12.000000
  12.5 ->  12.000000
  12.9 ->  13.000000
 -12.9 -> -13.000000
  13.0 ->  13.000000

.SH See also

   nearbyint nearest integer using current rounding mode
   \fI(C++11)\fP   \fI(function)\fP 
   rint
   lrint     nearest integer using current rounding mode with
   llrint    exception if the result differs
   \fI(C++11)\fP   \fI(function)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   C documentation for
   fegetround,
   fesetround
