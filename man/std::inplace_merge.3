.TH std::inplace_merge 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::inplace_merge \- std::inplace_merge

.SH Synopsis
   Defined in header <algorithm>
   template< class BidirIt >                                          \fB(1)\fP
   void inplace_merge( BidirIt first, BidirIt middle, BidirIt last );
   template< class ExecutionPolicy, class BidirIt >
   void inplace_merge( ExecutionPolicy&& policy, BidirIt first,       \fB(2)\fP \fI(since C++17)\fP
   BidirIt middle, BidirIt last );
   template< class BidirIt, class Compare>
   void inplace_merge( BidirIt first, BidirIt middle, BidirIt last,   \fB(3)\fP
   Compare comp );
   template< class ExecutionPolicy, class BidirIt, class Compare>
   void inplace_merge( ExecutionPolicy&& policy, BidirIt first,       \fB(4)\fP \fI(since C++17)\fP
   BidirIt middle, BidirIt last, Compare comp );

   Merges two consecutive sorted ranges [first, middle) and [middle, last) into one
   sorted range [first, last). For equivalent elements in the original two ranges, the
   elements from the first range (preserving their original order) precede the elements
   from the second range (preserving their original order).

   1) Elements are compared using operator< and the ranges must be sorted with respect
   to the same.
   3) Elements are compared using the given binary comparison function comp and the
   ranges must be sorted with respect to the same.
   2,4) Same as (1,3), but executed according to policy. These overloads do not
   participate in overload resolution unless
   std::is_execution_policy_v<std::decay_t<ExecutionPolicy>> is true

.SH Parameters

   first   - the beginning of the first sorted range
   middle  - the end of the first sorted range and the beginning of the second
   last    - the end of the second sorted range
   policy  - the execution policy to use. See execution policy for details.
             comparison function object (i.e. an object that satisfies the requirements
             of Compare) which returns true if the first argument is less than (i.e.
             is ordered before) the second.

             The signature of the comparison function should be equivalent to the
             following:
   comp    -
              bool cmp(const Type1 &a, const Type2 &b);

             The signature does not need to have const &, but the function object must
             not modify the objects passed to it.
             The types Type1 and Type2 must be such that an object of type BidirIt can
             be dereferenced and then implicitly converted to both of them. 
.SH Type requirements
   -
   BidirIt must meet the requirements of ValueSwappable and BidirectionalIterator.
   -
   The type of dereferenced BidirIt must meet the requirements of MoveAssignable and
   MoveConstructible.

.SH Return value

   \fI(none)\fP

.SH Complexity

   Given N = std::distance(first, last)},

   1,3) Exactly N-1 comparisons if enough additional memory is available. If the memory
   is insufficient, O(N log N) comparisons.
   2,4) O(N log N) comparisons.

.SH Exceptions

   The overloads with a template parameter named ExecutionPolicy report errors as
   follows:

     * If execution of a function invoked as part of the algorithm throws an exception
       and ExecutionPolicy is one of the three standard policies, std::terminate is
       called. For any other ExecutionPolicy, the behavior is implementation-defined.
     * If the algorithm fails to allocate memory, std::bad_alloc is thrown.

.SH Notes

   This function attempts to allocate a temporary buffer. If the allocation fails, the
   less efficient algorithm is chosen.

.SH Example

   The following code is an implementation of merge sort.

   
// Run this code

 #include <vector>
 #include <iostream>
 #include <algorithm>
  
 template<class Iter>
 void merge_sort(Iter first, Iter last)
 {
     if (last - first > 1) {
         Iter middle = first + (last - first) / 2;
         merge_sort(first, middle);
         merge_sort(middle, last);
         std::inplace_merge(first, middle, last);
     }
 }
  
 int main()
 {
     std::vector<int> v{8, 2, -2, 0, 11, 11, 1, 7, 3};
     merge_sort(v.begin(), v.end());
     for(auto n : v) {
         std::cout << n << ' ';
     }
     std::cout << '\\n';
 }

.SH Output:

 -2 0 1 2 3 7 8 11 11

.SH See also

   merge       merges two sorted ranges
               \fI(function template)\fP 
   sort        sorts a range into ascending order
               \fI(function template)\fP 
   stable_sort sorts a range of elements while preserving order between equal elements
               \fI(function template)\fP 
