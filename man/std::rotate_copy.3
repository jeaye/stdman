.TH std::rotate_copy 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::rotate_copy \- std::rotate_copy

.SH Synopsis
   Defined in header <algorithm>
   template< class ForwardIt, class OutputIt >

   OutputIt rotate_copy( ForwardIt first, ForwardIt n_first,              (until C++20)

                         ForwardIt last, OutputIt d_first );
   template< class ForwardIt, class OutputIt >

   constexpr OutputIt rotate_copy( ForwardIt first, ForwardIt
   n_first,                                                               (since C++20)
                                                                  \fB(1)\fP
                                   ForwardIt last, OutputIt
   d_first );
   template< class ExecutionPolicy, class ForwardIt1, class
   ForwardIt2 >

   ForwardIt2 rotate_copy( ExecutionPolicy&& policy, ForwardIt1       \fB(2)\fP \fI(since C++17)\fP
   first, ForwardIt1 n_first,

                         ForwardIt1 last, ForwardIt2 d_first );

   1) Copies the elements from the range [first, last), to another range beginning at
   d_first in such a way, that the element n_first becomes the first element of the new
   range and n_first - 1 becomes the last element.
   2) Same as \fB(1)\fP, but executed according to policy. This overload only participates in
   overload resolution if std::is_execution_policy_v<std::decay_t<ExecutionPolicy>> is
   true

.SH Parameters

   first, last - the range of elements to copy
   n_first     - an iterator to an element in [first, last) that should appear at the
                 beginning of the new range
   d_first     - beginning of the destination range
   policy      - the execution policy to use. See execution policy for details.
.SH Type requirements
   -
   ForwardIt, ForwardIt1, ForwardIt2 must meet the requirements of ForwardIterator.
   -
   OutputIt must meet the requirements of OutputIterator.

.SH Return value

   Output iterator to the element past the last element copied.

.SH Exceptions

   The overload with a template parameter named ExecutionPolicy reports errors as
   follows:

     * If execution of a function invoked as part of the algorithm throws an exception
       and ExecutionPolicy is one of the three standard policies, std::terminate is
       called. For any other ExecutionPolicy, the behavior is implementation-defined.
     * If the algorithm fails to allocate memory, std::bad_alloc is thrown.

.SH Possible implementation

   template<class ForwardIt, class OutputIt>
   OutputIt rotate_copy(ForwardIt first, ForwardIt n_first,
                              ForwardIt last, OutputIt d_first)
   {
       d_first = std::copy(n_first, last, d_first);
       return std::copy(first, n_first, d_first);
   }

.SH Example

   
// Run this code

 #include <algorithm>
 #include <vector>
 #include <iostream>
  
 int main()
 {
     std::vector<int> src = {1, 2, 3, 4, 5};
     auto pivot = std::find(src.begin(), src.end(), 3);
     std::vector<int> dest(src.size());
  
     std::rotate_copy(src.begin(), pivot, src.end(), dest.begin());
  
     for (const auto &i : dest) {
         std::cout << i << ' ';
     }
     std::cout << '\\n';
 }

.SH Output:

 3 4 5 1 2

.SH Complexity

   linear in the distance between first and last

.SH See also

   rotate rotates the order of elements in a range
          \fI(function template)\fP 
