.TH std::cbrt 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::cbrt \- std::cbrt

.SH Synopsis
   Defined in header <cmath>
   float       cbrt( float arg );       \fB(1)\fP \fI(since C++11)\fP
   double      cbrt( double arg );      \fB(2)\fP \fI(since C++11)\fP
   long double cbrt( long double arg ); \fB(3)\fP \fI(since C++11)\fP
   double      cbrt( Integral arg );    \fB(4)\fP \fI(since C++11)\fP

   Computes the cubic root of arg.

   4) A set of overloads or a function template accepting an argument of any integral
   type. Equivalent to 2) (the argument is cast to double).

.SH Parameters

   arg - value of a floating-point or Integral type

.SH Return value

   If no errors occur, the cubic root of arg (
   3
   √
   arg), is returned.

   If a range error occurs due to underflow, the correct result (after rounding) is
   returned.

.SH Error handling

   Errors are reported as specified in math_errhandling

   If the implementation supports IEEE floating-point arithmetic (IEC 60559),

     * if the argument is ±0 or ±∞, it is returned, unchanged
     * if the argument is NaN, NaN is returned.

.SH Notes

   std::cbrt(arg) is not equivalent to std::pow(arg, 1.0/3) because std::pow cannot
   raise a negative base to a fractional exponent.

.SH Example

   
// Run this code

 #include <iostream>
 #include <cmath>
  
 int main()
 {
     // normal use
     std::cout << "cbrt(729) = " << std::cbrt(729) << '\\n'
               << "cbrt(-0.125) = " << std::cbrt(-0.125) << '\\n';
     // special values
     std::cout << "cbrt(-0) = " << std::cbrt(-0.0) << '\\n'
               << "cbrt(+inf) = " << std::cbrt(INFINITY) << '\\n';
 }

.SH Output:

 cbrt(729) = 9
 cbrt(-0.125) = -0.5
 cbrt(-0) = -0
 cbrt(+inf) = inf

.SH See also

   pow     raises a number to the given power (x^y)
           \fI(function)\fP 
           computes square root (
   sqrt    √
           x)
           \fI(function)\fP 
           computes square root of the sum of the squares of two given numbers (
           √
   hypot   x2
   \fI(C++11)\fP +y2
           )
           \fI(function)\fP 
   C documentation for
   cbrt
