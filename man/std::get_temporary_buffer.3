.TH std::get_temporary_buffer 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::get_temporary_buffer \- std::get_temporary_buffer

.SH Synopsis
   Defined in header <memory>
   template< class T >
   std::pair< T*, std::ptrdiff_t > get_temporary_buffer(          (deprecated in C++17)
   std::ptrdiff_t count );

   Allocates uninitialized contiguous storage, which should be sufficient to store up
   to count adjacent objects of type T. The request is non-binding and the
   implementation may allocate less or more than necessary to store count adjacent
   objects.

.SH Parameters

   count - the desired number of objects

.SH Return value

   An std::pair holding a pointer to the beginning of the allocated storage and the
   number of objects that fit in the storage that was actually allocated.

   If no memory could be allocated, or allocated storage is not enough to store a
   single element of type T, the first element of the result is a null pointer and the
   second element is zero.

.SH Exceptions

   \fI(none)\fP                    \fI(until C++11)\fP
   noexcept specification:  
   noexcept                  \fI(since C++11)\fP
     

.SH Example

   
   
// Run this code

 #include <algorithm>
 #include <iostream>
 #include <memory>
 #include <string>
 #include <iterator>
  
 int main()
 {
     const std::string s[] = {"string", "1", "test", "..."};
     const auto p = std::get_temporary_buffer<std::string>(4);
     // requires that p.first is passed to return_temporary_buffer
     // (beware of early exit points and exceptions)
  
     std::copy(s, s + p.second,
               std::raw_storage_iterator<std::string*, std::string>(p.first));
     // requires that each string in p is individually destroyed
     // (beware of early exit points and exceptions)
  
     std::copy(p.first, p.first + p.second,
               std::ostream_iterator<std::string>{std::cout, "\\n"});
  
     std::for_each(p.first, p.first + p.second, [](std::string& e) {
         e.~basic_string<char>();
     });
  
     std::return_temporary_buffer(p.first);
 }

.SH Output:

 string
 1
 test
 ...

.SH See also

   return_temporary_buffer frees uninitialized storage
   (deprecated in C++17)   \fI(function template)\fP 

.SH Category:

     * unconditionally noexcept

   Hidden categories:

     * Pages with unreviewed unconditional noexcept template
     * Pages with unreviewed noexcept template
