.TH std::random_device::entropy 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::random_device::entropy \- std::random_device::entropy

.SH Synopsis
   double entropy() const noexcept;  \fI(since C++11)\fP

   Obtains an estimate of the random number device entropy, which is a floating-point
   value between 0 and log
   2(max()+1) (which is equal to std::numeric_limits<unsigned int>::digits). If the
   device has n states whose individual probabilities are P
   0,...,P
   n-1, the device entropy S is defined as

   S = -Î£n-1
   i=0P
   ilog(P
   i)

   A deterministic random number generator (e.g. a pseudo-random engine) has entropy
   zero.

.SH Return value

   The value of the device entropy, or zero if not applicable.

.SH Notes

   This function is not fully implemented in some standard libraries. For example, GNU
   libstdc++ and LLVM libc++ always return zero even though the device is
   non-deterministic (for libstdc++, see bug 67578). In comparison, Microsoft Visual
   C++ implementation always returns 32, and boost.random returns 10.

   The entropy of the Linux kernel device /dev/urandom may be obtained using ioctl
   RNDGETENTCNT

.SH Example

   Example output on one of the implementations

   
// Run this code

 #include <iostream>
 #include <random>
  
 int main()
 {
     std::random_device rd;
     std::cout << rd.entropy() << '\\n';
 }

.SH Possible output:

 32
