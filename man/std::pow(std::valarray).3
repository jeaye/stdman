.TH std::pow(std::valarray) 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::pow(std::valarray) \- std::pow(std::valarray)

.SH Synopsis
   Defined in header <valarray>
   template< class T >                                                 \fB(1)\fP
   valarray<T> pow( const valarray<T>& base, const valarray<T>& exp );
   template< class T >                                                 \fB(2)\fP
   valarray<T> pow( const valarray<T>& base, const T& vexp );
   template< class T >                                                 \fB(3)\fP
   valarray<T> pow( const T& vbase, const valarray<T>& exp );

   Raises a value to a power.

   1) Computes the values of each element in the numeric array base raised to the power
   specified by the corresponding element from the numeric array exp.

   The behavior is undefined if base.size() != exp.size().

   2) Computes the values of each element in the numeric array base raised to the power
   vexp.
   3) Computes the values of vbase raised to the power defined by the elements in the
   numeric array exp.

.SH Parameters

   base  - numeric array containing the values of the base
   exp   - numeric array containing the values of the exponent
   vbase - a value defining the base
   vexp  - a value defining the exponent

.SH Return value

   A numeric array containing the results of exponentiation.

.SH Notes

   Unqualified function (pow) is used to perform the computation. If such function is
   not available, std::pow is used due to argument dependent lookup.

   The function can be implemented with the return type different from std::valarray.
   In this case, the replacement type has the following properties:

              * All const member functions of std::valarray are provided.
              * std::valarray, std::slice_array, std::gslice_array, std::mask_array and
                std::indirect_array can be constructed from the replacement type.
              * All functions accepting an argument of type const std::valarray&
                except begin() and end()
                \fI(since C++11)\fP should also accept the replacement type.
              * All functions accepting two arguments of type const std::valarray&
                should accept every combination of const std::valarray& and the
                replacement type.
              * The return type does not add more than two levels of template nesting
                over the most deeply-nested argument type.

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

   sqrt(std::valarray) applies the function std::sqrt to each element of valarray
                       \fI(function template)\fP 
   pow                 raises a number to the given power (x^y)
                       \fI(function)\fP 
   pow(std::complex)   complex power, one or both arguments may be a complex number
                       \fI(function template)\fP 

.SH Category:

     * Todo no example

   Hidden category:

     * Pages with unreviewed LWG DR marker
