.TH std::ref,std::cref 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::ref,std::cref \- std::ref,std::cref

.SH Synopsis
   Defined in header <functional>
   template< class T >                                                \fB(1)\fP \fI(since C++11)\fP
   std::reference_wrapper<T> ref(T& t) noexcept;
   template< class T >
   std::reference_wrapper<T> ref( std::reference_wrapper<T> t )       \fB(2)\fP \fI(since C++11)\fP
   noexcept;
   template <class T>                                                 \fB(3)\fP \fI(since C++11)\fP
   void ref(const T&&) = delete;
   template< class T >                                                \fB(4)\fP \fI(since C++11)\fP
   std::reference_wrapper<const T> cref( const T& t ) noexcept;
   template< class T >
   std::reference_wrapper<const T> cref( std::reference_wrapper<T> t  \fB(5)\fP \fI(since C++11)\fP
   ) noexcept;
   template <class T>                                                 \fB(6)\fP \fI(since C++11)\fP
   void cref(const T&&) = delete;

   Function templates ref and cref are helper functions that generate an object of type
   std::reference_wrapper, using template argument deduction to determine the template
   argument of the result.

.SH Parameters

   t - lvalue reference to object that needs to be wrapped or an instance of
       std::reference_wrapper

.SH Return value

   1) std::reference_wrapper<T>(t)
   2) ref(t.get())
   4) std::reference_wrapper<const T>(t)
   5) cref(t.get())
   3,6) rvalue reference wrapper is deleted.

.SH Example

   
// Run this code

 #include <functional>
 #include <iostream>
  
 void f(int& n1, int& n2, const int& n3)
 {
     std::cout << "In function: " << n1 << ' ' << n2 << ' ' << n3 << '\\n';
     ++n1; // increments the copy of n1 stored in the function object
     ++n2; // increments the main()'s n2
     // ++n3; // compile error
 }
  
 int main()
 {
     int n1 = 1, n2 = 2, n3 = 3;
     std::function<void()> bound_f = std::bind(f, n1, std::ref(n2), std::cref(n3));
     n1 = 10;
     n2 = 11;
     n3 = 12;
     std::cout << "Before function: " << n1 << ' ' << n2 << ' ' << n3 << '\\n';
     bound_f();
     std::cout << "After function: " << n1 << ' ' << n2 << ' ' << n3 << '\\n';
 }

.SH Output:

 Before function: 10 11 12
 In function: 1 11 12
 After function: 10 12 12

.SH See also

   reference_wrapper CopyConstructible and CopyAssignable reference wrapper
   \fI(C++11)\fP           \fI(class template)\fP 
