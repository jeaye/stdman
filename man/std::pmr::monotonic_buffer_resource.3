.TH std::pmr::monotonic_buffer_resource 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::pmr::monotonic_buffer_resource \- std::pmr::monotonic_buffer_resource

.SH Synopsis
   Defined in header <memory_resource>
   class monotonic_buffer_resource : public std::pmr::memory_resource;  \fI(since C++17)\fP

   The class std::pmr::monotonic_buffer_resource is a special-purpose memory resource
   class that releases the allocated memory only when the resource is destroyed. It is
   intended for very fast memory allocations in situations where memory is used to
   build up a few objects and then is released all at once.

   monotonic_buffer_resource can be constructed with an initial buffer. If there is no
   initial buffer, or if the buffer is exhausted, additional buffers are obtained from
   an upstream memory resource supplied at construction. The size of buffers obtained
   follows a geometric progression.

   monotonic_buffer_resource is not thread-safe.

.SH Member functions

   constructor       Constructs a monotonic_buffer_resource
                     \fI(public member function)\fP 
   destructor        Destroys a monotonic_buffer_resource, releasing all allocated
   \fB[virtual]\fP         memory
                     \fI(virtual public member function)\fP 
   operator=         Copy assignment operator is deleted. monotonic_buffer_resource is
   [deleted]         not copy assignable
                     \fI(public member function)\fP 
.SH Public member functions
   release           Release all allocated memory
                     \fI(public member function)\fP 
   upstream_resource Returns a pointer to the upstream memory resource
                     \fI(public member function)\fP 
.SH Protected member functions
   do_allocate       Allocate memory
   \fB[virtual]\fP         \fI(virtual protected member function)\fP 
   do_deallocate     No-op
   \fB[virtual]\fP         \fI(virtual protected member function)\fP 
   do_is_equal       Compare for equality with another std::pmr::memory_resource
   \fB[virtual]\fP         \fI(virtual protected member function)\fP 
