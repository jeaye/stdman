.TH std::atomic::operator++,++(int),--,--(int) 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::atomic::operator++,++(int),--,--(int) \- std::atomic::operator++,++(int),--,--(int)

.SH Synopsis
   T operator++() noexcept;               (member only of atomic<Integral> template
   T operator++() volatile noexcept;  \fB(1)\fP specialization)
                                          \fI(since C++11)\fP
   T* operator++() noexcept;              (member only of atomic<T*> template
   T* operator++() volatile noexcept; \fB(1)\fP specialization)
                                          \fI(since C++11)\fP
   T operator++( int ) noexcept;          (member only of atomic<Integral> template
   T operator++( int ) volatile       \fB(2)\fP specialization)
   noexcept;                              \fI(since C++11)\fP
   T* operator++( int ) noexcept;         (member only of atomic<T*> template
   T* operator++( int ) volatile      \fB(2)\fP specialization)
   noexcept;                              \fI(since C++11)\fP
   T operator--() noexcept;               (member only of atomic<Integral> template
   T operator--() volatile noexcept;  \fB(3)\fP specialization)
                                          \fI(since C++11)\fP
   T* operator--() noexcept;              (member only of atomic<T*> template
   T* operator--() volatile noexcept; \fB(3)\fP specialization)
                                          \fI(since C++11)\fP
   T operator--( int ) noexcept;          (member only of atomic<Integral> template
   T operator--( int ) volatile       \fB(4)\fP specialization)
   noexcept;                              \fI(since C++11)\fP
   T* operator--( int ) noexcept;         (member only of atomic<T*> template
   T* operator--( int ) volatile      \fB(4)\fP specialization)
   noexcept;                              \fI(since C++11)\fP

   Atomically increments or decrements the current value. The operation is
   read-modify-write operation.

   1) Performs atomic pre-increment. Equivalent to fetch_add\fB(1)\fP+1.
   2) Performs atomic post-increment. Equivalent to fetch_add\fB(1)\fP.
   3) Performs atomic pre-decrement. Equivalent to fetch_sub\fB(1)\fP-1
   4) Performs atomic post-decrement. Equivalent to fetch_sub\fB(1)\fP.

   For signed Integral types, arithmetic is defined to use twoâ€™s complement
   representation. There are no undefined results.

   For T* types, the result may be an undefined address, but the operations otherwise
   have no undefined behavior. The program is ill-formed if T is not an object type.

.SH Parameters

   \fI(none)\fP

.SH Return value

   1,3) The value of the atomic variable after the modification. Formally, the result
   of incrementing/decrementing the value immediately preceding the effects of this
   function in the modification order of *this.
   2,4) The value of the atomic variable before the modification. Formally, the value
   immediately preceding the effects of this function in the modification order of
   *this.

.SH Notes

   Unlike most pre-increment and pre-decrement operators, the pre-increment and
   pre-decrement operators for atomic types do not return a reference to the modified
   object. They return a copy of the stored value instead.

   Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

     DR    Applied to              Behavior as published               Correct behavior
   P0558R1 C++11      arithmetic permitted on pointers to cv void or   made ill-formed
                      function

.SH See also

              atomically adds the argument to the value stored in the atomic object and
   fetch_add  obtains the value held previously
              \fI(public member function)\fP 
              atomically subtracts the argument from the value stored in the atomic
   fetch_sub  object and obtains the value held previously
              \fI(public member function)\fP 
   operator+=
   operator-= adds, subtracts, or performs bitwise AND, OR, XOR with the atomic value
   operator&= \fI(public member function)\fP 
   operator|=
   operator^=
