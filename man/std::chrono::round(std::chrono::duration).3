.TH std::chrono::round(std::chrono::duration) 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::chrono::round(std::chrono::duration) \- std::chrono::round(std::chrono::duration)

.SH Synopsis
   Defined in header <chrono>
   template <class ToDuration, class Rep, class Period>         \fI(since C++17)\fP
   constexpr ToDuration round(const duration<Rep, Period>& d);

   Returns the value t representable in ToDuration that is the closest to d. If there
   are two such values, returns the even value (that is, the value t such that t % 2 ==
   0).

   The function does not participate in the overload resolution unless ToDuration is an
   instance of std::chrono::duration and std::chrono::treat_as_floating_point<typename
   ToDuration::rep>::value is false

.SH Parameters

   d - duration to convert

.SH Return value

   d rounded to the nearest duration of type ToDuration, rounding to even in halfway
   cases.

.SH Possible implementation

   template <class T> struct is_duration : std::false_type {};
   template <class Rep, class Period> struct is_duration<
       std::chrono::duration<Rep, Period>> : std::true_type {};
    
   template <class To, class Rep, class Period,
             class = std::enable_if_t<is_duration<To>{} &&
                    !std::chrono::treat_as_floating_point<typename To::rep>{}>>
   constexpr To round(const std::chrono::duration<Rep, Period>& d)
   {
       To t0 = std::chrono::duration::floor<To>(d);
       To t1 = t0 + To{1};
       auto diff0 = d - t0;
       auto diff1 = t1 - d;
       if (diff0 == diff1) {
           if (t0.count() & 1)
               return t1;
           return t0;
       } else if (diff0 < diff1) {
           return t0;
       }
       return t1;
   }

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

                                  converts a duration to another, with a different tick
   duration_cast                  interval
                                  \fI(function template)\fP 
   floor(std::chrono::duration)   converts a duration to another, rounding down
   \fI(C++17)\fP                        \fI(function template)\fP 
   ceil(std::chrono::duration)    converts a duration to another, rounding up
   \fI(C++17)\fP                        \fI(function template)\fP 
   round(std::chrono::time_point) converts a time_point to another, rounding to
   \fI(C++17)\fP                        nearest, ties to even
                                  \fI(function template)\fP 
   round
   lround                         nearest integer, rounding away from zero in halfway
   llround                        cases
   \fI(C++11)\fP                        \fI(function)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP

.SH Category:

     * Todo no example
