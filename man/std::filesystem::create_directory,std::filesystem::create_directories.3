.TH std::filesystem::create_directory,std::filesystem::create_directories 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::filesystem::create_directory,std::filesystem::create_directories \- std::filesystem::create_directory,std::filesystem::create_directories

.SH Synopsis
   Defined in header <filesystem>
   bool create_directory( const std::filesystem::path& p );
   bool create_directory( const std::filesystem::path& p,             \fB(1)\fP \fI(since C++17)\fP
   std::error_code& ec ) noexcept;
   bool create_directory( const std::filesystem::path& p,

                          const std::filesystem::path& existing_p );
   bool create_directory( const std::filesystem::path& p,             \fB(2)\fP \fI(since C++17)\fP
                          const std::filesystem::path& existing_p,

                          std::error_code& ec ) noexcept;
   bool create_directories( const std::filesystem::path& p );

   bool create_directories( const std::filesystem::path& p,           \fB(3)\fP \fI(since C++17)\fP

                            std::error_code& ec ) noexcept;

   1) Creates the directory p as if by POSIX mkdir() with a second argument of
   static_cast<int>(std::filesystem::perms::all) (the parent directory must already
   exist). If p already exists, the function does nothing (this condition is not
   treated as an error).
   2) Same as \fB(1)\fP, except that the attributes of the new directory are copied from
   existing_p (which must be a directory that exists). It is OS-dependent which
   attributes are copied: on POSIX systems, the attributes are copied as if by

 stat(existing_p.c_str(), &attributes_stat)
 mkdir(p.c_str(), attributes_stat.st_mode)

   On Windows OS, the attributes are copied as if by

 CreateDirectoryExW(existing_p.c_str(), p.c_str(), 0)

   3) Executes \fB(1)\fP for every element of p that does not already exist. If p already
   exists, the function does nothing (this condition is not treated as an error).

   The non-throwing overloads return false if any error occurs.

.SH Parameters

   p          - the path to the new directory to create
   existing_p - the path to a directory to copy the attributes from
   ec         - out-parameter for error reporting in the non-throwing overload

.SH Return value

   true if a directory was created for the directory p resolves to, false otherwise.

.SH Exceptions

   1,3) The overload that does not take a std::error_code& parameter throws
   filesystem_error on underlying OS API errors, constructed with p as the first
   argument and the OS error code as the error code argument. The overload taking a
   std::error_code& parameter sets it to the OS API error code if an OS API call fails,
   and executes ec.clear() if no errors occur. Any overload not marked noexcept may
   throw std::bad_alloc if memory allocation fails.
   2) The overload that does not take a std::error_code& parameter throws
   filesystem_error on underlying OS API errors, constructed with p as the first
   argument, existing_p as the second argument, and the OS error code as the error code
   argument. The overload taking a std::error_code& parameter sets it to the OS API
   error code if an OS API call fails, and executes ec.clear() if no errors occur. Any
   overload not marked noexcept may throw std::bad_alloc if memory allocation fails.

.SH Notes

   The attribute-preserving overload \fB(2)\fP is implicitly invoked by copy() when
   recursively copying directories. Its equivalent in boost.filesystem is
   copy_directory (with argument order reversed)

.SH Example

   
// Run this code

 #include <iostream>
 #include <fstream>
 #include <cstdlib>
 #include <filesystem>
 namespace fs = std::filesystem;
  
 int main()
 {
     fs::create_directories("sandbox/1/2/a");
     fs::create_directory("sandbox/1/2/b");
     fs::permissions("sandbox/1/2/b", fs::perms::remove_perms | fs::perms::others_all);
     fs::create_directory("sandbox/1/2/c", "sandbox/1/2/b");
     std::system("ls -l sandbox/1/2");
     fs::remove_all("sandbox");
 }

.SH Possible output:

 drwxr-xr-x 2 user group 4096 Apr 15 09:33 a
 drwxr-x--- 2 user group 4096 Apr 15 09:33 b
 drwxr-x--- 2 user group 4096 Apr 15 09:33 c

   Defect reports

   The following behavior-changing defect reports were applied retroactively to
   previously published C++ standards.

      DR    Applied to              Behavior as published              Correct behavior
   LWG 2935 C++17      error if target already exists but isn't a      not error
                       directory

.SH See also

   create_symlink
   create_directory_symlink creates a symbolic link
   \fI(C++17)\fP                  \fI(function)\fP 
   \fI(C++17)\fP
   copy                     copies files or directories
   \fI(C++17)\fP                  \fI(function)\fP 
   perms                    identifies file system permissions
   \fI(C++17)\fP                  \fI(enum)\fP 
