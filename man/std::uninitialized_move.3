.TH std::uninitialized_move 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::uninitialized_move \- std::uninitialized_move

.SH Synopsis
   Defined in header <memory>
   template< class InputIt, class ForwardIt >
   ForwardIt uninitialized_move( InputIt first, InputIt last,         \fB(1)\fP \fI(since C++17)\fP
   ForwardIt d_first );
   template< class ExecutionPolicy, class InputIt, class ForwardIt >
   ForwardIt uninitialized_move( ExecutionPolicy&& policy, InputIt    \fB(2)\fP \fI(since C++17)\fP
   first, InputIt last, ForwardIt d_first );

   1) Moves elements from the range [first, last) to an uninitialized memory area
   beginning at d_first as if by

 for (; first != last; ++d_first, (void) ++first)
    ::new (static_cast<void*>(std::addressof(*d_first)))
       typename std::iterator_traits<ForwardIt>::value_type(std::move(*first));

   If an exception is thrown during the initialization, some objects in [first, last)
   are left in a valid but unspecified state.
   2) Same as \fB(1)\fP, but executed according to policy. This overload does not participate
   in overload resolution unless
   std::is_execution_policy_v<std::decay_t<ExecutionPolicy>> is true

.SH Parameters

   first, last         -         the range of the elements to move
   d_first             -         the beginning of the destination range
   policy              -         the execution policy to use. See execution policy for
                                 details.
.SH Type requirements
   -
   InputIt must meet the requirements of InputIterator.
   -
   ForwardIt must meet the requirements of ForwardIterator.
   -
   No increment, assignment, comparison, or indirection through valid instances of
   ForwardIt may throw exceptions.

.SH Return value

   Iterator to the element past the last element moved.

.SH Complexity

   Linear in the distance between first and last

.SH Exceptions

   The overload with a template parameter named ExecutionPolicy reports errors as
   follows:

     * If execution of a function invoked as part of the algorithm throws an exception
       and ExecutionPolicy is one of the three standard policies, std::terminate is
       called. For any other ExecutionPolicy, the behavior is implementation-defined.
     * If the algorithm fails to allocate memory, std::bad_alloc is thrown.

.SH Possible implementation

template<class InputIt, class ForwardIt>
ForwardIt uninitialized_move(InputIt first, InputIt last, ForwardIt d_first)
{
    typedef typename std::iterator_traits<ForwardIt>::value_type Value;
    ForwardIt current = d_first;
    try {
        for (; first != last; ++first, (void) ++current) {
            ::new (static_cast<void*>(std::addressof(*current))) Value(std::move(*first));
        }
        return current;
    } catch (...) {
        for (; d_first != current; ++d_first) {
            d_first->~Value();
        }
        throw;
    }
}

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

   uninitialized_copy   copies a range of objects to an uninitialized area of memory
                        \fI(function template)\fP 
   uninitialized_move_n moves a number of objects to an uninitialized area of memory
   \fI(C++17)\fP              \fI(function template)\fP 

.SH Category:

     * Todo no example
