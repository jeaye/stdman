.TH std::min 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::min \- std::min

.SH Synopsis
   Defined in header <algorithm>
   template< class T >                                  (until
   const T& min( const T& a, const T& b );              C++14)
   template< class T >                                  (since
   constexpr const T& min( const T& a, const T&         C++14)
   b );
   template< class T, class Compare >                           (until
   const T& min( const T& a, const T& b,                        C++14)
   Compare comp );
   template< class T, class Compare >                           (since
   constexpr const T& min( const T& a, const T&                 C++14)
   b, Compare comp );
                                                                        (since
   template< class T >                          \fB(1)\fP                     C++11)
   T min( std::initializer_list<T> ilist );                             (until
                                                    \fB(2)\fP                 C++14)
   template< class T >                                                  (since
   constexpr T min( std::initializer_list<T>                            C++14)
   ilist );                                             \fB(3)\fP
   template< class T, class Compare >                                           (since
   T min( std::initializer_list<T> ilist,                                       C++11)
   Compare comp );                                                              (until
                                                                \fB(4)\fP             C++14)
   template< class T, class Compare >                                           (since
   constexpr T min( std::initializer_list<T>                                    C++14)
   ilist, Compare comp );

   Returns the smaller of the given values.

   1-2) Returns the smaller of a and b.
   3-4) Returns the smallest of the values in initializer list ilist.

   The (1,3) versions use operator< to compare the values, the (2,4) versions use the
   given comparison function comp.

.SH Parameters

   a, b   -  the values to compare
   ilist  -  initializer list with the values to compare
             comparison function object (i.e. an object that satisfies the requirements
             of Compare) which returns true if if a is less than b.

             The signature of the comparison function should be equivalent to the
             following:
   cmp    -
              bool cmp(const Type1 &a, const Type2 &b);

             The signature does not need to have const &, but the function object must
             not modify the objects passed to it.
             The types Type1 and Type2 must be such that an object of type T can be
             implicitly converted to both of them. 
.SH Type requirements
   -
   T must meet the requirements of LessThanComparable in order to use overloads (1,3).
   -
   T must meet the requirements of CopyConstructible in order to use overloads (3,4).

.SH Return value

   1-2) The smaller of a and b. If the values are equivalent, returns a.
   3-4) The smallest value in ilist. If several values are equivalent to the smallest,
   returns the leftmost such value.

.SH Complexity

   1-2) Exactly one comparison
   3-4) Exactly ilist.size() - 1 comparisons

.SH Possible implementation

.SH First version
   template<class T>
   const T& min(const T& a, const T& b)
   {
       return (b < a) ? b : a;
   }
.SH Second version
   template<class T, class Compare>
   const T& min(const T& a, const T& b, Compare comp)
   {
       return (comp(b, a)) ? b : a;
   }
                            Third version
   template<class T>
   T min( std::initializer_list<T> ilist)
   {
       return *std::min_element(ilist.begin(), ilist.end());
   }
                           Fourth version
   template<class T, class Compare>
   T min(std::initializer_list<T> ilist, Compare comp)
   {
       return *std::min_element(ilist.begin(), ilist.end(), comp);
   }

   Warning

   Capturing the result of std::min by reference if one of the parameters is rvalue
   produces a dangling reference if that parameter is returned:

 int n = 1;
 const int& r = std::min(n-1, n+1);
 // r is dangling

.SH Example

   
// Run this code

 #include <algorithm>
 #include <iostream>
 #include <string>
  
 int main()
 {
     std::cout << "smaller of 1 and 9999: " << std::min(1, 9999) << '\\n'
               << "smaller of 'a', and 'b': " << std::min('a', 'b') << '\\n'
               << "shortest of \\"foo\\", \\"bar\\", and \\"hello\\": " <<
                   std::min( { "foo", "bar", "hello" },
                             [](const std::string& s1, const std::string& s2) {
                                  return s1.size() < s2.size();
                              }) << '\\n';
 }

.SH Output:

 smaller of 1 and 9999: 1
 smaller of 'a', and 'b': a
 shortest of "foo", "bar", and "hello": foo

.SH See also

   max         returns the greater of the given values
               \fI(function template)\fP 
   minmax      returns the smaller and larger of two elements
   \fI(C++11)\fP     \fI(function template)\fP 
   min_element returns the smallest element in a range
               \fI(function template)\fP 
