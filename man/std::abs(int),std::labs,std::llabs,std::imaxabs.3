.TH std::abs(int),std::labs,std::llabs,std::imaxabs 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::abs(int),std::labs,std::llabs,std::imaxabs \- std::abs(int),std::labs,std::llabs,std::imaxabs

.SH Synopsis
   Defined in header <cstdlib>
   Defined in header <cmath>                  \fI(since C++17)\fP
   int       abs( int n );
   long      abs( long n );
   long long abs( long long n );              \fI(since C++11)\fP
   Defined in header <cstdlib>
   long       labs( long n );
   long long llabs( long long n );            \fI(since C++11)\fP
   Defined in header <cinttypes>
   std::intmax_t abs( std::intmax_t n );      \fI(since C++11)\fP
   std::intmax_t imaxabs( std::intmax_t n );  \fI(since C++11)\fP

   Computes the absolute value of an integer number. The behavior is undefined if the
   result cannot be represented by the return type.

   If std::abs is called with an argument of type X such that
   std::is_unsigned<X>::value is true and X cannot be converted to int by \fI(since C++17)\fP
   integral promotion, the program is ill-formed.

.SH Parameters

   n - integer value

.SH Return value

   The absolute value of n (i.e. |n|), if it is representable.

.SH Notes

   In 2's complement systems, the absolute value of the most-negative value is out of
   range, e.g. for 32-bit 2's complement type int, INT_MIN is -2147483648, but the
   would-be result 2147483648 is greater than INT_MAX, which is 2147483647.

.SH Example

   
// Run this code

 #include <iostream>
 #include <cstdlib>
 #include <climits>
  
 int main()
 {
     std::cout << "abs(+3) = " << std::abs(3) << '\\n'
               << "abs(-3) = " << std::abs(-3) << '\\n';
  
 //  std::cout << std::abs(INT_MIN); // undefined behavior on 2's complement systems
 }

.SH Output:

 abs(+3) = 3
 abs(-3) = 3

.SH See also

   abs(float)         absolute value of a floating point value (|x|)
   fabs               \fI(function)\fP 
   abs(std::complex)  returns the magnitude of a complex number
                      \fI(function template)\fP 
   abs(std::valarray) applies the function std::abs to each element of valarray
                      \fI(function template)\fP 
   C documentation for
   abs,
   labs,
   llabs
