.TH std::unordered_set 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::unordered_set \- std::unordered_set

.SH Synopsis
   Defined in header <unordered_set>
   template<

       class Key,
       class Hash = std::hash<Key>,                                   \fB(1)\fP \fI(since C++11)\fP
       class KeyEqual = std::equal_to<Key>,
       class Allocator = std::allocator<Key>

   > class unordered_set;
   namespace pmr {

       template <class Key,
                 class Hash = std::hash<Key>,
                 class Pred = std::equal_to<Key>>                     \fB(2)\fP \fI(since C++17)\fP
       using unordered_set = std::unordered_set<Key, Hash, Pred,
                                              
    std::pmr::polymorphic_allocator<Key>>;

   }

   Unordered set is an associative container that contains a set of unique objects of
   type Key. Search, insertion, and removal have average constant-time complexity.

   Internally, the elements are not sorted in any particular order, but organized into
   buckets. Which bucket an element is placed into depends entirely on the hash of its
   value. This allows fast access to individual elements, since once a hash is
   computed, it refers to the exact bucket the element is placed into.

   Container elements may not be modified (even by non const iterators) since
   modification could change an element's hash and corrupt the container.

   std::unordered_set meets the requirements of Container, AllocatorAwareContainer,
   UnorderedAssociativeContainer.

.SH Member types

Member type              Definition
key_type                 Key 
value_type               Key 
size_type                Unsigned integer type (usually std::size_t) 
difference_type          Signed integer type (usually std::ptrdiff_t) 
hasher                   Hash 
key_equal                KeyEqual 
allocator_type           Allocator 
reference                value_type& 
const_reference          const value_type& 
pointer                  std::allocator_traits<Allocator>::pointer 
const_pointer            std::allocator_traits<Allocator>::const_pointer 
iterator                 Constant ForwardIterator 
const_iterator           Constant ForwardIterator 
                         An iterator type whose category, value, difference, pointer and
local_iterator           reference types are the same as iterator. This iterator
                         can be used to iterate through a single bucket but not across
                         buckets
                         An iterator type whose category, value, difference, pointer and
const_local_iterator     reference types are the same as const_iterator. This iterator
                         can be used to iterate through a single bucket but not across
                         buckets
node_type\fI(since C++17)\fP   a specialization of node handle representing a container node
                         
                         type describing the result of inserting a node_type, a
                         specialization of

                         template <class Iterator, class NodeType> struct /*unspecified*/ {
insert_return_type(since     Iterator position;
C++17)                       bool     inserted;
                             NodeType node;
                         };

                         instantiated with template arguments iterator and node_type.
                         

.SH Member functions

   constructor       constructs the unordered_set
                     \fI(public member function)\fP 
   destructor        destructs the unordered_set
                     \fI(public member function)\fP 
   operator=         assigns values to the container
                     \fI(public member function)\fP 
   get_allocator     returns the associated allocator
                     \fI(public member function)\fP 
.SH Iterators
   begin             returns an iterator to the beginning
   cbegin            \fI(public member function)\fP 
   end               returns an iterator to the end
   cend              \fI(public member function)\fP 
.SH Capacity
   empty             checks whether the container is empty
                     \fI(public member function)\fP 
   size              returns the number of elements
                     \fI(public member function)\fP 
   max_size          returns the maximum possible number of elements
                     \fI(public member function)\fP 
.SH Modifiers
   clear             clears the contents
                     \fI(public member function)\fP 
                     inserts elements
   insert            or nodes
                     \fI(since C++17)\fP
                     \fI(public member function)\fP 
   emplace           constructs element in-place
                     \fI(public member function)\fP 
   emplace_hint      constructs elements in-place using a hint
                     \fI(public member function)\fP 
   erase             erases elements
                     \fI(public member function)\fP 
   swap              swaps the contents
                     \fI(public member function)\fP 
   extract           extracts nodes from the container
   \fI(C++17)\fP           \fI(public member function)\fP 
   merge             splices nodes from another container
   \fI(C++17)\fP           \fI(public member function)\fP 
.SH Lookup
   count             returns the number of elements matching specific key
                     \fI(public member function)\fP 
   find              finds element with specific key
                     \fI(public member function)\fP 
   equal_range       returns range of elements matching a specific key
                     \fI(public member function)\fP 
.SH Bucket interface
   begin(size_type)  returns an iterator to the beginning of the specified bucket
   cbegin(size_type) \fI(public member function)\fP 
   end(size_type)    returns an iterator to the end of the specified bucket
   cend(size_type)   \fI(public member function)\fP 
   bucket_count      returns the number of buckets
                     \fI(public member function)\fP 
   max_bucket_count  returns the maximum number of buckets
                     \fI(public member function)\fP 
   bucket_size       returns the number of elements in specific bucket
                     \fI(public member function)\fP 
   bucket            returns the bucket for specific key
                     \fI(public member function)\fP 
.SH Hash policy
   load_factor       returns average number of elements per bucket
                     \fI(public member function)\fP 
   max_load_factor   manages maximum average number of elements per bucket
                     \fI(public member function)\fP 
                     reserves at least the specified number of buckets.
   rehash            This regenerates the hash table.
                     \fI(public member function)\fP 
                     reserves space for at least the specified number of elements.
   reserve           This regenerates the hash table.
                     \fI(public member function)\fP 
.SH Observers
   hash_function     returns function used to hash the keys
                     \fI(public member function)\fP 
   key_eq            returns the function used to compare keys for equality
                     \fI(public member function)\fP 

.SH Non-member functions

   operator==                    compares the values in the unordered_set
   operator!=                    \fI(function template)\fP 
   std::swap(std::unordered_set) specializes the std::swap algorithm
   \fI(C++11)\fP                       \fI(function template)\fP 

   Deduction guides\fI(since C++17)\fP

.SH Notes

   The member types iterator and const_iterator may be aliases to the same type. Since
   iterator is convertible to const_iterator, const_iterator should be used in function
   parameter lists to avoid violations of the One Definition Rule.
