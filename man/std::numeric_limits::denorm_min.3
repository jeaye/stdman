.TH std::numeric_limits::denorm_min 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::numeric_limits::denorm_min \- std::numeric_limits::denorm_min

.SH Synopsis
   static T denorm_min();            \fI(until C++11)\fP
   static constexpr T denorm_min();  \fI(since C++11)\fP

   Returns the minimum positive subnormal value of the type T, if
   std::numeric_limits<T>::has_denorm != std::denorm_absent, otherwise returns
   std::numeric_limits<T>::min(). Only meaningful for floating-point types.

.SH Return value

   T                     std::numeric_limits<T>::denorm_min()
   /* non-specialized */ T();
   bool                  false
   char                  0
   signed char           0
   unsigned char         0
   wchar_t               0
   char16_t              0
   char32_t              0
   short                 0
   unsigned short        0
   int                   0
   unsigned int          0
   long                  0
   unsigned long         0
   long long             0
   unsigned long long    0
   float                 2-149
                         if std::numeric_limits<float>::is_iec559 == true
   double                2-1074
                         if std::numeric_limits<double>::is_iec559 == true
   long double           /* implementation-defined */

.SH Exceptions

   \fI(none)\fP                    \fI(until C++11)\fP
   noexcept specification:  
   noexcept                  \fI(since C++11)\fP
     

.SH Example

   Demonstates the underlying bit structure of the denorm_min()

   
// Run this code

 #include <cstdint>
 #include <cstring>
 #include <limits>
 #include <cassert>
 int main()
 {
     // the smallest subnormal value has sign bit = 0, exponent = 0
     // and only the least significant bit of the fraction is 1
     std::uint32_t denorm_bits = 0x0001;
     float denorm_float;
     std::memcpy(&denorm_float, &denorm_bits, sizeof(float));
     assert(denorm_float == std::numeric_limits<float>::denorm_min());
 }

.SH See also

   min              returns the smallest finite value of the given type
   \fB[static]\fP         \fI(public static member function)\fP 
   has_denorm       identifies the denormalization style used by the floating-point
   \fB[static]\fP         type
                    \fI(public static member constant)\fP 
   lowest           returns the lowest finite value of the given type
   \fB[static]\fP \fI(C++11)\fP \fI(public static member function)\fP 

.SH Category:

     * unconditionally noexcept

   Hidden categories:

     * Pages with unreviewed unconditional noexcept template
     * Pages with unreviewed noexcept template
