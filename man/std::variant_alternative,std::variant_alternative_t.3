.TH std::variant_alternative,std::variant_alternative_t 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::variant_alternative,std::variant_alternative_t \- std::variant_alternative,std::variant_alternative_t

.SH Synopsis
   Defined in header <variant>
   template <std::size_t I, class T>                                  \fB(1)\fP \fI(since C++17)\fP
   struct variant_alternative; /* undefined */
   template <size_t I, class... Types>                                \fB(2)\fP \fI(since C++17)\fP
   struct variant_alternative<I, variant<Types...>>;
   template <size_t I, class T> class variant_alternative<I, const
   T>;

   template <size_t I, class T> class variant_alternative<I, volatile \fB(3)\fP \fI(since C++17)\fP
   T>;

   template <size_t I, class T> class variant_alternative<I, const
   volatile T>;

   Provides compile-time indexed access to the types of the alternatives of the
   possibly cv-qualified variant, combining cv-qualifications of the variant (if any)
   with the cv-qualifications of the alternative.

   Formally,

   2) meets the TransformationTrait requirements with a member typedef type equal to
   the type of the alternative with index I
   3) meets the TransformationTrait requirements with a member typedef type that names,
   respectively, std::add_const_t<std::variant_alternative<I,T>>,
   std::add_volatile_t<std::variant_alternative<I,T>>, and
   std::add_cv_t<std::variant_alternative<I,T>>

.SH Member types

   Member type Definition
   type        the type of Ith alternative of the variant, where I must be in [0,
               sizeof...(Types)), otherwise the behavior is undefined

   Helper template alias

   template <size_t I, class T>
   using variant_alternative_t = typename variant_alternative<I,          \fI(since C++17)\fP
   T>::type;

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

   variant_size   obtains the size of the variant's list of alternatives at compile
   variant_size_v time
   \fI(C++17)\fP        \fI(class template)\fP (variable template) 
   tuple_element  obtains the type of the specified element
                  \fI(class template specialization)\fP 

.SH Category:

     * Todo no example
