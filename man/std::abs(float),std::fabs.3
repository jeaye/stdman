.TH std::abs(float),std::fabs 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::abs(float),std::fabs \- std::abs(float),std::fabs

.SH Synopsis
   Defined in header <cmath>
   Defined in header <cstdlib>              \fI(since C++17)\fP
   float       abs( float arg );        \fB(1)\fP
   double      abs( double arg );       \fB(2)\fP
   long double abs( long double arg );  \fB(3)\fP
   Defined in header <cmath>
   float       fabs( float arg );       \fB(4)\fP
   double      fabs( double arg );      \fB(5)\fP
   long double fabs( long double arg ); \fB(6)\fP
   double      fabs( Integral arg );    \fB(7)\fP \fI(since C++11)\fP

   1-6) Computes the absolute value of a floating point value arg.
   7) A set of overloads or a function template for all combinations of arguments of
   arithmetic type not covered by (4-6). If any argument has integral type, it is cast
   to double. If any other argument is long double, then the return type is long
   double, otherwise it is double.

   For integral arguments, the integral overloads of std::abs are likely
   better matches. If std::abs is called with an argument of type X such  \fI(since C++17)\fP
   that std::is_unsigned<X>::value is true and X cannot be converted to
   int by integral promotion, the program is ill-formed.

.SH Parameters

   arg - Value of a floating-point or Integral type

.SH Return value

   If successful, returns the absolute value of arg (|arg|). The value returned is
   exact and does not depend on any rounding modes.

.SH Error handling

   This function is not subject to any of the error conditions specified in
   math_errhandling

   If the implementation supports IEEE floating-point arithmetic (IEC 60559),

     * If the argument is ±0, +0 is returned
     * If the argument is ±∞, +∞ is returned
     * If the argument is NaN, NaN is returned

.SH Notes

   Between C++11 and C++14, the standard erroneously required std::abs to have
   overloads for integer types returning double. This requirement was removed in C++17
   by defect report 2735.

.SH Example

   
// Run this code

 #include <iostream>
 #include <cmath>
  
 int main()
 {
     std::cout << "abs(+3.0) = " << std::abs(+3.0) << '\\n'
               << "abs(-3.0) = " << std::abs(-3.0) << '\\n';
     // special values
     std::cout << "abs(-0.0) = " << std::abs(-0.0) << '\\n'
               << "abs(-Inf) = " << std::abs(-INFINITY) << '\\n';
 }

.SH Possible output:

 abs(+3.0) = 3
 abs(-3.0) = 3
 abs(-0.0) = 0
 abs(-Inf) = inf

.SH See also

   abs(int)
   labs               computes absolute value of an integral value (|x|)
   llabs              \fI(function)\fP 
   \fI(C++11)\fP
   copysign           copies the sign of a floating point value
   \fI(C++11)\fP            \fI(function)\fP 
   signbit            checks if the given number is negative
   \fI(C++11)\fP            \fI(function)\fP 
   abs(std::complex)  returns the magnitude of a complex number
                      \fI(function template)\fP 
   abs(std::valarray) applies the function std::abs to each element of valarray
                      \fI(function template)\fP 
   C documentation for
   fabs
