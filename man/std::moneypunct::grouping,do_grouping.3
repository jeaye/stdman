.TH std::moneypunct::grouping,do_grouping 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::moneypunct::grouping,do_grouping \- std::moneypunct::grouping,do_grouping

.SH Synopsis
   Defined in header <locale>
   public:                                  \fB(1)\fP
   std::string grouping() const;
   protected:                               \fB(2)\fP
   virtual std::string do_grouping() const;

   1) Public member function, calls the member function do_grouping of the most derived
   class.
   2) Returns the pattern that determines the grouping of the digits in the monetary
   output, with the same exact meaning as std::numpunct::do_grouping

.SH Return value

   The object of type std::string holding the groups. The standard specializations of
   std::moneypunct return an empty string, indicating no grouping. Typical groupings
   (e.g. the en_US locale) return "\\003".

.SH Example

   
// Run this code

 #include <locale>
 #include <iostream>
 #include <iomanip>
 #include <iterator>
 struct space_out : std::moneypunct<char> {
     pattern do_pos_format()      const { return { {value, none, none, none} };}
     int do_frac_digits()         const { return 0; }
     char_type do_thousands_sep() const { return ' ';}
     string_type do_grouping()    const { return "\\002";}
 };
 int main()
 {
     std::cout.imbue(std::locale("en_US.UTF-8"));
     std::cout << "american locale: " << std::showbase
               << std::put_money(12345678.0)<< '\\n';
  
     std::cout.imbue(std::locale(std::cout.getloc(), new space_out));
     std::cout << "locale with modified moneypunct: "
               << std::put_money(12345678.0)<< '\\n';
 }

.SH Output:

 american locale: $123,456.78
 locale with modified moneypunct: 12 34 56 78

.SH See also

   do_thousands_sep provides the character to use as thousands separator
   \fB[virtual]\fP        \fI(virtual protected member function)\fP 
   do_decimal_point provides the character to use as decimal point
   \fB[virtual]\fP        \fI(virtual protected member function)\fP 
