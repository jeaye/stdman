.TH std::istream_iterator 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::istream_iterator \- std::istream_iterator

.SH Synopsis
   Defined in header <iterator>
   template< class T,

             class CharT = char,
             class Traits = std::char_traits<CharT>,
             class Distance = std::ptrdiff_t >                            \fI(until C++17)\fP
   class istream_iterator: public std::iterator<std::input_iterator_tag,

                                                T, Distance, const T*,
   const T&>
   template< class T,

             class CharT = char,
             class Traits = std::char_traits<CharT>,                      \fI(since C++17)\fP
             class Distance = std::ptrdiff_t >

   class istream_iterator;

   std::istream_iterator is a single-pass input iterator that reads successive objects
   of type T from the std::basic_istream object for which it was constructed, by
   calling the appropriate operator>>. The actual read operation is performed when the
   iterator is incremented, not when it is dereferenced. The first object may be read
   when the iterator is constructed or when the first dereferencing is done. Otherwise,
   dereferencing only returns a copy of the most recently read object.

   The default-constructed std::istream_iterator is known as the end-of-stream
   iterator. When a valid std::istream_iterator reaches the end of the underlying
   stream, it becomes equal to the end-of-stream iterator. Dereferencing or
   incrementing it further invokes undefined behavior.

   A typical implementation of std::istream_iterator holds two data members: a pointer
   to the associated std::basic_istream object and the most recently read value of type
   T.

   T must meet the DefaultConstructible, CopyConstructible, and CopyAssignable
   requirements.

.SH Member types

   Member type  Definition
   char_type    CharT
   traits_type  Traits
   istream_type std::basic_istream<CharT, Traits>

.SH Member functions

   constructor     constructs a new istream_iterator
                   \fI(public member function)\fP 
   destructor      destructs an istream_iterator, including the cached value
                   \fI(public member function)\fP 
   operator*       returns the current element
   operator->      \fI(public member function)\fP 
   operator++      advances the iterator
   operator++(int) \fI(public member function)\fP 

.SH Non-member functions

   operator== compares two istream_iterators
   operator!= \fI(function template)\fP 

.SH Member types

   Member type       Definition
   value_type        T
   difference_type   Distance
   pointer           const T*
   reference         const T&
   iterator_category std::input_iterator_tag

   These member types are required to be obtained by inheriting from             (until
   std::iterator<std::input_iterator_tag,T,Distance,const T*,const T&>.          C++17)

.SH Notes

   When reading characters, std::istream_iterator skips whitespace by default (unless
   disabled with std::noskipws or equivalent), while std::istreambuf_iterator does not.
   In addition, std::istreambuf_iterator is more efficient, since it avoids the
   overhead of constructing and destructing the sentry object once per character.

.SH Example

   
// Run this code

 #include <iostream>
 #include <sstream>
 #include <iterator>
 #include <numeric>
  
 int main()
 {
     std::istringstream str("0.1 0.2 0.3 0.4");
     std::partial_sum(std::istream_iterator<double>(str),
                      std::istream_iterator<double>(),
                      std::ostream_iterator<double>(std::cout, " "));
 }

.SH Output:

 0.1 0.3 0.6 1

.SH See also

   ostream_iterator    output iterator that writes to std::basic_ostream
                       \fI(class template)\fP 
   istreambuf_iterator input iterator that reads from std::basic_streambuf
                       \fI(class template)\fP 

   Hidden category:

     * Pages with unreviewed LWG DR marker
