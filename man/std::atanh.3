.TH std::atanh 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::atanh \- std::atanh

.SH Synopsis
   Defined in header <cmath>
   float       atanh( float arg );       \fB(1)\fP \fI(since C++11)\fP
   double      atanh( double arg );      \fB(2)\fP \fI(since C++11)\fP
   long double atanh( long double arg ); \fB(3)\fP \fI(since C++11)\fP
   double      atanh( Integral arg );    \fB(4)\fP \fI(since C++11)\fP

   Computes the inverse hyperbolic tangent of arg.

   4) A set of overloads or a function template accepting an argument of any integral
   type. Equivalent to 2) (the argument is cast to double).

.SH Parameters

   arg - value of a floating-point or Integral type

.SH Return value

   If no errors occur, the inverse hyperbolic tangent of arg (tanh-1
   (arg), or artanh(arg)), is returned.

   If a domain error occurs, an implementation-defined value is returned (NaN where
   supported)

   If a pole error occurs, ±HUGE_VAL, ±HUGE_VALF, or ±HUGE_VALL is returned (with the
   correct sign).

   If a range error occurs due to underflow, the correct result (after rounding) is
   returned.

.SH Error handling

   Errors are reported as specified in math_errhandling

   If the argument is not on the interval [-1, +1], a range error occurs.

   If the argument is ±1, a pole error occurs.

   If the implementation supports IEEE floating-point arithmetic (IEC 60559),

     * if the argument is ±0, it is returned unmodified
     * if the argument is ±1, ±∞ is returned and FE_DIVBYZERO is raised.
     * if |arg|>1, NaN is returned and FE_INVALID is raised.
     * if the argument is NaN, NaN is returned

.SH Notes

   Although the C standard (to which C++ refers for this function) names this function
   "arc hyperbolic tangent", the inverse functions of the hyperbolic functions are the
   area functions. Their argument is the area of a hyperbolic sector, not an arc. The
   correct name is "inverse hyperbolic tangent" (used by POSIX) or "area hyperbolic
   tangent".

   POSIX specifies that in case of underflow, arg is returned unmodified, and if that
   is not supported, an implementation-defined value no greater than DBL_MIN, FLT_MIN,
   and LDBL_MIN is returned.

.SH Example

   
// Run this code

 #include <iostream>
 #include <cmath>
 #include <cfloat>
 #include <cerrno>
 #include <cfenv>
 #include <cstring>
 #pragma STDC FENV_ACCESS ON
 int main()
 {
     std::cout << "atanh(0) = " << std::atanh(0) << '\\n'
               << "atanh(-0) = " << std::atanh(-0.0) << '\\n'
               << "atanh(0.9) = " << std::atanh(0.9) << '\\n';
      // error handling
      errno = 0; std::feclearexcept(FE_ALL_EXCEPT);
      std::cout << "atanh(-1) = " << std::atanh(-1) << '\\n';
      if(errno == ERANGE)
          std::cout << "    errno == ERANGE: " << std::strerror(errno) << '\\n';
      if(std::fetestexcept(FE_DIVBYZERO))
         std::cout << "    FE_DIVBYZERO raised\\n";
 }

.SH Possible output:

 atanh\fB(0)\fP = 0
 atanh(-0) = -0
 atanh(0.9) = 1.47222
 atanh(-1) = -inf
     errno == ERANGE: Numerical result out of range
     FE_DIVBYZERO raised

.SH See also

   asinh               computes the inverse hyperbolic sine (arsinh(x))
   \fI(C++11)\fP             \fI(function)\fP 
   acosh               computes the inverse hyperbolic cosine (arcosh(x))
   \fI(C++11)\fP             \fI(function)\fP 
   tanh                hyperbolic tangent
                       \fI(function)\fP 
   atanh(std::complex) computes area hyperbolic tangent of a complex number
   \fI(C++11)\fP             \fI(function template)\fP 
   C documentation for
   atanh

.SH External links

   Weisstein, Eric W. "Inverse Hyperbolic Tangent." From MathWorld--A Wolfram Web
   Resource.
