.TH std::is_heap_until 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_heap_until \- std::is_heap_until

.SH Synopsis
   Defined in header <algorithm>
   template< class RandomIt >                               \fI(since C++11)\fP
   RandomIt is_heap_until( RandomIt first, RandomIt         \fI(until C++20)\fP
   last );
   template< class RandomIt >
   constexpr RandomIt is_heap_until( RandomIt               \fI(since C++20)\fP
   first, RandomIt last );
   template< class ExecutionPolicy, class RandomIt
   >                                                    \fB(2)\fP \fI(since C++17)\fP
   RandomIt is_heap_until( ExecutionPolicy&&
   policy, RandomIt first, RandomIt last );
   template< class RandomIt, class Compare >        \fB(1)\fP                   \fI(since C++11)\fP
   RandomIt is_heap_until( RandomIt first, RandomIt                       \fI(until C++20)\fP
   last, Compare comp );
   template< class RandomIt, class Compare >
   constexpr RandomIt is_heap_until( RandomIt                             \fI(since C++20)\fP
   first, RandomIt last, Compare comp );                \fB(3)\fP
   template< class ExecutionPolicy, class RandomIt,
   class Compare >
   RandomIt is_heap_until( ExecutionPolicy&&                \fB(4)\fP           \fI(since C++17)\fP
   policy, RandomIt first, RandomIt last, Compare
   comp );

   Examines the range [first, last) and finds the largest range beginning at first
   which is a max heap.

   1) Elements are compared using operator<.
   3) Elements are compared using the given binary comparison function comp.
   2,4) Same as (1,3), but executed according to policy. These overloads do not
   participate in overload resolution unless
   std::is_execution_policy_v<std::decay_t<ExecutionPolicy>> is true

.SH Parameters

   first, last - the range of elements to examine
   policy      - the execution policy to use. See execution policy for details.
                 comparison function object (i.e. an object that satisfies the
                 requirements of Compare) which returns true if the first argument is
                 less than the second.

                 The signature of the comparison function should be equivalent to the
                 following:
   comp        -
                  bool cmp(const Type1 &a, const Type2 &b);

                 The signature does not need to have const &, but the function object
                 must not modify the objects passed to it.
                 The types Type1 and Type2 must be such that an object of type RandomIt
                 can be dereferenced and then implicitly converted to both of them. 
.SH Type requirements
   -
   RandomIt must meet the requirements of RandomAccessIterator.

.SH Return value

   The upper bound of the largest range beginning at first which is a max heap. That
   is, the last iterator it for which range [first, it) is a max heap.

.SH Complexity

   Linear in the distance between first and last

.SH Exceptions

   The overloads with a template parameter named ExecutionPolicy report errors as
   follows:

     * If execution of a function invoked as part of the algorithm throws an exception
       and ExecutionPolicy is one of the three standard policies, std::terminate is
       called. For any other ExecutionPolicy, the behavior is implementation-defined.
     * If the algorithm fails to allocate memory, std::bad_alloc is thrown.

.SH Notes

   A max heap is a range of elements [f,l) that has the following properties:

              * With N = l - f, for all 0 < i < N, f[floor(

                i-1
                2

                )] does not compare less than f[i].
              * a new element can be added using std::push_heap()
              * the first element can be removed using std::pop_heap()

.SH Example

   
// Run this code

 #include <iostream>
 #include <algorithm>
 #include <vector>
  
 int main()
 {
     std::vector<int> v { 3, 1, 4, 1, 5, 9 };
  
     std::make_heap(v.begin(), v.end());
  
     // probably mess up the heap
     v.push_back(2);
     v.push_back(6);
  
     auto heap_end = std::is_heap_until(v.begin(), v.end());
  
     std::cout << "all of v: ";
     for (auto i : v) std::cout << i << ' ';
     std::cout << '\\n';
  
     std::cout << "only heap: ";
     for (auto i = v.begin(); i != heap_end; ++i) std::cout << *i << ' ';
     std::cout << '\\n';
 }

.SH Output:

 all of v:  9 5 4 1 1 3 2 6
 only heap: 9 5 4 1 1 3 2

.SH See also

   is_heap checks if the given range is a max heap
   \fI(C++11)\fP \fI(function template)\fP 
