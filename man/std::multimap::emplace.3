.TH std::multimap::emplace 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::multimap::emplace \- std::multimap::emplace

.SH Synopsis
   template< class... Args >            \fI(since C++11)\fP
   iterator emplace( Args&&... args );

   Inserts a new element into the container constructed in-place with the given args .

   Careful use of emplace allows the new element to be constructed while avoiding
   unnecessary copy or move operations. The constructor of the new element (i.e.
   std::pair<const Key, T>) is called with exactly the same arguments as supplied to
   emplace, forwarded via std::forward<Args>(args)....

   No iterators or references are invalidated.

.SH Parameters

   args - arguments to forward to the constructor of the element

.SH Return value

   Returns an iterator to the inserted element.

.SH Exceptions

   If an exception is thrown by any operation, this function has no effect.

.SH Complexity

   Logarithmic in the size of the container.

.SH Example

   
// Run this code

 #include <iostream>
 #include <utility>
 #include <string>
 #include <map>
  
 int main()
 {
     std::multimap<std::string, std::string> m;
  
     // uses pair's move constructor
     m.emplace(std::make_pair(std::string("a"), std::string("a")));
  
     // uses pair's converting move constructor
     m.emplace(std::make_pair("b", "abcd"));
  
     // uses pair's template constructor
     m.emplace("d", "ddd");
  
     // uses pair's piecewise constructor
     m.emplace(std::piecewise_construct,
               std::forward_as_tuple("c"),
               std::forward_as_tuple(10, 'c'));
  
  
     for (const auto &p : m) {
         std::cout << p.first << " => " << p.second << '\\n';
     }
 }

.SH Output:

 a => a
 b => abcd
 c => cccccccccc
 d => ddd

.SH See also

   emplace_hint constructs elements in-place using a hint
   \fI(C++11)\fP      \fI(public member function)\fP 
                inserts elements
   insert       or nodes
                \fI(since C++17)\fP
                \fI(public member function)\fP 
