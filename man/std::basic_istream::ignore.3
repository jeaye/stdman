.TH std::basic_istream::ignore 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::basic_istream::ignore \- std::basic_istream::ignore

.SH Synopsis
   basic_istream& ignore( std::streamsize count = 1, int_type delim = Traits::eof()
   );

   Extracts and discards characters from the input stream until and including delim.

   ignore behaves as an UnformattedInputFunction. After constructing and checking the
   sentry object, it extracts characters from the stream and discards them until any
   one of the following conditions occurs:

     * count characters were extracted. This test is disabled in the special case when
       count equals std::numeric_limits<std::streamsize>::max()

     * end of file conditions occurs in the input sequence, in which case the function
       calls setstate(eofbit)

     * the next available character c in the input sequence is delim, as determined by
       Traits::eq_int_type(Traits::to_int_type(c), delim). The delimiter character is
       extracted and discarded. This test is disabled if delim is Traits::eof()

.SH Parameters

   count - number of characters to extract
   delim - delimiting character to stop the extraction at. It is also extracted.

.SH Return value

   *this

.SH Exceptions

   
   failure if an error occurred (the error state flag is not goodbit) and exceptions()
   is set to throw for that state.

   If an internal operation throws an exception, it is caught and badbit is set. If
   exceptions() is set for badbit, the exception is rethrown.

.SH Example

   The following example uses ignore to skip over non-numeric input:

   
// Run this code

 #include <iostream>
 #include <sstream>
 #include <limits>
  
 int main()
 {
     std::istringstream input("1\\n"
                              "some non-numeric input\\n"
                              "2\\n");
     for(;;) {
         int n;
         input >> n;
  
         if (input.eof() || input.bad()) {
             break;
         } else if (input.fail()) {
             input.clear(); // unset failbit
             input.ignore(std::numeric_limits<std::streamsize>::max(), '\\n'); // skip bad input
         } else {
             std::cout << n << '\\n';
         }
     }
 }

.SH Output:

 1
 2

.SH See also

   get     extracts characters
           \fI(public member function)\fP 
   getline extracts characters until the given character is found
           \fI(public member function)\fP 
