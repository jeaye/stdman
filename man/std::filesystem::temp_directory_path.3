.TH std::filesystem::temp_directory_path 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::filesystem::temp_directory_path \- std::filesystem::temp_directory_path

.SH Synopsis
   Defined in header <filesystem>
   path temp_directory_path();                      \fB(1)\fP \fI(since C++17)\fP
   path temp_directory_path( std::error_code& ec );

   Returns the directory location suitable for temporary files.

.SH Parameters

   \fI(none)\fP

.SH Return value

   A directory suitable for temporary files. The path is guaranteed to exist and to be
   a directory. The overload that takes error_code& argument returns an empty path on
   error.

.SH Exceptions

   The overload that does not take a std::error_code& parameter throws filesystem_error
   on underlying OS API errors, constructed with path to be returned as the first
   argument and the OS error code as the error code argument. The overload taking a
   std::error_code& parameter sets it to the OS API error code if an OS API call fails,
   and executes ec.clear() if no errors occur. Any overload not marked noexcept may
   throw std::bad_alloc if memory allocation fails.

.SH Notes

   On POSIX systems, the path may be the one specified in the environment variables
   TMPDIR, TMP, TEMP, TEMPDIR, and, if none of them are specified, the path "/tmp" is
   returned.

   On Windows systems, the path is typically the one returned by GetTempPath

.SH Example

   
// Run this code

 #include <iostream>
 #include <filesystem>
 namespace fs = std::filesystem;
 int main()
 {
     std::cout << "Temp directory is " << fs::temp_directory_path() << '\\n';
 }

.SH Possible output:

 Temp directory is "C:\\Windows\\TEMP\\"

.SH See also

   tmpfile creates and opens a temporary, auto-removing file
           \fI(function)\fP 
