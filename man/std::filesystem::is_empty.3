.TH std::filesystem::is_empty 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::filesystem::is_empty \- std::filesystem::is_empty

.SH Synopsis
   Defined in header <filesystem>
   bool is_empty( const std::filesystem::path& p );
   bool is_empty( const std::filesystem::path& p, std::error_code& ec )   \fI(since C++17)\fP
   noexcept;

   Checks whether the given path refers to an empty file or directory.

.SH Parameters

   p  - path to examine
   ec - error code to modify in case of error

.SH Return value

   true if the file indicated by p or if the type indicated s refers to an empty file
   or directory, false otherwise. The non-throwing overload returns false if an error
   occurs.

.SH Exceptions

   The overload that does not take a std::error_code& parameter throws filesystem_error
   on underlying OS API errors, constructed with p as the first argument and the OS
   error code as the error code argument. The overload taking a std::error_code&
   parameter sets it to the OS API error code if an OS API call fails, and executes
   ec.clear() if no errors occur. Any overload not marked noexcept may throw
   std::bad_alloc if memory allocation fails.

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

   status         determines file attributes
   symlink_status determines file attributes, checking the symlink target
   \fI(C++17)\fP        \fI(function)\fP 
   \fI(C++17)\fP
   exists         checks whether path refers to existing file system object
   \fI(C++17)\fP        \fI(function)\fP 

.SH Category:

     * Todo no example
