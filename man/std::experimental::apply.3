.TH std::experimental::apply 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::experimental::apply \- std::experimental::apply

.SH Synopsis
   Defined in header <experimental/tuple>
   template <class F, class Tuple>                    (library fundamentals TS)
   constexpr decltype(auto) apply(F&& f, Tuple&& t);

   Invoke the Callable object f with a tuple of arguments.

.SH Parameters

   f - Callable object to be invoked
   t - tuple whose elements to be used as arguments to f

.SH Return value

   What returned by f.

.SH Possible implementation

   namespace detail {
   template <class F, class Tuple, std::size_t... I>
   constexpr decltype(auto) apply_impl( F&& f, Tuple&& t, std::index_sequence<I...> )
   {
     return std::invoke(std::forward<F>(f), std::get<I>(std::forward<Tuple>(t))...);
     // Note: std::invoke is a C++17 feature
   }
   } // namespace detail
    
   template <class F, class Tuple>
   constexpr decltype(auto) apply(F&& f, Tuple&& t)
   {
       return detail::apply_impl(std::forward<F>(f), std::forward<Tuple>(t),
           std::make_index_sequence<std::tuple_size_v<std::decay_t<Tuple>>>{});
   }

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

   make_tuple       creates a tuple object of the type defined by the argument types
                    \fI(function template)\fP 
   forward_as_tuple creates a tuple of rvalue references
                    \fI(function template)\fP 

.SH Category:

     * Todo no example
