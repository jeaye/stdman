.TH std::is_standard_layout 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_standard_layout \- std::is_standard_layout

.SH Synopsis
   Defined in header <type_traits>
   template< class T >              \fI(since C++11)\fP
   struct is_standard_layout;

   If T is a standard layout type (that is, a scalar type, a standard-layout class, or
   an array of such type/class, possibly cv-qualified), provides the member constant
   value equal true. For any other type, value is false.

   A standard-layout class is a class that satisfies StandardLayoutType.

   The behavior is undefined if std::remove_all_extents_t<T> is an incomplete type and
   not (possibly cv-qualified) void.

.SH Template parameters

   T - a type to check

   Helper variable template

   template< class T >
   inline constexpr bool is_standard_layout_v =                           \fI(since C++17)\fP
   is_standard_layout<T>::value;

   

Inherited from std::integral_constant

.SH Member constants

   value    true if T is a standard-layout type , false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP
   operator()    returns value
   \fI(C++14)\fP       \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Notes

   A pointer to a standard-layout class may be converted (with reinterpret_cast) to a
   pointer to its first non-static data member and vice versa.

   If a standard-layout union holds two or more standard-layout structs, it is
   permitted to inspect the common initial part of them.

   The macro offsetof can only be used with standard-layout classes.

.SH Example

   
// Run this code

 #include <iostream>
 #include <type_traits>
  
 struct A {
     int m;
 };
  
 struct B {
     int m1;
 private:
     int m2;
 };
  
 struct C {
     virtual void foo();
 };
  
 int main()
 {
     std::cout << std::boolalpha;
     std::cout << std::is_standard_layout<A>::value << '\\n';
     std::cout << std::is_standard_layout<B>::value << '\\n';
     std::cout << std::is_standard_layout<C>::value << '\\n';
 }

.SH Output:

 true
 false
 false

.SH See also

   is_trivially_copyable        checks if a type is trivially copyable
   \fI(C++11)\fP                      \fI(class template)\fP 
   is_pod                       checks if a type is plain-old data (POD) type
   \fI(C++11)\fP(deprecated in C++20) \fI(class template)\fP 
                                byte offset from the beginning of a standard-layout
   offsetof                     type to specified member
                                \fI(function macro)\fP 
