.TH std::weak_ptr::use_count 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::weak_ptr::use_count \- std::weak_ptr::use_count

.SH Synopsis
   long use_count() const noexcept;  \fI(since C++11)\fP

   Returns the number of shared_ptr instances that share ownership of the managed
   object, or 0 if the managed object has already been deleted, i.e. *this is empty.

.SH Parameters

   \fI(none)\fP

.SH Return value

   The number of shared_ptr instances sharing the ownership of the managed object at
   the instant of the call.

.SH Notes

   expired() may be faster than use_count(). This function is inherently racy, if the
   managed object is shared among threads that might be creating and destroying copies
   of the shared_ptr: then, the result is reliable only if it matches the number of
   copies uniquely owned by the calling thread, or zero; any other value may become
   stale before it can be used.

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

   expired checks whether the referenced object was already deleted
           \fI(public member function)\fP 

.SH Category:

     * Todo no example
