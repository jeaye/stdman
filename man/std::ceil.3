.TH std::ceil 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::ceil \- std::ceil

.SH Synopsis
   Defined in header <cmath>
   float       ceil( float arg );       \fB(1)\fP
   double      ceil( double arg );      \fB(2)\fP
   long double ceil( long double arg ); \fB(3)\fP
   double      ceil( Integral arg );    \fB(4)\fP \fI(since C++11)\fP

   1-3) Computes the smallest integer value not less than arg.
   4) A set of overloads or a function template accepting an argument of any integral
   type. Equivalent to 2) (the argument is cast to double).

.SH Parameters

   arg - floating point value

.SH Return value

   If no errors occur, the smallest integer value not less than arg, that is ⌈arg⌉, is
   returned.

.SH Return value
   math-ceil.svg
   Argument

.SH Error handling

   Errors are reported as specified in math_errhandling

   If the implementation supports IEEE floating-point arithmetic (IEC 60559),

     * The current rounding mode has no effect.
     * If arg is ±∞, it is returned unmodified
     * If arg is ±0, it is returned, unmodified
     * If arg is NaN, NaN is returned

.SH Notes

   FE_INEXACT may be (but isn't required to be) raised when rounding a non-integer
   finite value.

   The largest representable floating-point values are exact integers in all standard
   floating-point formats, so this function never overflows on its own; however the
   result may overflow any integer type (including std::intmax_t), when stored in an
   integer variable.

   This function (for double argument) behaves as if (except for the freedom to not
   raise FE_INEXACT) implemented by the following code:

 #include <cmath>
 #include <cfenv>
 #pragma STDC FENV_ACCESS ON
 double ceil(double x)
 {
     double result;
     int save_round = std::fegetround();
     std::fesetround(FE_UPWARD);
     result = std::rint(x); // or std::nearbyint
     std::fesetround(save_round);
     return result;
 }

.SH Example

   
// Run this code

 #include <cmath>
 #include <iostream>
 int main()
 {
     std::cout << std::fixed
               << "ceil(+2.4) = " << std::ceil(+2.4) << '\\n'
               << "ceil(-2.4) = " << std::ceil(-2.4) << '\\n'
               << "ceil(-0.0) = " << std::ceil(-0.0) << '\\n'
               << "ceil(-Inf) = " << std::ceil(-INFINITY) << '\\n';
 }

.SH Output:

 ceil(+2.4) = 3.000000
 ceil(-2.4) = -2.000000
 ceil(-0.0) = -0.000000
 ceil(-Inf) = -INF

.SH See also

   floor     nearest integer not greater than the given value
             \fI(function)\fP 
   trunc     nearest integer not greater in magnitude than the given value
   \fI(C++11)\fP   \fI(function)\fP 
   round
   lround
   llround   nearest integer, rounding away from zero in halfway cases
   \fI(C++11)\fP   \fI(function)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   nearbyint nearest integer using current rounding mode
   \fI(C++11)\fP   \fI(function)\fP 
   rint
   lrint     nearest integer using current rounding mode with
   llrint    exception if the result differs
   \fI(C++11)\fP   \fI(function)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   C documentation for
   ceil
