.TH std::filesystem::directory_iterator 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::filesystem::directory_iterator \- std::filesystem::directory_iterator

.SH Synopsis
   Defined in header <filesystem>
   class directory_iterator;       \fI(since C++17)\fP

   directory_iterator is an InputIterator that iterates over the directory_entry
   elements of a directory (but does not visit the subdirectories). The iteration order
   is unspecified, except that each directory entry is visited only once. The special
   pathnames dot and dot-dot are skipped.

   If the directory_iterator reports an error or is advanced past the last directory
   entry, it becomes equal to the default-constructed iterator, also known as the end
   iterator. Two end iterators are always equal, dereferencing or incrementing the end
   iterator is undefined behavior.

   If a file or a directory is deleted or added to the directory tree after the
   directory iterator has been created, it is unspecified whether the change would be
   observed through the iterator.

.SH Member types

   Member type       Definition
   value_type        std::filesystem::directory_entry
   difference_type   std::ptrdiff_t
   pointer           const std::filesystem::directory_entry*
   reference         const std::filesystem::directory_entry&
   iterator_category std::input_iterator_tag

.SH Member functions

   constructor   constructs a directory iterator
                 \fI(public member function)\fP 
   destructor    default destructor
                 \fI(public member function)\fP 
   operator=     assigns contents
                 \fI(public member function)\fP 
   operator*     accesses the pointed-to entry
   operator->    \fI(public member function)\fP 
   increment     advances to the next entry
   operator++    \fI(public member function)\fP 

.SH Non-member functions

   begin(std::filesystem::directory_iterator) range-based for loop support
   end(std::filesystem::directory_iterator)   \fI(function)\fP 

   Additionally, operator== and operator!= are provided, either as members or as
   non-members, as required by InputIterator

.SH Notes

   Many low-level OS APIs for directory traversal retrieve file attributes along with
   the next directory entry. The constructors and the non-const member functions of
   directory_iterator store these attributes, if any, in the pointed-to directory_entry
   without calling directory_entry::refresh, which makes it possible to examine the
   attributes of the directory entries as they are being iterated over, without making
   additional system calls.

.SH Example

   
// Run this code

 #include <fstream>
 #include <iostream>
 #include <filesystem>
 namespace fs = std::filesystem;
  
 int main()
 {
     fs::create_directories("sandbox/a/b");
     std::ofstream("sandbox/file1.txt");
     std::ofstream("sandbox/file2.txt");
     for(auto& p: fs::directory_iterator("sandbox"))
         std::cout << p << '\\n';
     fs::remove_all("sandbox");
 }

.SH Possible output:

 "sandbox/a"
 "sandbox/file1.txt"
 "sandbox/file2.txt"

.SH See also

   recursive_directory_iterator an iterator to the contents of a directory and its
   \fI(C++17)\fP                      subdirectories
                                \fI(class)\fP 
   directory_options            options for iterating directory contents
   \fI(C++17)\fP                      \fI(enum)\fP 
   directory_entry              a directory entry
   \fI(C++17)\fP                      \fI(class)\fP 
