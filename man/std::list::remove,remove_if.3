.TH std::list::remove,remove_if 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::list::remove,remove_if \- std::list::remove,remove_if

.SH Synopsis
   void remove( const T& value );
   template< class UnaryPredicate >
   void remove_if( UnaryPredicate p );

   Removes all elements satisfying specific criteria. The first version removes all
   elements that are equal to value, the second version removes all elements for which
   predicate p returns true.

.SH Parameters

   value - value of the elements to remove
           unary predicate which returns true if the element should be removed.

           The signature of the predicate function should be equivalent to the
           following:

   p     -  bool pred(const Type &a);

           The signature does not need to have const &, but the function must not
           modify the objects passed to it.
           The type Type must be such that an object of type
           list<T,Allocator>::const_iterator can be dereferenced and then implicitly
           converted to Type. 

.SH Return value

   \fI(none)\fP

.SH Complexity

   Linear in the size of the container

.SH Example

   
// Run this code

 #include <list>
 #include <iostream>
  
 int main()
 {
     std::list<int> l = { 1,100,2,3,10,1,11,-1,12 };
  
     l.remove(1); // remove both elements equal to 1
     l.remove_if([](int n){ return n > 10; }); // remove all elements greater than 10
  
     for (int n : l) {
         std::cout << n << ' ';
     }
     std::cout << '\\n';
 }

.SH Output:

 2 3 10 -1

.SH See also

   remove    removes elements satisfying specific criteria
   remove_if \fI(function template)\fP 
