.TH std::rel_ops::operator!=,>,<=,>= 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::rel_ops::operator!=,>,<=,>= \- std::rel_ops::operator!=,>,<=,>=

.SH Synopsis
   Defined in header <utility>
   template< class T >                            \fB(1)\fP (deprecated in C++20)
   bool operator!=( const T& lhs, const T& rhs );
   template< class T >                            \fB(2)\fP (deprecated in C++20)
   bool operator>( const T& lhs, const T& rhs );
   template< class T >                            \fB(3)\fP (deprecated in C++20)
   bool operator<=( const T& lhs, const T& rhs );
   template< class T >                            \fB(4)\fP (deprecated in C++20)
   bool operator>=( const T& lhs, const T& rhs );

   Given a user-defined operator== and operator< for objects of type T, implements the
   usual semantics of other comparison operators.

   1) Implements operator!= in terms of operator==.

   2) Implements operator> in terms of operator<.

   3) Implements operator<= in terms of operator<.

   4) Implements operator>= in terms of operator<.

.SH Parameters

   lhs - left-hand argument
   rhs - right-hand argument

.SH Return value

   1) Returns true if lhs is not equal to rhs.

   2) Returns true if lhs is greater than rhs.

   3) Returns true if lhs is less or equal to rhs.

   4) Returns true if lhs is greater or equal to rhs.

.SH Possible implementation

.SH First version
   namespace rel_ops {
       template< class T >
       bool operator!=( const T& lhs, const T& rhs )
       {
           return !(lhs == rhs);
       }
   }
.SH Second version
   namespace rel_ops {
       template< class T >
       bool operator>( const T& lhs, const T& rhs )
       {
           return rhs < lhs;
       }
   }
                     Third version
   namespace rel_ops {
       template< class T >
       bool operator<=( const T& lhs, const T& rhs )
       {
           return !(rhs < lhs);
       }
   }
                     Fourth version
   namespace rel_ops {
       template< class T >
       bool operator>=( const T& lhs, const T& rhs )
       {
           return !(lhs < rhs);
       }
   }

.SH Notes

   Boost.operators provides a more versatile alternative to std::rel_ops

.SH Example

   
// Run this code

 #include <iostream>
 #include <utility>
  
 struct Foo {
     int n;
 };
  
 bool operator==(const Foo& lhs, const Foo& rhs)
 {
     return lhs.n == rhs.n;
 }
  
 bool operator<(const Foo& lhs, const Foo& rhs)
 {
     return lhs.n < rhs.n;
 }
  
 int main()
 {
     Foo f1 = {1};
     Foo f2 = {2};
     using namespace std::rel_ops;
  
     std::cout << std::boolalpha;
     std::cout << "not equal?     : " << (f1 != f2) << '\\n';
     std::cout << "greater?       : " << (f1 > f2) << '\\n';
     std::cout << "less equal?    : " << (f1 <= f2) << '\\n';
     std::cout << "greater equal? : " << (f1 >= f2) << '\\n';
 }

.SH Output:

 not equal?     : true
 greater?       : false
 less equal?    : true
 greater equal? : false
