.TH std::map::extract 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::map::extract \- std::map::extract

.SH Synopsis
   node_type extract( const_iterator position ); \fB(1)\fP \fI(since C++17)\fP
   node_type extract( const key_type& x );       \fB(2)\fP \fI(since C++17)\fP

   1) Unlinks the node that contains the element pointed to by position and returns a
   node handle that owns it
   2) If the container has an element with key equivalent to x, unlinks the node that
   contains that element from the container and returns a node handle that owns it.
   Otherwise, returns an empty node handle.

   In either case, no elements are copied or moved, only the internal pointers of the
   container nodes are repointed (rebalancing may occur, as with erase())

   Extracting a node invalidates the iterators to the extracted element. Pointers and
   references to the extracted element remain valid, but cannot be used while element
   is owned by a node handle: they become usable if the element is inserted into a
   container.

.SH Parameters

   position - a valid iterator into this container
   x        - a key to identify the node to be extracted

.SH Return value

   A node handle that owns the extracted element, or empty node handle in case the
   element is not found in overload \fB(2)\fP

.SH Complexity

   1) amortized constant
   2) log(a.size())

.SH Notes

   extract is the only way to change a key of a map element without reallocation:

 map<int, string> m{{1,”mango”}, {2,”papaya”}, {3,”guava”}};
 auto nh = m.extract\fB(2)\fP;
 nh.key() = 4;
 m.insert(move(nh));
 // m == {{1,”mango”}, {3,”guava”}, {4,”papaya”}}

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

   merge   splices nodes from another container
   \fI(C++17)\fP \fI(public member function)\fP 
           inserts elements
   insert  or nodes
           \fI(since C++17)\fP
           \fI(public member function)\fP 
   erase   erases elements
           \fI(public member function)\fP 

.SH Category:

     * Todo no example
