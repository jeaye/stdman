.TH std::basic_syncbuf 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::basic_syncbuf \- std::basic_syncbuf

.SH Synopsis
   Defined in header <syncstream>
   template<

       class CharT,
       class Traits = std::char_traits<CharT>,                         (since C++20)
       class Allocator = std::allocator<CharT>

   > class basic_syncbuf : public std::basic_streambuf<CharT, Traits>

   std::basic_syncbuf is a wrapper for a std::basic_streambuf (provided at construction
   time as a pointer). It accumulates output in its own internal buffer, and atomically
   transmits its entire contents to the wrapped buffer on destruction and when
   explicitly requested, so that they appear as a contiguous sequence of characters. It
   guarantees that there are no data races and no interleaving of characters sent to
   the wrapped buffer as long as all other outputs made to the same buffer are made
   through, possibly different, instances of std::basic_syncbuf.

   Typical implementation of std::basic_syncbuf holds a pointer to the wrapped
   std::basic_streambuf, a boolean flag indicating whether the buffer will transmit its
   contents to the wrapped buffer on sync (flush), a boolean flag indicating a pending
   flush when the policy is to not emit on sync, an internal buffer that uses Allocator
   (such as std::string), and a pointer to a mutex used to synchronize emit between
   multiple threads accessing the same wrapped stream buffer (these mutexes may be in a
   hash map with pointers to basic_streambuf objects used as keys).

   Like other streambuf classes, std::basic_syncbuf is normally only accessed through
   the corresponding stream, std::osyncstream, not directly.

   Two specializations for common character types are also defined:

   Defined in header <syncstream>
   Type     Definition
   syncbuf  basic_syncbuf<char>
   wsyncbuf basic_syncbuf<wchar_t>

.SH Member types

   Member type    Definition
   char_type      CharT
   traits_type    Traits
   int_type       Traits::int_type
   pos_type       Traits::pos_type
   off_type       Traits::off_type
   allocator_type Allocator
   streambuf_type std::basic_streambuf<CharT, Traits>

.SH Member functions

.SH Public member functions
   constructor      constructs a basic_syncbuf object
                    \fI(public member function)\fP 
   operator=        assigns a basic_syncbuf object
                    \fI(public member function)\fP 
   swap             swaps two basic_syncbuf objects
                    \fI(public member function)\fP 
   destructor       destroys the basic_syncbuf and emits its internal buffer
                    \fI(public member function)\fP 
                    atomically transmits the entire internal buffer to the wrapped
   emit             streambuf
                    \fI(public member function)\fP 
   get_wrapped      retrieves the wrapped streambuf pointer
                    \fI(public member function)\fP 
   get_allocator    retrieves the allocator used by this basic_syncbuf
                    \fI(public member function)\fP 
   set_emit_on_sync changes the current emit-on-sync policy
                    \fI(public member function)\fP 
.SH Protected member functions
                    either emits, or records a pending flush, depending on the current
   sync             emit-on-sync policy
                    \fI(public member function)\fP 

.SH Non-member functions

   std::swap(std::basic_syncbuf) specializes the std::swap algorithm
   (C++20)                       \fI(function template)\fP 

Inherited from std::basic_streambuf

.SH Member types

   Member type Definition
   char_type   CharT
   traits_type Traits
   int_type    Traits::int_type
   pos_type    Traits::pos_type
   off_type    Traits::off_type

.SH Member functions

   destructor                 destructs the basic_streambuf object
   \fB[virtual]\fP                  \fI(virtual public member function of std::basic_streambuf)\fP
                              
.SH Locales
   pubimbue                   invokes imbue()
                              \fI(public member function of std::basic_streambuf)\fP 
   getloc                     obtains a copy of the associated locale
                              \fI(public member function of std::basic_streambuf)\fP 
.SH Positioning
   pubsetbuf                  invokes setbuf()
                              \fI(public member function of std::basic_streambuf)\fP 
   pubseekoff                 invokes seekoff()
                              \fI(public member function of std::basic_streambuf)\fP 
   pubseekpos                 invokes seekpos()
                              \fI(public member function of std::basic_streambuf)\fP 
   pubsync                    invokes sync()
                              \fI(public member function of std::basic_streambuf)\fP 
.SH Get area
                              obtains the number of characters immediately available in
   in_avail                   the get area
                              \fI(public member function of std::basic_streambuf)\fP 
                              advances the input sequence, then reads one character
   snextc                     without advancing again
                              \fI(public member function of std::basic_streambuf)\fP 
                              reads one character from the input sequence and advances
   sbumpc                     the sequence
                              \fI(public member function of std::basic_streambuf)\fP 
   stossc                     advances the input sequence as if by calling sbumpc() and
   \fB(deprecated)\fP \fI(until C++17)\fP discarding the result
                              \fI(public member function)\fP 
                              reads one character from the input sequence without
   sgetc                      advancing the sequence
                              \fI(public member function of std::basic_streambuf)\fP 
   sgetn                      invokes xsgetn()
                              \fI(public member function of std::basic_streambuf)\fP 
.SH Put area
                              writes one character to the put area and advances the
   sputc                      next pointer
                              \fI(public member function of std::basic_streambuf)\fP 
   sputn                      invokes xsputn()
                              \fI(public member function of std::basic_streambuf)\fP 
.SH Putback
   sputbackc                  puts one character back in the input sequence
                              \fI(public member function of std::basic_streambuf)\fP 
   sungetc                    moves the next pointer in the input sequence back by one
                              \fI(public member function of std::basic_streambuf)\fP 

.SH Protected member functions

   constructor   constructs a basic_streambuf object
                 \fI(protected member function)\fP 
   operator=     replaces a basic_streambuf object
   \fI(C++11)\fP       \fI(protected member function)\fP 
   swap          swaps two basic_streambuf objects
   \fI(C++11)\fP       \fI(protected member function)\fP 
.SH Locales
   imbue         changes the associated locale
   \fB[virtual]\fP     \fI(virtual protected member function of std::basic_streambuf)\fP 
.SH Positioning
   setbuf        replaces the buffer with user-defined array, if permitted
   \fB[virtual]\fP     \fI(virtual protected member function of std::basic_streambuf)\fP 
   seekoff       repositions the next pointer in the input sequence, output sequence,
   \fB[virtual]\fP     or both, using relative addressing
                 \fI(virtual protected member function of std::basic_streambuf)\fP 
   seekpos       repositions the next pointer in the input sequence, output sequence,
   \fB[virtual]\fP     or both using absolute addressing
                 \fI(virtual protected member function of std::basic_streambuf)\fP 
   sync          synchronizes the buffers with the associated character sequence
   \fB[virtual]\fP     \fI(virtual protected member function of std::basic_streambuf)\fP 
.SH Get area
   showmanyc     obtains the number of characters available for input in the associated
   \fB[virtual]\fP     input sequence, if known
                 \fI(virtual protected member function of std::basic_streambuf)\fP 
   underflow     reads characters from the associated input sequence to the get area
   \fB[virtual]\fP     \fI(virtual protected member function of std::basic_streambuf)\fP 
   uflow         reads characters from the associated input sequence to the get area
   \fB[virtual]\fP     and advances the next pointer
                 \fI(virtual protected member function of std::basic_streambuf)\fP 
   xsgetn        reads multiple characters from the input sequence
   \fB[virtual]\fP     \fI(virtual protected member function of std::basic_streambuf)\fP 
   eback         returns a pointer to the beginning, current character and the end of
   gptr          the get area
   egptr         \fI(protected member function)\fP 
   gbump         advances the next pointer in the input sequence
                 \fI(protected member function)\fP 
                 repositions the beginning, next, and end pointers of the input
   setg          sequence
                 \fI(protected member function)\fP 
.SH Put area
   xsputn        writes multiple characters to the output sequence
   \fB[virtual]\fP     \fI(virtual protected member function of std::basic_streambuf)\fP 
   overflow      writes characters to the associated output sequence from the put area
   \fB[virtual]\fP     \fI(virtual protected member function of std::basic_streambuf)\fP 
   pbase         returns a pointer to the beginning, current character and the end of
   pptr          the put area
   epptr         \fI(protected member function)\fP 
   pbump         advances the next pointer of the output sequence
                 \fI(protected member function)\fP 
                 repositions the beginning, next, and end pointers of the output
   setp          sequence
                 \fI(protected member function)\fP 
.SH Putback
   pbackfail     puts a character back into the input sequence, possibly modifying the
   \fB[virtual]\fP     input sequence
                 \fI(virtual protected member function of std::basic_streambuf)\fP 
