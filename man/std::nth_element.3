.TH std::nth_element 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::nth_element \- std::nth_element

.SH Synopsis
   Defined in header <algorithm>
   template< class RandomIt >                                         \fB(1)\fP
   void nth_element( RandomIt first, RandomIt nth, RandomIt last );
   template< class ExecutionPolicy, class RandomIt >
   void nth_element( ExecutionPolicy&& policy, RandomIt first,        \fB(2)\fP \fI(since C++17)\fP
   RandomIt nth, RandomIt last );
   template< class RandomIt, class Compare >
   void nth_element( RandomIt first, RandomIt nth, RandomIt last,     \fB(3)\fP
   Compare comp );
   template< class ExecutionPolicy, class RandomIt, class Compare >
   void nth_element( ExecutionPolicy&& policy, RandomIt first,        \fB(4)\fP \fI(since C++17)\fP
   RandomIt nth, RandomIt last, Compare comp );

   nth_element is a partial sorting algorithm that rearranges elements in [first, last)
   such that:

     * The element pointed at by nth is changed to whatever element would occur in that
       position if [first, last) was sorted.
     * All of the elements before this new nth element are less than or equal to the
       elements after the new nth element.

   More formally, nth_element partially sorts the range [first, last) in ascending
   order so that the condition !(*j < *i) (for (1-2), or comp(*j, *i) == false for
   (3-4)) is met for any i in the range [first, nth) and for any j in the range [nth,
   last). The element placed in the nth position is exactly the element that would
   occur in this position if the range was fully sorted.

   nth may be the end iterator, in this case the function has no effect.

   1) Elements are compared using operator<.
   3) Elements are compared using the given binary comparison function comp.
   2,4) Same as (1,3), but executed according to policy. These overloads do not
   participate in overload resolution unless
   std::is_execution_policy_v<std::decay_t<ExecutionPolicy>> is true

.SH Parameters

   first, last - random access iterators defining the range sort
   nth         - random access iterator defining the sort partition point
   policy      - the execution policy to use. See execution policy for details.
                 comparison function object (i.e. an object that satisfies the
                 requirements of Compare) which returns true if the first argument is
                 less than (i.e. is ordered before) the second.

                 The signature of the comparison function should be equivalent to the
                 following:
   comp        -
                  bool cmp(const Type1 &a, const Type2 &b);

                 The signature does not need to have const &, but the function object
                 must not modify the objects passed to it.
                 The types Type1 and Type2 must be such that an object of type RandomIt
                 can be dereferenced and then implicitly converted to both of them. 
.SH Type requirements
   -
   RandomIt must meet the requirements of ValueSwappable and RandomAccessIterator.
   -
   The type of dereferenced RandomIt must meet the requirements of MoveAssignable and
   MoveConstructible.

.SH Return value

   \fI(none)\fP

.SH Complexity

   1,3) Linear in std::distance(first, last) on average.
   2,4) O(N) applications of the predicate, and O(N log N) swaps, where N = last -
   first.

.SH Exceptions

   The overloads with a template parameter named ExecutionPolicy report errors as
   follows:

     * If execution of a function invoked as part of the algorithm throws an exception
       and ExecutionPolicy is one of the three standard policies, std::terminate is
       called. For any other ExecutionPolicy, the behavior is implementation-defined.
     * If the algorithm fails to allocate memory, std::bad_alloc is thrown.

.SH Notes

   The algorithm used is typically introselect although other selection algorithms with
   suitable average-case complexity are allowed.

.SH Example

   
// Run this code

 #include <iostream>
 #include <vector>
 #include <algorithm>
 #include <functional>
  
 int main()
 {
     std::vector<int> v{5, 6, 4, 3, 2, 6, 7, 9, 3};
  
     std::nth_element(v.begin(), v.begin() + v.size()/2, v.end());
     std::cout << "The median is " << v[v.size()/2] << '\\n';
  
     std::nth_element(v.begin(), v.begin()+1, v.end(), std::greater<int>());
     std::cout << "The second largest element is " << v[1] << '\\n';
 }

.SH Output:

 The median is 5
 The second largest element is 7

.SH See also

   partial_sort_copy copies and partially sorts a range of elements
                     \fI(function template)\fP 
                     sorts a range of elements while preserving order between equal
   stable_sort       elements
                     \fI(function template)\fP 
   sort              sorts a range into ascending order
                     \fI(function template)\fP 
