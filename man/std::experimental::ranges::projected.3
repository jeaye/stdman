.TH std::experimental::ranges::projected 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::experimental::ranges::projected \- std::experimental::ranges::projected

.SH Synopsis
Defined in header <experimental/ranges/iterator>
template <ranges::Readable I, ranges::IndirectRegularUnaryInvocable<I> Proj>

struct projected {
    using value_type =
       
std::remove_cv_t<std::remove_reference_t<ranges::indirect_result_of_t<Proj&(I)>>>;
    ranges::indirect_result_of_t<Proj&(I)> operator*() const;                       (ranges
};                                                                                  TS)

template <ranges::WeaklyIncrementable I, class Proj>
struct difference_type<projected<I, Proj>> {
    using type = ranges::difference_type_t<I>;

};

   The class template projected bundles a Readable type I and a function Proj into a
   new Readable type whose reference type is the result of applying Proj to the
   reference type of I. It exists solely to ease constraint specification, and so its
   operator*() may not be actually defined.
