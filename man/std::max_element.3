.TH std::max_element 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::max_element \- std::max_element

.SH Synopsis
   Defined in header <algorithm>
   template< class ForwardIt >
   ForwardIt max_element( ForwardIt first,                  \fI(until C++17)\fP
   ForwardIt last );
   template< class ForwardIt >
   constexpr ForwardIt max_element( ForwardIt               \fI(since C++17)\fP
   first, ForwardIt last );
   template< class ExecutionPolicy, class ForwardIt
   >                                                    \fB(2)\fP \fI(since C++17)\fP
   ForwardIt max_element( ExecutionPolicy&& policy,
   ForwardIt first, ForwardIt last );               \fB(1)\fP
   template< class ForwardIt, class Compare >
   ForwardIt max_element( ForwardIt first,                                \fI(until C++17)\fP
   ForwardIt last, Compare comp );
   template< class ForwardIt, class Compare >
   constexpr ForwardIt max_element( ForwardIt           \fB(3)\fP               \fI(since C++17)\fP
   first, ForwardIt last, Compare comp );
   template< class ExecutionPolicy, class
   ForwardIt, class Compare >                               \fB(4)\fP           \fI(since C++17)\fP
   ForwardIt max_element( ExecutionPolicy&& policy,
   ForwardIt first, ForwardIt last, Compare comp );

   Finds the greatest element in the range [first, last).

   1) Elements are compared using operator<.
   3) Elements are compared using the given binary comparison function comp.
   2,4) Same as (1,3), but executed according to policy. These overloads do not
   participate in overload resolution unless
   std::is_execution_policy_v<std::decay_t<ExecutionPolicy>> is true

.SH Parameters

   first, last - forward iterators defining the range to examine
   policy      - the execution policy to use. See execution policy for details.
                 comparison function object (i.e. an object that satisfies the
                 requirements of Compare) which returns true if the first argument is
                 less than the second.

                 The signature of the comparison function should be equivalent to the
                 following:
   comp        -
                  bool cmp(const Type1 &a, const Type2 &b);

                 The signature does not need to have const &, but the function object
                 must not modify the objects passed to it.
                 The types Type1 and Type2 must be such that an object of type
                 ForwardIt can be dereferenced and then implicitly converted to both of
                 them. 
.SH Type requirements
   -
   ForwardIt must meet the requirements of ForwardIterator.

.SH Return value

   Iterator to the greatest element in the range [first, last). If several elements in
   the range are equivalent to the greatest element, returns the iterator to the first
   such element. Returns last if the range is empty.

.SH Complexity

   Exactly max(N-1,0) comparisons, where N = std::distance(first, last).

.SH Exceptions

   The overloads with a template parameter named ExecutionPolicy report errors as
   follows:

     * If execution of a function invoked as part of the algorithm throws an exception
       and ExecutionPolicy is one of the three standard policies, std::terminate is
       called. For any other ExecutionPolicy, the behavior is implementation-defined.
     * If the algorithm fails to allocate memory, std::bad_alloc is thrown.

.SH Possible implementation

.SH First version
   template<class ForwardIt>
   ForwardIt max_element(ForwardIt first, ForwardIt last)
   {
       if (first == last) return last;
    
       ForwardIt largest = first;
       ++first;
       for (; first != last; ++first) {
           if (*largest < *first) {
               largest = first;
           }
       }
       return largest;
   }
.SH Second version
   template<class ForwardIt, class Compare>
   ForwardIt max_element(ForwardIt first, ForwardIt last,
                         Compare comp)
   {
       if (first == last) return last;
    
       ForwardIt largest = first;
       ++first;
       for (; first != last; ++first) {
           if (comp(*largest, *first)) {
               largest = first;
           }
       }
       return largest;
   }

.SH Example

   
// Run this code

 #include <algorithm>
 #include <iostream>
 #include <vector>
 #include <cmath>
  
 static bool abs_compare(int a, int b)
 {
     return (std::abs(a) < std::abs(b));
 }
  
 int main()
 {
     std::vector<int> v{ 3, 1, -14, 1, 5, 9 };
     std::vector<int>::iterator result;
  
     result = std::max_element(v.begin(), v.end());
     std::cout << "max element at: " << std::distance(v.begin(), result) << '\\n';
  
     result = std::max_element(v.begin(), v.end(), abs_compare);
     std::cout << "max element (absolute) at: " << std::distance(v.begin(), result);
 }

.SH Output:

 max element at: 5
 max element (absolute) at: 2

.SH See also

   min_element    returns the smallest element in a range
                  \fI(function template)\fP 
   minmax_element returns the smallest and the largest elements in a range
   \fI(C++11)\fP        \fI(function template)\fP 
   max            returns the greater of the given values
                  \fI(function template)\fP 
