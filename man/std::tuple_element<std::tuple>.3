.TH std::tuple_element<std::tuple> 3 "2018.03.28" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::tuple_element<std::tuple> \- std::tuple_element<std::tuple>

.SH Synopsis
   Defined in header <tuple>
   template< std::size_t I, class T >                                 \fB(1)\fP \fI(since C++11)\fP
   class tuple_element; /* undefined */
   template< std::size_t I, class... Types >                          \fB(2)\fP \fI(since C++11)\fP
   class tuple_element< I, tuple<Types...> >;
   Defined in header <tuple>
   Defined in header <array>                                              \fI(since C++17)\fP
   Defined in header <utility>                                            \fI(since C++17)\fP
   template< std::size_t I, class T >

   class tuple_element< I, const T > {
     typedef typename                                                 \fB(3)\fP \fI(since C++11)\fP
         std::add_const<typename std::tuple_element<I,
   T>::type>::type type;

   };
   template< std::size_t I, class T >

   class tuple_element< I, volatile T > {
     typedef typename                                                 \fB(4)\fP \fI(since C++11)\fP
         std::add_volatile<typename std::tuple_element<I,
   T>::type>::type type;

   };
   template< std::size_t I, class T >

   class tuple_element< I, const volatile T > {
     typedef typename                                                 \fB(5)\fP \fI(since C++11)\fP
         std::add_cv<typename std::tuple_element<I, T>::type>::type
   type;

   };

   Provides compile-time indexed access to the types of the elements of the tuple.

.SH Member types

   Member type Definition
   type        the type of Ith element of the tuple, where I is in [0,
               sizeof...(Types))

.SH Helper types

   template <std::size_t I, class T>                            \fI(since C++14)\fP
   using tuple_element_t = typename tuple_element<I, T>::type;

.SH Possible implementation

   template< std::size_t I, class T >
   struct tuple_element;
    
   // recursive case
   template< std::size_t I, class Head, class... Tail >
   struct tuple_element<I, std::tuple<Head, Tail...>>
       : std::tuple_element<I-1, std::tuple<Tail...>> { };
    
   // base case
   template< class Head, class... Tail >
   struct tuple_element<0, std::tuple<Head, Tail...>> {
      typedef Head type;
   };

.SH Example

   
// Run this code

 #include <iostream>
 #include <tuple>
  
 template <class... Args>
 struct type_list
 {
    template <std::size_t N>
    using type = typename std::tuple_element<N, std::tuple<Args...>>::type;
 };
  
 int main()
 {
    std::cout << std::boolalpha;
    type_list<int, char, bool>::type<2> x = true;
    std::cout << x << '\\n';
 }

.SH Output:

 true

.SH See also

   std::tuple_element<std::array> obtains the type of the elements of array
                                  \fI(class template specialization)\fP 
   std::tuple_element<std::pair>  obtains the type of the elements of pair
   \fI(C++11)\fP                        \fI(class template specialization)\fP 
