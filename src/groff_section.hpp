/*
  Copyright Â© 2014 Jesse 'Jeaye' Wilkerson
  See licensing in LICENSE file, or at:
    http://www.opensource.org/licenses/MIT

  File: groff_section.hpp
  Author: Jesse 'Jeaye' Wilkerson
*/

#pragma once

namespace groff_detail
{
  extern std::vector<std::string> sections;

  void section(std::vector<std::string> &lines)
  {
    /* The amount of characters allowed after a section name. */
    static constexpr const size_t leniency{ 2 };
    for(auto &l : lines)
    {
      std::string tmp{ l };
      str::trim(tmp);
      std::string::size_type found{ std::string::npos };

      auto const is_section(std::find_if(sections.begin(), sections.end(),
      [&](std::string const &s)
      {
        found = tmp.find(s);
        return (found != std::string::npos) && (tmp.size() - s.size()) < leniency;
      }));

      if(is_section != sections.end() && found == 0)
      { l = ".SH " + str::ltrim(l); }
    }
  }

  /* No, I did not type this by hand. In fact, for future reference:
     grep -r "<span class=\"toctext\">" | sed 's/^.*<span class\=\"toctext\">//' | \
     sed 's/<\/span>.*$//' | grep -v "<span>" | sort -u
   */
  std::vector<std::string> sections
  {
    "Acquire operation",
    "Additional utilities",
    "Array version, unique_ptr&lt;T[]&gt;",
    "Atomic-fence synchronization",
    "Bucket interface",
    "Capacity",
    "Carries dependency",
    "Characteristics",
    "Class-specific overloads",
    "Compare",
    "Comparisons",
    "Complexity",
    "Concatenation",
    "Constants",
    "Construction",
    "Construction and Seeding",
    "constructors",
    "Constructors",
    "const T* specialization member types",
    "Consume operation",
    "Conversions",
    "Creation",
    "Decomposition",
    "Deduction guides",
    "Defect reports",
    "Dependency-ordered before",
    "Deprecated member types",
    "destructor",
    "div_t",
    "Element access",
    "empty",
    "Error Conditions",
    "Error handling",
    "Error handling and special values",
    "Example",
    "Example 1",
    "Example 2",
    "Examples",
    "Example using a custom comparison function",
    "Example With Custom Comparator",
    "Exceptions",
    "Exclusive locking",
    "Execution",
    "Exeptions",
    "Expanded value",
    "Explanation",
    "Exponential functions",
    "External links",
    "Fence-atomic synchronization",
    "Fence-fence synchronization",
    "Field access",
    "File operations",
    "First version",
    "Formal description",
    "Format",
    "Format observers",
    "Formatted input",
    "Formatted output",
    "Formatting",
    "Generation",
    "get_allocator",
    "Get area",
    "Getting the result",
    "Global objects",
    "Global replacements",
    "Happens-before",
    "Hash policy",
    "Helper classes",
    "Helper class templates",
    "Helper Functions",
    "Helper objects",
    "Helpers",
    "Helper template",
    "Helper template alias",
    "Helper templates",
    "Helper types",
    "Helper variable template",
    "Helper variable templates",
    "Hyperbolic functions",
    "imaxdiv_t",
    "Implementation notes",
    "Implicitly-defined member functions",
    "Input/output",
    "Internal extensible array",
    "International monetary numeric formatting parameters",
    "Inter-thread happens-before",
    "Invalidation notes",
    "Invoking over Incomplete Types",
    "Iterator invalidation",
    "Iterators",
    "key",
    "ldiv_t",
    "Literals",
    "lldiv_t",
    "Locale",
    "Locales",
    "Local monetary numeric formatting parameters",
    "Locking",
    "Lookup",
    "mapped",
    "Member alias templates",
    "Member classes",
    "Member constants",
    "Member function",
    "Member function operator()",
    "Member functions",
    "Member objects",
    "Members  identical to std::future",
    "Members  identical to std::shared_future",
    "Member type result_type",
    "Member types",
    "Member types and constants",
    "Miscellaneous",
    "Modifers",
    "Modification order",
    "Modifiers",
    "Monetary numeric formatting parameters",
    "Native handle",
    "Non-member function",
    "Non-member functions",
    "Non-member-functions",
    "Non-monetary numeric formatting parameters",
    "Non-static data members",
    "Note",
    "Notes",
    "Notification",
    "Numeric conversions",
    "Observers",
    "Operations",
    "operator=",
    "operator==",
    "operator!=",
    "operator bool",
    "operator&gt;",
    "operator&gt;=",
    "operator&lt;",
    "operator&lt;=",
    "Optional Member functions",
    "Other special member functions",
    "Overloads",
    "Parameters",
    "Partial specializations",
    "Positioning",
    "Possible implementation",
    "Possible Implementation",
    "Possible implementations",
    "Postconditions",
    "Power functions",
    "Precondition",
    "Primary template",
    "Private member functions",
    "Protected member functions",
    "Protected member objects",
    "Public member functions",
    "Put area",
    "Putback",
    "Queries",
    "References",
    "Relationship with C library macro constants",
    "Relationship with the main function",
    "Relationship with volatile",
    "Relaxed ordering",
    "Release-Acquire ordering",
    "Release-Consume ordering",
    "Release operation",
    "Release sequence",
    "Remarks",
    "Requirements on pointer-like class types",
    "Return",
    "Return value",
    "Search",
    "Second version",
    "See also",
    "See Also",
    "Sequenced-before",
    "Sequentially-consistent ordering",
    "Setting the result",
    "Shared locking",
    "Signal handler",
    "Single-object version, unique_ptr&lt;T&gt;",
    "Size",
    "Specializations",
    "Specializations for floating-point types",
    "Specializations for integral types",
    "Specialized member functions",
    "Stage 1: conversion specifier selection",
    "Stage 2: character extraction",
    "Stage 2: locale-specific conversion",
    "Stage 3: conversion and storage",
    "Stage 3: padding",
    "Stage 4: output",
    "Standard specializations",
    "Standard specializations for basic types",
    "Standard specializations for library types",
    "State",
    "State functions",
    "String operations",
    "swap",
    "Target access",
    "Template parameters",
    "Template Parameters",
    "The badbit",
    "The eofbit",
    "The failbit",
    "Trigonometric functions",
    "T* specialization member types",
    "Type aliases",
    "Type-erased allocator",
    "Type requirements",
    "Unformatted input",
    "Unformatted output",
    "User-defined overloads",
    "value",
    "vector&lt;bool&gt; specific modifiers",
    "Visible side-effects",
    "Waiting",
    "Warning"
  };
}
